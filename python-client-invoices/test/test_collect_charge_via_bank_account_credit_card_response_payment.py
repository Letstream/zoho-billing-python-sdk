# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_invoices.models.collect_charge_via_bank_account_credit_card_response_payment import CollectChargeViaBankAccountCreditCardResponsePayment

class TestCollectChargeViaBankAccountCreditCardResponsePayment(unittest.TestCase):
    """CollectChargeViaBankAccountCreditCardResponsePayment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CollectChargeViaBankAccountCreditCardResponsePayment:
        """Test CollectChargeViaBankAccountCreditCardResponsePayment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CollectChargeViaBankAccountCreditCardResponsePayment`
        """
        model = CollectChargeViaBankAccountCreditCardResponsePayment()
        if include_optional:
            return CollectChargeViaBankAccountCreditCardResponsePayment(
                payment_id = '90300000079467',
                payment_mode = 'autotransaction',
                amount = 370,
                amount_refunded = 50,
                bank_charges = 10,
                var_date = '2016-06-05',
                status = 'paid',
                reference_number = 'INV-384',
                due_date = '2016-06-05',
                amount_due = 10,
                description = 'Payment has been made for the invoice INV-384',
                customer_id = '903000000000099',
                customer_name = 'Bowman Furniture',
                email = 'benjamin.george@bowmanfurniture.com',
                autotransaction = ls_zoho_billing_invoices.models.collect_charge_via_bank_account_credit_card_response_payment_autotransaction.collect_charge_via_bank_account_credit_card_response_payment_autotransaction(
                    autotransaction_id = '9030000079465', 
                    payment_gateway = 'payflow_pro', 
                    gateway_transaction_id = 'B10E6E0F31BD', 
                    gateway_error_message = 'Gateway error message for a failed transaction.', 
                    account_id = '9030000000000361', ),
                invoices = [
                    ls_zoho_billing_invoices.models.collect_charge_via_bank_account_credit_card_response_payment_invoices_inner.collect_charge_via_bank_account_credit_card_response_payment_invoices_inner(
                        invoice_id = '903000000079426', 
                        invoice_number = 'INV-384', 
                        date = 2016-06-05, 
                        invoice_amount = 450, 
                        amount_applied = 450, 
                        balance_amount = 0, )
                    ],
                currency_code = 'USD',
                currency_symbol = '$',
                custom_fields = [
                    ls_zoho_billing_invoices.models.collect_charge_via_bank_account_credit_card_response_payment_custom_fields_inner.collect_charge_via_bank_account_credit_card_response_payment_custom_fields_inner(
                        index = 1, 
                        value = '', 
                        label = '', 
                        data_type = 'text', )
                    ],
                created_time = '2016-06-05T02:15:15-0700',
                updated_time = '2016-06-05T02:15:15-0700'
            )
        else:
            return CollectChargeViaBankAccountCreditCardResponsePayment(
        )
        """

    def testCollectChargeViaBankAccountCreditCardResponsePayment(self):
        """Test CollectChargeViaBankAccountCreditCardResponsePayment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

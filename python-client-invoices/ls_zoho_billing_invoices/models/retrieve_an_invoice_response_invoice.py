# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_invoices.models.coupons_inner import CouponsInner
from ls_zoho_billing_invoices.models.documents_inner import DocumentsInner
from ls_zoho_billing_invoices.models.retrieve_an_invoice_response_invoice_billing_address import RetrieveAnInvoiceResponseInvoiceBillingAddress
from ls_zoho_billing_invoices.models.retrieve_an_invoice_response_invoice_comments_inner import RetrieveAnInvoiceResponseInvoiceCommentsInner
from ls_zoho_billing_invoices.models.retrieve_an_invoice_response_invoice_credits_inner import RetrieveAnInvoiceResponseInvoiceCreditsInner
from ls_zoho_billing_invoices.models.retrieve_an_invoice_response_invoice_custom_fields_inner import RetrieveAnInvoiceResponseInvoiceCustomFieldsInner
from ls_zoho_billing_invoices.models.retrieve_an_invoice_response_invoice_invoice_items_inner import RetrieveAnInvoiceResponseInvoiceInvoiceItemsInner
from ls_zoho_billing_invoices.models.retrieve_an_invoice_response_invoice_payments_inner import RetrieveAnInvoiceResponseInvoicePaymentsInner
from ls_zoho_billing_invoices.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

class RetrieveAnInvoiceResponseInvoice(BaseModel):
    """
    RetrieveAnInvoiceResponseInvoice
    """ # noqa: E501
    invoice_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for an invoice.")
    number: Optional[StrictStr] = Field(default=None, description="Unique invoice number (starts with INV) generated for an invoice which will be used to display in interface and invoices.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the invoice. It can be <code>paid</code>, <code>sent</code>, <code>overdue</code>, <code>partially_paid</code> or <code>void</code>.")
    invoice_date: Optional[StrictStr] = Field(default=None, description="The date on which the invoice is raised.")
    due_date: Optional[StrictStr] = Field(default=None, description="Date on which the invoice is due. If the invoice is not fully paid on or before this date, the status of the invoice will be changed to <code>overdue</code>. If the invoice is only partially paid, its status will be <code>partially_paid</code>.")
    payment_expected_date: Optional[StrictStr] = Field(default=None, description="A date to specify the expected payment date.")
    ach_payment_initiated: Optional[StrictBool] = Field(default=None, description="Set to true if ACH payment is initiated.")
    transaction_type: Optional[StrictStr] = Field(default=None, description="Type of the transaction made.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer to whom the invoice is raised.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer to whom the invoice is raised.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    invoice_items: Optional[List[RetrieveAnInvoiceResponseInvoiceInvoiceItemsInner]] = Field(default=None, description="The list of items which are all included in the invoice. Each item object will have <code>item_id</code>, <code>name</code>, <code>code</code>, <code>price</code>, <code>quantity</code> and <code>item_total</code>. description: Small description about the Invoice item. example: \"Charges for this duration (from 16-April-2016 to 8-June-2016)\"")
    coupons: Optional[List[CouponsInner]] = Field(default=None, description="The array of objects which contains the details of the added coupon. <code>coupon_code</code> and <code>discount_amount</code> are applied to the invoice total.")
    credits: Optional[List[RetrieveAnInvoiceResponseInvoiceCreditsInner]] = None
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount to be paid for the invoice. This would be the sum of individual costs of all items involved in the invoice. Total is determined only after customer credits (if any) are applied.")
    payment_made: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Payments can be made in multiple instalments. payment_made refers to the amount paid for the invoice in the respective instalment.")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice.")
    credits_applied: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Credits applied for the invoice.")
    write_off_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice that is written off.")
    payments: Optional[List[RetrieveAnInvoiceResponseInvoicePaymentsInner]] = Field(default=None, description="List of payment objects. Each object will contain <code>payment_id</code>, <code>payment_mode</code>, <code>invoice_payment_id</code>, <code>gateway_transaction_id</code>, <code>description</code>, <code>date</code>, <code>reference_number</code>, <code>amount</code> and <code>bank_charges</code>.")
    currency_code: Optional[StrictStr] = Field(default=None, description="The customer's currency code.")
    currency_symbol: Optional[StrictStr] = Field(default=None, description="The customer's currency symbol.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time when the invoice was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time when the invoice details were last updated.")
    salesperson_id: Optional[StrictStr] = Field(default=None, description="Unique Id to denote the sales person.")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of the sales person associated with the invoice for offline payments.")
    invoice_url: Optional[StrictStr] = Field(default=None, description="Url which corresponds to the invoice.")
    billing_address: Optional[RetrieveAnInvoiceResponseInvoiceBillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    comments: Optional[List[RetrieveAnInvoiceResponseInvoiceCommentsInner]] = Field(default=None, description="Lists the comments added by the system or by user.")
    custom_fields: Optional[List[RetrieveAnInvoiceResponseInvoiceCustomFieldsInner]] = Field(default=None, description="Additional fields for the invoices.")
    can_send_in_mail: Optional[Any] = Field(default=None, description="Set to true if all the attachments of this invoice can be attached in Invoice Emails.")
    documents: Optional[List[DocumentsInner]] = Field(default=None, description="List of files attached to a particular customer.")
    __properties: ClassVar[List[str]] = ["invoice_id", "number", "status", "invoice_date", "due_date", "payment_expected_date", "ach_payment_initiated", "transaction_type", "customer_id", "customer_name", "email", "invoice_items", "coupons", "credits", "total", "payment_made", "balance", "credits_applied", "write_off_amount", "payments", "currency_code", "currency_symbol", "created_time", "updated_time", "salesperson_id", "salesperson_name", "invoice_url", "billing_address", "shipping_address", "comments", "custom_fields", "can_send_in_mail", "documents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveAnInvoiceResponseInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item_invoice_items in self.invoice_items:
                if _item_invoice_items:
                    _items.append(_item_invoice_items.to_dict())
            _dict['invoice_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coupons (list)
        _items = []
        if self.coupons:
            for _item_coupons in self.coupons:
                if _item_coupons:
                    _items.append(_item_coupons.to_dict())
            _dict['coupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credits (list)
        _items = []
        if self.credits:
            for _item_credits in self.credits:
                if _item_credits:
                    _items.append(_item_credits.to_dict())
            _dict['credits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item_payments in self.payments:
                if _item_payments:
                    _items.append(_item_payments.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item_comments in self.comments:
                if _item_comments:
                    _items.append(_item_comments.to_dict())
            _dict['comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        # set to None if can_send_in_mail (nullable) is None
        # and model_fields_set contains the field
        if self.can_send_in_mail is None and "can_send_in_mail" in self.model_fields_set:
            _dict['can_send_in_mail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveAnInvoiceResponseInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoice_id": obj.get("invoice_id"),
            "number": obj.get("number"),
            "status": obj.get("status"),
            "invoice_date": obj.get("invoice_date"),
            "due_date": obj.get("due_date"),
            "payment_expected_date": obj.get("payment_expected_date"),
            "ach_payment_initiated": obj.get("ach_payment_initiated"),
            "transaction_type": obj.get("transaction_type"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "email": obj.get("email"),
            "invoice_items": [RetrieveAnInvoiceResponseInvoiceInvoiceItemsInner.from_dict(_item) for _item in obj["invoice_items"]] if obj.get("invoice_items") is not None else None,
            "coupons": [CouponsInner.from_dict(_item) for _item in obj["coupons"]] if obj.get("coupons") is not None else None,
            "credits": [RetrieveAnInvoiceResponseInvoiceCreditsInner.from_dict(_item) for _item in obj["credits"]] if obj.get("credits") is not None else None,
            "total": obj.get("total"),
            "payment_made": obj.get("payment_made"),
            "balance": obj.get("balance"),
            "credits_applied": obj.get("credits_applied"),
            "write_off_amount": obj.get("write_off_amount"),
            "payments": [RetrieveAnInvoiceResponseInvoicePaymentsInner.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol"),
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time"),
            "salesperson_id": obj.get("salesperson_id"),
            "salesperson_name": obj.get("salesperson_name"),
            "invoice_url": obj.get("invoice_url"),
            "billing_address": RetrieveAnInvoiceResponseInvoiceBillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "comments": [RetrieveAnInvoiceResponseInvoiceCommentsInner.from_dict(_item) for _item in obj["comments"]] if obj.get("comments") is not None else None,
            "custom_fields": [RetrieveAnInvoiceResponseInvoiceCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "can_send_in_mail": obj.get("can_send_in_mail"),
            "documents": [DocumentsInner.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None
        })
        return _obj



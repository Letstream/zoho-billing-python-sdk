# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_invoices.models.documents_inner import DocumentsInner
from typing import Optional, Set
from typing_extensions import Self

class ListInvoicesResponseInvoicesInner(BaseModel):
    """
    ListInvoicesResponseInvoicesInner
    """ # noqa: E501
    invoice_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for an invoice.")
    ach_payment_initiated: Optional[StrictBool] = Field(default=None, description="Set to true if ACH payment is initiated.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer to whom the invoice is raised.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer to whom the invoice is raised.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the invoice. It can be <code>paid</code>, <code>sent</code>, <code>overdue</code>, <code>partially_paid</code> or <code>void</code>.")
    invoice_number: Optional[StrictStr] = Field(default=None, description="Unique ID (starts with INV) of an invoice.")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number of the invoice for which payment is made.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on which the invoice is paid.", alias="date")
    due_date: Optional[StrictStr] = Field(default=None, description="Date on which the invoice is due. If the invoice is not fully paid on or before this date, the status of the invoice will be changed to <code>overdue</code>. If the invoice is only partially paid, its status will be <code>partially_paid</code>.")
    due_days: Optional[StrictStr] = Field(default=None, description="Specifies the number of day in which the invoice would become overdue")
    currency_id: Optional[StrictStr] = Field(default=None, description="The currenct id of the currency")
    schedule_time: Optional[StrictStr] = Field(default=None, description="Schedule time for payment")
    currency_code: Optional[StrictStr] = Field(default=None, description="The customer's currency code.")
    is_viewed_by_client: Optional[StrictBool] = Field(default=None, description="Check if invoice is viewed by client")
    has_attachment: Optional[Any] = Field(default=None, description="Denotes whether a customer has any attachments associated with it.")
    client_viewed_time: Optional[StrictStr] = Field(default=None, description="Time when client viewed the statement")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount to be paid for the invoice. This would be the sum of individual costs of all items involved in the invoice. Total is determined only after customer credits (if any) are applied.")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time when the invoice was created.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Date of last modification of the invoice")
    is_emailed: Optional[StrictBool] = Field(default=None, description="Boolean check to see if the mail has been sent")
    reminders_sent: Optional[StrictInt] = Field(default=None, description="The number of reminders sent")
    last_reminder_sent_date: Optional[StrictStr] = Field(default=None, description="The date the last email was sent")
    payment_expected_date: Optional[StrictStr] = Field(default=None, description="A date to specify the expected payment date.")
    last_payment_date: Optional[StrictStr] = Field(default=None, description="The last payment date of the invoice")
    custom_fields: Optional[List[StrictStr]] = Field(default=None, description="Additional fields for the invoices.")
    documents: Optional[List[DocumentsInner]] = Field(default=None, description="List of files attached to a particular customer.")
    salesperson_id: Optional[StrictStr] = Field(default=None, description="Unique Id to denote the sales person.")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of the sales person associated with the invoice for offline payments.")
    shipping_charge: Optional[StrictStr] = Field(default=None, description="Shipping charges applied to the invoice. <code>Maximum length [100]</code>")
    adjustment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Adjustments made to the invoice.")
    write_off_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice that is written off.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Exchange-Rate for the currency.")
    __properties: ClassVar[List[str]] = ["invoice_id", "ach_payment_initiated", "customer_name", "customer_id", "status", "invoice_number", "reference_number", "date", "due_date", "due_days", "currency_id", "schedule_time", "currency_code", "is_viewed_by_client", "has_attachment", "client_viewed_time", "total", "balance", "created_time", "last_modified_time", "is_emailed", "reminders_sent", "last_reminder_sent_date", "payment_expected_date", "last_payment_date", "custom_fields", "documents", "salesperson_id", "salesperson_name", "shipping_charge", "adjustment", "write_off_amount", "exchange_rate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListInvoicesResponseInvoicesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        # set to None if has_attachment (nullable) is None
        # and model_fields_set contains the field
        if self.has_attachment is None and "has_attachment" in self.model_fields_set:
            _dict['has_attachment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListInvoicesResponseInvoicesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoice_id": obj.get("invoice_id"),
            "ach_payment_initiated": obj.get("ach_payment_initiated"),
            "customer_name": obj.get("customer_name"),
            "customer_id": obj.get("customer_id"),
            "status": obj.get("status"),
            "invoice_number": obj.get("invoice_number"),
            "reference_number": obj.get("reference_number"),
            "date": obj.get("date"),
            "due_date": obj.get("due_date"),
            "due_days": obj.get("due_days"),
            "currency_id": obj.get("currency_id"),
            "schedule_time": obj.get("schedule_time"),
            "currency_code": obj.get("currency_code"),
            "is_viewed_by_client": obj.get("is_viewed_by_client"),
            "has_attachment": obj.get("has_attachment"),
            "client_viewed_time": obj.get("client_viewed_time"),
            "total": obj.get("total"),
            "balance": obj.get("balance"),
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "is_emailed": obj.get("is_emailed"),
            "reminders_sent": obj.get("reminders_sent"),
            "last_reminder_sent_date": obj.get("last_reminder_sent_date"),
            "payment_expected_date": obj.get("payment_expected_date"),
            "last_payment_date": obj.get("last_payment_date"),
            "custom_fields": obj.get("custom_fields"),
            "documents": [DocumentsInner.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "salesperson_id": obj.get("salesperson_id"),
            "salesperson_name": obj.get("salesperson_name"),
            "shipping_charge": obj.get("shipping_charge"),
            "adjustment": obj.get("adjustment"),
            "write_off_amount": obj.get("write_off_amount"),
            "exchange_rate": obj.get("exchange_rate")
        })
        return _obj



# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_invoices.models.collect_charge_via_bank_account_credit_card_response_payment_autotransaction import CollectChargeViaBankAccountCreditCardResponsePaymentAutotransaction
from ls_zoho_billing_invoices.models.collect_charge_via_bank_account_credit_card_response_payment_custom_fields_inner import CollectChargeViaBankAccountCreditCardResponsePaymentCustomFieldsInner
from ls_zoho_billing_invoices.models.collect_charge_via_bank_account_credit_card_response_payment_invoices_inner import CollectChargeViaBankAccountCreditCardResponsePaymentInvoicesInner
from typing import Optional, Set
from typing_extensions import Self

class CollectChargeViaBankAccountCreditCardResponsePayment(BaseModel):
    """
    CollectChargeViaBankAccountCreditCardResponsePayment
    """ # noqa: E501
    payment_id: Optional[StrictStr] = Field(default=None, description="The payment ID of the payment made for the invoice.")
    payment_mode: Optional[StrictStr] = Field(default=None, description="The mode in which payment is made for the invoice. This can be <code>check</code>, <code>cash</code>, <code>creditcard</code>, <code>banktransfer</code>, <code>bankremittance</code>, <code>autotransaction</code> or <code>others</code>.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount paid for the invoice.")
    amount_refunded: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount that is refund. Refunds are applicable only for payments whose payment_mode is <code>autotransaction</code>. Refunds would be made to the respective card provided by the customer.")
    bank_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Denotes any additional bank charges.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on which the invoice is paid.", alias="date")
    status: Optional[StrictStr] = Field(default=None, description="Status of the invoice. It can be <code>paid</code>, <code>sent</code>, <code>overdue</code>, <code>partially_paid</code> or <code>void</code>.")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number of the invoice for which payment is made.")
    due_date: Optional[StrictStr] = Field(default=None, description="Date on which the invoice is due. If the invoice is not fully paid on or before this date, the status of the invoice will be changed to <code>overdue</code>. If the invoice is only partially paid, its status will be <code>partially_paid</code>.")
    amount_due: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Balance amount that is due for the invoice.")
    description: Optional[StrictStr] = Field(default=None, description="Small description of the payment made for the invoice.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer to whom the invoice is raised.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer to whom the invoice is raised.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    autotransaction: Optional[CollectChargeViaBankAccountCreditCardResponsePaymentAutotransaction] = None
    invoices: Optional[List[CollectChargeViaBankAccountCreditCardResponsePaymentInvoicesInner]] = Field(default=None, description="List of invoices associated with the payment. Each invoice object contains <code>invoice_id</code>, <code>invoice_number</code>, <code>date</code>, <code>invoice_amount</code>, <code>amount_applied</code> and <code>balance_amount</code>.")
    currency_code: Optional[StrictStr] = Field(default=None, description="The customer's currency code.")
    currency_symbol: Optional[StrictStr] = Field(default=None, description="The customer's currency symbol.")
    custom_fields: Optional[List[CollectChargeViaBankAccountCreditCardResponsePaymentCustomFieldsInner]] = Field(default=None, description="Additional fields for the invoices.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time when the invoice was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time when the invoice details were last updated.")
    __properties: ClassVar[List[str]] = ["payment_id", "payment_mode", "amount", "amount_refunded", "bank_charges", "date", "status", "reference_number", "due_date", "amount_due", "description", "customer_id", "customer_name", "email", "autotransaction", "invoices", "currency_code", "currency_symbol", "custom_fields", "created_time", "updated_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectChargeViaBankAccountCreditCardResponsePayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autotransaction
        if self.autotransaction:
            _dict['autotransaction'] = self.autotransaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item_invoices in self.invoices:
                if _item_invoices:
                    _items.append(_item_invoices.to_dict())
            _dict['invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectChargeViaBankAccountCreditCardResponsePayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_id": obj.get("payment_id"),
            "payment_mode": obj.get("payment_mode"),
            "amount": obj.get("amount"),
            "amount_refunded": obj.get("amount_refunded"),
            "bank_charges": obj.get("bank_charges"),
            "date": obj.get("date"),
            "status": obj.get("status"),
            "reference_number": obj.get("reference_number"),
            "due_date": obj.get("due_date"),
            "amount_due": obj.get("amount_due"),
            "description": obj.get("description"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "email": obj.get("email"),
            "autotransaction": CollectChargeViaBankAccountCreditCardResponsePaymentAutotransaction.from_dict(obj["autotransaction"]) if obj.get("autotransaction") is not None else None,
            "invoices": [CollectChargeViaBankAccountCreditCardResponsePaymentInvoicesInner.from_dict(_item) for _item in obj["invoices"]] if obj.get("invoices") is not None else None,
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol"),
            "custom_fields": [CollectChargeViaBankAccountCreditCardResponsePaymentCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time")
        })
        return _obj



# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_invoices.models.billing_address import BillingAddress
from ls_zoho_billing_invoices.models.contact_persons_inner import ContactPersonsInner
from ls_zoho_billing_invoices.models.get_an_invoice_response_invoice_line_items_inner import GetAnInvoiceResponseInvoiceLineItemsInner
from ls_zoho_billing_invoices.models.payment_options import PaymentOptions
from ls_zoho_billing_invoices.models.shipping_address import ShippingAddress
from ls_zoho_billing_invoices.models.taxes_inner import TaxesInner
from typing import Optional, Set
from typing_extensions import Self

class GetAnInvoiceResponseInvoice(BaseModel):
    """
    GetAnInvoiceResponseInvoice
    """ # noqa: E501
    invoice_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for an invoice.")
    ach_payment_initiated: Optional[StrictBool] = Field(default=None, description="Set to true if ACH payment is initiated.")
    invoice_number: Optional[StrictStr] = Field(default=None, description="Unique ID (starts with INV) of an invoice.")
    is_pre_gst: Optional[StrictBool] = Field(default=None, description="Applicable for transactions that fall before july 1, 2017")
    place_of_supply: Optional[StrictStr] = Field(default=None, description="Place where the goods/services are supplied to. (If not given, <code>place of contact</code> given for the contact will be taken)")
    gst_no: Optional[StrictStr] = Field(default=None, description="15 digit GST identification number of the customer.")
    gst_treatment: Optional[StrictStr] = Field(default=None, description="Choose whether the contact is GST registered/unregistered/consumer/overseas. Allowed values are <code> business_gst </code> , <code> business_none </code> , <code> overseas </code> , <code> consumer </code>.")
    tax_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment for the Estimate.Allowed Values:</br><code>home_country_mexico</code>,<code>border_region_mexico</code>,<code>non_mexico</code> supported only for <b>MX</b>.")
    cfdi_usage: Optional[StrictStr] = Field(default=None, description="Choose CFDI Usage. Allowed values:</br><code>acquisition_of_merchandise</code>, <code>return_discount_bonus</code>, <code>general_expense</code>, <code>buildings</code>, <code>furniture_office_equipment</code>, <code>transport_equipment</code>, <code>computer_equipmentdye_molds_tools</code>, <code>telephone_communication</code>, <code>satellite_communication</code>, <code>other_machinery_equipment</code>, <code>hospital_expense</code>, <code>medical_expense_disability</code>, <code>funeral_expense</code>, <code>donation</code>, <code>interest_mortage_loans</code>, <code>contribution_sar</code>, <code>medical_expense_insurance_pormium</code>, <code>school_transportation_expense</code>, <code>deposit_saving_account</code>, <code>payment_educational_service</code>, <code>no_tax_effect</code>, <code>payment</code>, <code>payroll</code>.")
    vat_treatment: Optional[StrictStr] = Field(default=None, description="(Optional) VAT treatment for the invoices. VAT treatment denotes the location of the customer, if the customer resides in UK then the VAT treatment is <code>uk</code>. If the customer is in an EU country & VAT registered, you are resides in Northen Ireland and selling Goods then his VAT treatment is <code>eu_vat_registered</code>, if he resides outside of the UK then his VAT treatment is <code>overseas</code> (For Pre Brexit, this can be split as <code>eu_vat_registered</code>, <code>eu_vat_not_registered</code> and <code>non_eu</code>).")
    vat_reg_no: Optional[StrictStr] = Field(default=None, description="Enter VAT registration number.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on which the invoice is paid.", alias="date")
    status: Optional[StrictStr] = Field(default=None, description="Status of the invoice. It can be <code>paid</code>, <code>sent</code>, <code>overdue</code>, <code>partially_paid</code> or <code>void</code>.")
    payment_terms: Optional[StrictInt] = Field(default=None, description="Payment terms in days e.g. 15, 30, 60. Invoice due date will be calculated based on this. <code>Maximum length [100]</code>")
    payment_terms_label: Optional[StrictStr] = Field(default=None, description="Used to override the default payment terms label. Default value for 15 days is \"Net 15 Days\". <code>Maximum length [100]</code>")
    due_date: Optional[StrictStr] = Field(default=None, description="Date on which the invoice is due. If the invoice is not fully paid on or before this date, the status of the invoice will be changed to <code>overdue</code>. If the invoice is only partially paid, its status will be <code>partially_paid</code>.")
    payment_expected_date: Optional[StrictStr] = Field(default=None, description="A date to specify the expected payment date.")
    last_payment_date: Optional[StrictStr] = Field(default=None, description="The last payment date of the invoice")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number of the invoice for which payment is made.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer to whom the invoice is raised.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer to whom the invoice is raised.")
    contact_persons: Optional[List[ContactPersonsInner]] = Field(default=None, description="The IDs of the contact person associated with the contact.")
    currency_id: Optional[StrictStr] = Field(default=None, description="The currenct id of the currency")
    currency_code: Optional[StrictStr] = Field(default=None, description="The customer's currency code.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Exchange-Rate for the currency.")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discount applied to the invoice. It can be either in % or in amount. e.g. 12.5% or 190. <code>Maximum length [100]</code>")
    is_discount_before_tax: Optional[StrictBool] = Field(default=None, description="Check if discount is exclusive of tax")
    discount_type: Optional[StrictStr] = Field(default=None, description="Type of discount. Allowed values: <code>entity_level</code> and <code>item_level</code>.")
    is_inclusive_tax: Optional[StrictBool] = Field(default=None, description="To check if discount is inclusive of tax")
    is_viewed_by_client: Optional[StrictBool] = Field(default=None, description="Check if invoice is viewed by client")
    has_attachment: Optional[Any] = Field(default=None, description="Denotes whether a customer has any attachments associated with it.")
    client_viewed_time: Optional[StrictStr] = Field(default=None, description="Time when client viewed the statement")
    line_items: Optional[List[GetAnInvoiceResponseInvoiceLineItemsInner]] = Field(default=None, description="Items listed in invoice")
    shipping_charge: Optional[StrictStr] = Field(default=None, description="Shipping charges applied to the invoice. <code>Maximum length [100]</code>")
    adjustment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Adjustments made to the invoice.")
    adjustment_description: Optional[StrictStr] = Field(default=None, description="Customize the adjustment description. E.g. Rounding off.")
    sub_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The sub total of the all items")
    tax_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of the tax levied")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount to be paid for the invoice. This would be the sum of individual costs of all items involved in the invoice. Total is determined only after customer credits (if any) are applied.")
    taxes: Optional[List[TaxesInner]] = Field(default=None, description="List of the taxes levied")
    payment_reminder_enabled: Optional[StrictBool] = Field(default=None, description="Boolean to check if reminders have been enabled")
    payment_made: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Payments can be made in multiple instalments. payment_made refers to the amount paid for the invoice in the respective instalment.")
    credits_applied: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Credits applied for the invoice.")
    tax_amount_withheld: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The tax amount which has been withheld")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice.")
    write_off_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice that is written off.")
    allow_partial_payments: Optional[StrictBool] = Field(default=None, description="Boolean to check if partial payments are allowed for the contact")
    price_precision: Optional[StrictInt] = Field(default=None, description="The precision value on the price")
    payment_options: Optional[PaymentOptions] = None
    is_emailed: Optional[StrictBool] = Field(default=None, description="Boolean check to see if the mail has been sent")
    reminders_sent: Optional[StrictInt] = Field(default=None, description="The number of reminders sent")
    last_reminder_sent_date: Optional[StrictStr] = Field(default=None, description="The date the last email was sent")
    billing_address: Optional[BillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    notes: Optional[StrictStr] = Field(default=None, description="The notes added below expressing gratitude or for conveying some information.")
    terms: Optional[StrictStr] = Field(default=None, description="The terms added below expressing gratitude or for conveying some information.")
    custom_fields: Optional[List[StrictStr]] = Field(default=None, description="Additional fields for the invoices.")
    template_id: Optional[StrictStr] = Field(default=None, description="ID of the pdf template associated with the invoice.")
    template_name: Optional[StrictStr] = Field(default=None, description="Name of the invoice template used")
    created_time: Optional[StrictStr] = Field(default=None, description="Time when the invoice was created.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Date of last modification of the invoice")
    attachment_name: Optional[StrictStr] = Field(default=None, description="Name of the file attached")
    can_send_in_mail: Optional[Any] = Field(default=None, description="Set to true if all the attachments of this invoice can be attached in Invoice Emails.")
    salesperson_id: Optional[StrictStr] = Field(default=None, description="Unique Id to denote the sales person.")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of the sales person associated with the invoice for offline payments.")
    invoice_url: Optional[StrictStr] = Field(default=None, description="Url which corresponds to the invoice.")
    __properties: ClassVar[List[str]] = ["invoice_id", "ach_payment_initiated", "invoice_number", "is_pre_gst", "place_of_supply", "gst_no", "gst_treatment", "tax_treatment", "cfdi_usage", "vat_treatment", "vat_reg_no", "date", "status", "payment_terms", "payment_terms_label", "due_date", "payment_expected_date", "last_payment_date", "reference_number", "customer_id", "customer_name", "contact_persons", "currency_id", "currency_code", "exchange_rate", "discount", "is_discount_before_tax", "discount_type", "is_inclusive_tax", "is_viewed_by_client", "has_attachment", "client_viewed_time", "line_items", "shipping_charge", "adjustment", "adjustment_description", "sub_total", "tax_total", "total", "taxes", "payment_reminder_enabled", "payment_made", "credits_applied", "tax_amount_withheld", "balance", "write_off_amount", "allow_partial_payments", "price_precision", "payment_options", "is_emailed", "reminders_sent", "last_reminder_sent_date", "billing_address", "shipping_address", "notes", "terms", "custom_fields", "template_id", "template_name", "created_time", "last_modified_time", "attachment_name", "can_send_in_mail", "salesperson_id", "salesperson_name", "invoice_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAnInvoiceResponseInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contact_persons (list)
        _items = []
        if self.contact_persons:
            for _item_contact_persons in self.contact_persons:
                if _item_contact_persons:
                    _items.append(_item_contact_persons.to_dict())
            _dict['contact_persons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taxes (list)
        _items = []
        if self.taxes:
            for _item_taxes in self.taxes:
                if _item_taxes:
                    _items.append(_item_taxes.to_dict())
            _dict['taxes'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment_options
        if self.payment_options:
            _dict['payment_options'] = self.payment_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # set to None if has_attachment (nullable) is None
        # and model_fields_set contains the field
        if self.has_attachment is None and "has_attachment" in self.model_fields_set:
            _dict['has_attachment'] = None

        # set to None if can_send_in_mail (nullable) is None
        # and model_fields_set contains the field
        if self.can_send_in_mail is None and "can_send_in_mail" in self.model_fields_set:
            _dict['can_send_in_mail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAnInvoiceResponseInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoice_id": obj.get("invoice_id"),
            "ach_payment_initiated": obj.get("ach_payment_initiated"),
            "invoice_number": obj.get("invoice_number"),
            "is_pre_gst": obj.get("is_pre_gst"),
            "place_of_supply": obj.get("place_of_supply"),
            "gst_no": obj.get("gst_no"),
            "gst_treatment": obj.get("gst_treatment"),
            "tax_treatment": obj.get("tax_treatment"),
            "cfdi_usage": obj.get("cfdi_usage"),
            "vat_treatment": obj.get("vat_treatment"),
            "vat_reg_no": obj.get("vat_reg_no"),
            "date": obj.get("date"),
            "status": obj.get("status"),
            "payment_terms": obj.get("payment_terms"),
            "payment_terms_label": obj.get("payment_terms_label"),
            "due_date": obj.get("due_date"),
            "payment_expected_date": obj.get("payment_expected_date"),
            "last_payment_date": obj.get("last_payment_date"),
            "reference_number": obj.get("reference_number"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "contact_persons": [ContactPersonsInner.from_dict(_item) for _item in obj["contact_persons"]] if obj.get("contact_persons") is not None else None,
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "exchange_rate": obj.get("exchange_rate"),
            "discount": obj.get("discount"),
            "is_discount_before_tax": obj.get("is_discount_before_tax"),
            "discount_type": obj.get("discount_type"),
            "is_inclusive_tax": obj.get("is_inclusive_tax"),
            "is_viewed_by_client": obj.get("is_viewed_by_client"),
            "has_attachment": obj.get("has_attachment"),
            "client_viewed_time": obj.get("client_viewed_time"),
            "line_items": [GetAnInvoiceResponseInvoiceLineItemsInner.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "shipping_charge": obj.get("shipping_charge"),
            "adjustment": obj.get("adjustment"),
            "adjustment_description": obj.get("adjustment_description"),
            "sub_total": obj.get("sub_total"),
            "tax_total": obj.get("tax_total"),
            "total": obj.get("total"),
            "taxes": [TaxesInner.from_dict(_item) for _item in obj["taxes"]] if obj.get("taxes") is not None else None,
            "payment_reminder_enabled": obj.get("payment_reminder_enabled"),
            "payment_made": obj.get("payment_made"),
            "credits_applied": obj.get("credits_applied"),
            "tax_amount_withheld": obj.get("tax_amount_withheld"),
            "balance": obj.get("balance"),
            "write_off_amount": obj.get("write_off_amount"),
            "allow_partial_payments": obj.get("allow_partial_payments"),
            "price_precision": obj.get("price_precision"),
            "payment_options": PaymentOptions.from_dict(obj["payment_options"]) if obj.get("payment_options") is not None else None,
            "is_emailed": obj.get("is_emailed"),
            "reminders_sent": obj.get("reminders_sent"),
            "last_reminder_sent_date": obj.get("last_reminder_sent_date"),
            "billing_address": BillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "notes": obj.get("notes"),
            "terms": obj.get("terms"),
            "custom_fields": obj.get("custom_fields"),
            "template_id": obj.get("template_id"),
            "template_name": obj.get("template_name"),
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "attachment_name": obj.get("attachment_name"),
            "can_send_in_mail": obj.get("can_send_in_mail"),
            "salesperson_id": obj.get("salesperson_id"),
            "salesperson_name": obj.get("salesperson_name"),
            "invoice_url": obj.get("invoice_url")
        })
        return _obj



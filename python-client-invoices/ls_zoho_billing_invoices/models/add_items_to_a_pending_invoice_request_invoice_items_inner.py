# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AddItemsToAPendingInvoiceRequestInvoiceItemsInner(BaseModel):
    """
    AddItemsToAPendingInvoiceRequestInvoiceItemsInner
    """ # noqa: E501
    code: Optional[Any] = Field(default=None, description="Addon code of the addon.")
    product_id: Optional[Any] = Field(default=None, description="Product ID of the product to which the addon is associated with.")
    name: Optional[Any] = Field(default=None, description="Name for the item.")
    description: Optional[Any] = Field(default=None, description="Description for the item.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of the item.")
    quantity: Optional[StrictInt] = Field(default=None, description="Required quantity of the chosen item.")
    tax_id: Optional[Any] = Field(default=None, description="Unique ID of Tax or Tax Group that must be associated with the item.")
    tax_exemption_id: Optional[Any] = Field(default=None, description="Unique Tax Exemption ID if you dont want to associate a tax to the plan.")
    __properties: ClassVar[List[str]] = ["code", "product_id", "name", "description", "price", "quantity", "tax_id", "tax_exemption_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddItemsToAPendingInvoiceRequestInvoiceItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['product_id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_id is None and "tax_id" in self.model_fields_set:
            _dict['tax_id'] = None

        # set to None if tax_exemption_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_exemption_id is None and "tax_exemption_id" in self.model_fields_set:
            _dict['tax_exemption_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddItemsToAPendingInvoiceRequestInvoiceItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "product_id": obj.get("product_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "price": obj.get("price"),
            "quantity": obj.get("quantity"),
            "tax_id": obj.get("tax_id"),
            "tax_exemption_id": obj.get("tax_exemption_id")
        })
        return _obj



# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CollectChargeViaBankAccountCreditCardResponsePaymentAutotransaction(BaseModel):
    """
    If the payment mode is <code>autotransaction</code>, autotransaction information will be displayed in the autotransaction object. It contains <code>autotransaction_id</code>, <code>payment_gateway</code>, <code>gateway_transaction_id</code>, <code>card_id</code>, <code>last_four_digits</code>, <code>expiry_month</code> and <code>expiry_year</code>.
    """ # noqa: E501
    autotransaction_id: Optional[StrictStr] = Field(default=None, description="Auto-transaction ID generated for the payment made.")
    payment_gateway: Optional[StrictStr] = Field(default=None, description="Name of the payment gateway associated with payment.")
    gateway_transaction_id: Optional[StrictStr] = Field(default=None, description="Gateway transaction ID provided for the payment made to the invoice. This is applicable only if <code>payment_mode</code> is autotransaction.")
    gateway_error_message: Optional[StrictStr] = Field(default=None, description="Gateway error message for a failed transaction.")
    account_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the bank account. If you are collecting charge via credit card, use <code>card_id</code> (Card ID of the card associated with the transaction)")
    __properties: ClassVar[List[str]] = ["autotransaction_id", "payment_gateway", "gateway_transaction_id", "gateway_error_message", "account_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectChargeViaBankAccountCreditCardResponsePaymentAutotransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectChargeViaBankAccountCreditCardResponsePaymentAutotransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autotransaction_id": obj.get("autotransaction_id"),
            "payment_gateway": obj.get("payment_gateway"),
            "gateway_transaction_id": obj.get("gateway_transaction_id"),
            "gateway_error_message": obj.get("gateway_error_message"),
            "account_id": obj.get("account_id")
        })
        return _obj



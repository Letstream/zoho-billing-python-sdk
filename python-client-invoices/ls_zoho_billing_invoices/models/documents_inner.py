# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DocumentsInner(BaseModel):
    """
    DocumentsInner
    """ # noqa: E501
    file_name: Optional[Any] = Field(default=None, description="Name of the attached file.")
    file_type: Optional[Any] = Field(default=None, description="Type of the attached file.")
    file_size: Optional[Any] = None
    file_size_formatted: Optional[Any] = None
    document_id: Optional[Any] = Field(default=None, description="Unique ID of the attached file.")
    attachment_order: Optional[Any] = Field(default=None, description="Order of the attached file for a particular customer.")
    __properties: ClassVar[List[str]] = ["file_name", "file_type", "file_size", "file_size_formatted", "document_id", "attachment_order"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict['file_name'] = None

        # set to None if file_type (nullable) is None
        # and model_fields_set contains the field
        if self.file_type is None and "file_type" in self.model_fields_set:
            _dict['file_type'] = None

        # set to None if file_size (nullable) is None
        # and model_fields_set contains the field
        if self.file_size is None and "file_size" in self.model_fields_set:
            _dict['file_size'] = None

        # set to None if file_size_formatted (nullable) is None
        # and model_fields_set contains the field
        if self.file_size_formatted is None and "file_size_formatted" in self.model_fields_set:
            _dict['file_size_formatted'] = None

        # set to None if document_id (nullable) is None
        # and model_fields_set contains the field
        if self.document_id is None and "document_id" in self.model_fields_set:
            _dict['document_id'] = None

        # set to None if attachment_order (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_order is None and "attachment_order" in self.model_fields_set:
            _dict['attachment_order'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "file_name": obj.get("file_name"),
            "file_type": obj.get("file_type"),
            "file_size": obj.get("file_size"),
            "file_size_formatted": obj.get("file_size_formatted"),
            "document_id": obj.get("document_id"),
            "attachment_order": obj.get("attachment_order")
        })
        return _obj



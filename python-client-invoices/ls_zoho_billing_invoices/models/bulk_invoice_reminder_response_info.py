# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from ls_zoho_billing_invoices.models.bulk_invoice_reminder_response_info_email_errors_info_inner import BulkInvoiceReminderResponseInfoEmailErrorsInfoInner
from ls_zoho_billing_invoices.models.bulk_invoice_reminder_response_info_email_success_info import BulkInvoiceReminderResponseInfoEmailSuccessInfo
from typing import Optional, Set
from typing_extensions import Self

class BulkInvoiceReminderResponseInfo(BaseModel):
    """
    BulkInvoiceReminderResponseInfo
    """ # noqa: E501
    email_success_info: Optional[BulkInvoiceReminderResponseInfoEmailSuccessInfo] = None
    email_errors_info: Optional[List[BulkInvoiceReminderResponseInfoEmailErrorsInfoInner]] = Field(default=None, description="error info")
    code: Optional[StrictInt] = Field(default=None, description="Code")
    __properties: ClassVar[List[str]] = ["email_success_info", "email_errors_info", "code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkInvoiceReminderResponseInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_success_info
        if self.email_success_info:
            _dict['email_success_info'] = self.email_success_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in email_errors_info (list)
        _items = []
        if self.email_errors_info:
            for _item_email_errors_info in self.email_errors_info:
                if _item_email_errors_info:
                    _items.append(_item_email_errors_info.to_dict())
            _dict['email_errors_info'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkInvoiceReminderResponseInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email_success_info": BulkInvoiceReminderResponseInfoEmailSuccessInfo.from_dict(obj["email_success_info"]) if obj.get("email_success_info") is not None else None,
            "email_errors_info": [BulkInvoiceReminderResponseInfoEmailErrorsInfoInner.from_dict(_item) for _item in obj["email_errors_info"]] if obj.get("email_errors_info") is not None else None,
            "code": obj.get("code")
        })
        return _obj



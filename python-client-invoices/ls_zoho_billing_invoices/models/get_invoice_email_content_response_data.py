# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ls_zoho_billing_invoices.models.documents_inner import DocumentsInner
from ls_zoho_billing_invoices.models.get_invoice_email_content_response_data_cc_mails_list_inner import GetInvoiceEmailContentResponseDataCcMailsListInner
from ls_zoho_billing_invoices.models.get_invoice_email_content_response_data_emailtemplates_inner import GetInvoiceEmailContentResponseDataEmailtemplatesInner
from ls_zoho_billing_invoices.models.get_invoice_email_content_response_data_from_emails_inner import GetInvoiceEmailContentResponseDataFromEmailsInner
from ls_zoho_billing_invoices.models.get_invoice_email_content_response_data_to_contacts_inner import GetInvoiceEmailContentResponseDataToContactsInner
from typing import Optional, Set
from typing_extensions import Self

class GetInvoiceEmailContentResponseData(BaseModel):
    """
    content of the emails
    """ # noqa: E501
    bcc_mails: Optional[List[StrictStr]] = Field(default=None, description="Bcc mail details")
    gateways_configured: Optional[StrictBool] = Field(default=None, description="List of payment gateways configured")
    gateways_associated: Optional[StrictBool] = Field(default=None, description="List of Payment gateways associated")
    bcc_mails_str: Optional[StrictStr] = Field(default=None, description="Bcc mails content")
    body: Optional[StrictStr] = Field(default=None, description="The body of the email.")
    documents: Optional[List[DocumentsInner]] = Field(default=None, description="List of files attached to a particular customer.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer to whom the invoice is raised.")
    attach_pdf: Optional[StrictBool] = Field(default=None, description="check if PDF attachment")
    entity_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the entity associated")
    cc_mails_list: Optional[List[GetInvoiceEmailContentResponseDataCcMailsListInner]] = Field(default=None, description="recepients of the mail who are CC'd")
    file_name_without_extension: Optional[StrictStr] = Field(default=None, description="Name of file included")
    to_mails_str: Optional[StrictStr] = Field(default=None, description="Mail recepients")
    cc_mails_str: Optional[StrictStr] = Field(default=None, description="Mail recepients who need to be CC'd")
    from_email: Optional[StrictStr] = Field(default=None, description="Mail sender")
    from_address: Optional[StrictStr] = Field(default=None, description="Sender's email address")
    deprecated_placeholders_used: Optional[List[StrictStr]] = Field(default=None, description="List of placeholders used in invoice")
    error_list: Optional[List[StrictStr]] = Field(default=None, description="Error List")
    subject: Optional[StrictStr] = Field(default=None, description="The subject of the email.")
    emailtemplates: Optional[List[GetInvoiceEmailContentResponseDataEmailtemplatesInner]] = Field(default=None, description="Templates used to mail")
    emailtemplate_documents: Optional[List[StrictStr]] = Field(default=None, description="Email templates used")
    to_contacts: Optional[List[GetInvoiceEmailContentResponseDataToContactsInner]] = Field(default=None, description="Recepients of the mail")
    attachment_name: Optional[StrictStr] = Field(default=None, description="Name of the file attached")
    file_name: Optional[Any] = Field(default=None, description="Name of the attached file.")
    from_emails: Optional[List[GetInvoiceEmailContentResponseDataFromEmailsInner]] = Field(default=None, description="Sender's email address")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer to whom the invoice is raised.")
    __properties: ClassVar[List[str]] = ["bcc_mails", "gateways_configured", "gateways_associated", "bcc_mails_str", "body", "documents", "customer_name", "attach_pdf", "entity_id", "cc_mails_list", "file_name_without_extension", "to_mails_str", "cc_mails_str", "from_email", "from_address", "deprecated_placeholders_used", "error_list", "subject", "emailtemplates", "emailtemplate_documents", "to_contacts", "attachment_name", "file_name", "from_emails", "customer_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetInvoiceEmailContentResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cc_mails_list (list)
        _items = []
        if self.cc_mails_list:
            for _item_cc_mails_list in self.cc_mails_list:
                if _item_cc_mails_list:
                    _items.append(_item_cc_mails_list.to_dict())
            _dict['cc_mails_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in emailtemplates (list)
        _items = []
        if self.emailtemplates:
            for _item_emailtemplates in self.emailtemplates:
                if _item_emailtemplates:
                    _items.append(_item_emailtemplates.to_dict())
            _dict['emailtemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in to_contacts (list)
        _items = []
        if self.to_contacts:
            for _item_to_contacts in self.to_contacts:
                if _item_to_contacts:
                    _items.append(_item_to_contacts.to_dict())
            _dict['to_contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in from_emails (list)
        _items = []
        if self.from_emails:
            for _item_from_emails in self.from_emails:
                if _item_from_emails:
                    _items.append(_item_from_emails.to_dict())
            _dict['from_emails'] = _items
        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict['file_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetInvoiceEmailContentResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bcc_mails": obj.get("bcc_mails"),
            "gateways_configured": obj.get("gateways_configured"),
            "gateways_associated": obj.get("gateways_associated"),
            "bcc_mails_str": obj.get("bcc_mails_str"),
            "body": obj.get("body"),
            "documents": [DocumentsInner.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "customer_name": obj.get("customer_name"),
            "attach_pdf": obj.get("attach_pdf"),
            "entity_id": obj.get("entity_id"),
            "cc_mails_list": [GetInvoiceEmailContentResponseDataCcMailsListInner.from_dict(_item) for _item in obj["cc_mails_list"]] if obj.get("cc_mails_list") is not None else None,
            "file_name_without_extension": obj.get("file_name_without_extension"),
            "to_mails_str": obj.get("to_mails_str"),
            "cc_mails_str": obj.get("cc_mails_str"),
            "from_email": obj.get("from_email"),
            "from_address": obj.get("from_address"),
            "deprecated_placeholders_used": obj.get("deprecated_placeholders_used"),
            "error_list": obj.get("error_list"),
            "subject": obj.get("subject"),
            "emailtemplates": [GetInvoiceEmailContentResponseDataEmailtemplatesInner.from_dict(_item) for _item in obj["emailtemplates"]] if obj.get("emailtemplates") is not None else None,
            "emailtemplate_documents": obj.get("emailtemplate_documents"),
            "to_contacts": [GetInvoiceEmailContentResponseDataToContactsInner.from_dict(_item) for _item in obj["to_contacts"]] if obj.get("to_contacts") is not None else None,
            "attachment_name": obj.get("attachment_name"),
            "file_name": obj.get("file_name"),
            "from_emails": [GetInvoiceEmailContentResponseDataFromEmailsInner.from_dict(_item) for _item in obj["from_emails"]] if obj.get("from_emails") is not None else None,
            "customer_id": obj.get("customer_id")
        })
        return _obj



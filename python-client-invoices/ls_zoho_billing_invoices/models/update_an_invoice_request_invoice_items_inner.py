# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UpdateAnInvoiceRequestInvoiceItemsInner(BaseModel):
    """
    UpdateAnInvoiceRequestInvoiceItemsInner
    """ # noqa: E501
    product_id: StrictStr = Field(description="The ID of the item included in the invoice.")
    project_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the projet associated to an invoice")
    time_entry_ids: Optional[List[StrictStr]] = Field(default=None, description="Unique ID's of all the time entries associated to the linked project")
    expense_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the expenses associated")
    name: Optional[StrictStr] = Field(default=None, description="Name of the item included in the invoice.")
    product_type: Optional[StrictStr] = Field(default=None, description="Product type for UK Edition.")
    hsn_or_sac: Optional[StrictStr] = Field(default=None, description="HSN or SAC code for Goods/Services")
    sat_item_key_code: Optional[StrictStr] = Field(default=None, description="Add SAT Item Key Code for your goods/services. Download the <a href= http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/catCFDI_V_4_07122022.xls  >CFDI Catalogs.</a>")
    unitkey_code: Optional[StrictStr] = Field(default=None, description="Add SAT Unit Key Code for your goods/services. Download the <a href= http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/catCFDI_V_4_07122022.xls  >CFDI Catalogs.</a>")
    description: Optional[StrictStr] = Field(default=None, description="Small description of the payment made for the invoice.")
    item_order: Optional[StrictInt] = Field(default=None, description="The order of the line item_order")
    price: Optional[StrictStr] = Field(default=None, description="Price of the item included in the invoice.")
    quantity: Optional[StrictInt] = Field(default=None, description="Quantity of the item included in the invoice.")
    unit: Optional[StrictStr] = Field(default=None, description="Unit of the line item e.g. kgs, Nos. <code>Maximum length [100]</code>")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discount applied to the invoice. It can be either in % or in amount. e.g. 12.5% or 190. <code>Maximum length [100]</code>")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax ID to which you would like to associate with this plan.")
    tds_tax_id: Optional[StrictStr] = Field(default=None, description="ID of the TDS tax.")
    tax_exemption_id: Optional[StrictStr] = Field(default=None, description="Unique Tax Exemption ID if you dont want to associate a tax to the plan.")
    avatax_use_code: Optional[StrictStr] = Field(default=None, description="Used to group like customers for exemption purposes. It is a custom value that links customers to a tax rule. Select from Avalara [standard codes][1] or enter a custom code. <code>Maximum length [25]</code>")
    avatax_exempt_no: Optional[StrictStr] = Field(default=None, description="Exemption certificate number of the customer. <code>Maximum length [25]</code>")
    tax_name: Optional[StrictStr] = Field(default=None, description="The name of the tax")
    tax_type: Optional[StrictStr] = Field(default=None, description="The type of the tax")
    tax_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The  percentage of tax levied")
    item_total: Optional[StrictInt] = Field(default=None, description="Cost of an item included in the invoice. This would be the product of quantity of the item included and the price of that item.")
    __properties: ClassVar[List[str]] = ["product_id", "project_id", "time_entry_ids", "expense_id", "name", "product_type", "hsn_or_sac", "sat_item_key_code", "unitkey_code", "description", "item_order", "price", "quantity", "unit", "discount", "tax_id", "tds_tax_id", "tax_exemption_id", "avatax_use_code", "avatax_exempt_no", "tax_name", "tax_type", "tax_percentage", "item_total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAnInvoiceRequestInvoiceItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAnInvoiceRequestInvoiceItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product_id": obj.get("product_id"),
            "project_id": obj.get("project_id"),
            "time_entry_ids": obj.get("time_entry_ids"),
            "expense_id": obj.get("expense_id"),
            "name": obj.get("name"),
            "product_type": obj.get("product_type"),
            "hsn_or_sac": obj.get("hsn_or_sac"),
            "sat_item_key_code": obj.get("sat_item_key_code"),
            "unitkey_code": obj.get("unitkey_code"),
            "description": obj.get("description"),
            "item_order": obj.get("item_order"),
            "price": obj.get("price"),
            "quantity": obj.get("quantity"),
            "unit": obj.get("unit"),
            "discount": obj.get("discount"),
            "tax_id": obj.get("tax_id"),
            "tds_tax_id": obj.get("tds_tax_id"),
            "tax_exemption_id": obj.get("tax_exemption_id"),
            "avatax_use_code": obj.get("avatax_use_code"),
            "avatax_exempt_no": obj.get("avatax_exempt_no"),
            "tax_name": obj.get("tax_name"),
            "tax_type": obj.get("tax_type"),
            "tax_percentage": obj.get("tax_percentage"),
            "item_total": obj.get("item_total")
        })
        return _obj



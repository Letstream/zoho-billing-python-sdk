# coding: utf-8

"""
    Invoices

    Invoices describe how much a customer owes for his subscription. Invoices are created for recurring charges, one time charges including any prorated adjustments.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateCommentResponse(BaseModel):
    """
    UpdateCommentResponse
    """ # noqa: E501
    code: Optional[StrictInt] = None
    message: Optional[StrictStr] = None
    comment_id: Optional[StrictStr] = Field(default=None, description="Unique Id to denote the comment fro the particular invoice.")
    invoice_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for an invoice.")
    description: Optional[StrictStr] = Field(default=None, description="Small description of the payment made for the invoice.")
    commented_by_id: Optional[StrictStr] = Field(default=None, description="Unique Id to denote who has commented.")
    commented_by: Optional[StrictStr] = Field(default=None, description="It denotes the name of the user who has commented or the system.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on which the invoice is paid.", alias="date")
    date_description: Optional[StrictStr] = Field(default=None, description="Number of days since the comment was made")
    time: Optional[StrictStr] = Field(default=None, description="Denotes the time at which the comment was created.")
    comment_type: Optional[StrictStr] = Field(default=None, description="It denotes whether user comment or system comment.")
    __properties: ClassVar[List[str]] = ["code", "message", "comment_id", "invoice_id", "description", "commented_by_id", "commented_by", "date", "date_description", "time", "comment_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateCommentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "code",
            "message",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateCommentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "message": obj.get("message"),
            "comment_id": obj.get("comment_id"),
            "invoice_id": obj.get("invoice_id"),
            "description": obj.get("description"),
            "commented_by_id": obj.get("commented_by_id"),
            "commented_by": obj.get("commented_by"),
            "date": obj.get("date"),
            "date_description": obj.get("date_description"),
            "time": obj.get("time"),
            "comment_type": obj.get("comment_type")
        })
        return _obj



# coding: utf-8

"""
    Subscriptions

    A subscription enables you to charge customers at specified intervals for a plan of their choice.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_subscription.models.create_a_subscription_request_addons_inner import CreateASubscriptionRequestAddonsInner
from ls_zoho_billing_subscription.models.create_a_subscription_request_contactpersons_inner import CreateASubscriptionRequestContactpersonsInner
from ls_zoho_billing_subscription.models.create_a_subscription_request_customer import CreateASubscriptionRequestCustomer
from ls_zoho_billing_subscription.models.create_a_subscription_request_plan import CreateASubscriptionRequestPlan
from ls_zoho_billing_subscription.models.item_custom_fields_inner import ItemCustomFieldsInner
from ls_zoho_billing_subscription.models.subscription_response_payment_gateways_inner import SubscriptionResponsePaymentGatewaysInner
from typing import Optional, Set
from typing_extensions import Self

class CreateASubscriptionRequest(BaseModel):
    """
    CreateASubscriptionRequest
    """ # noqa: E501
    add_to_unbilled_charges: Optional[StrictBool] = Field(default=None, description="When the value is given as true, the subscription would be created and charges for the current billing cycle will be put as unbilled. This can be converted to invoice at any later point of time.")
    customer: CreateASubscriptionRequestCustomer
    customer_id: Optional[Any] = Field(description="Customer ID of the customer for whom a subscription needs to be created.")
    payment_terms: Optional[StrictInt] = Field(default=None, description="Payment Due details for the invoices.")
    payment_terms_label: Optional[StrictStr] = Field(default=None, description="Label for the paymet due details.")
    custom_fields: Optional[List[ItemCustomFieldsInner]] = Field(default=None, description="Additional fields for the invoices.")
    contactpersons: Optional[List[CreateASubscriptionRequestContactpersonsInner]] = Field(default=None, description="List of contact person objects. Each object contains <code>contactperson_id</code>.")
    card_id: Optional[Any] = Field(description="Enter the card_id of the card which has to be updated.")
    starts_at: Optional[StrictStr] = Field(default=None, description="Generally the subscription will start on the day it is created. But, the date can also be a future  or past date depending upon your usecase. For future dates, the subscription status would be Future till the starts_at date. And for past dates, the subscription status can be Trial, Live or Expired depending on the subscription interval that you have selected.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This will be the exchange rate provided for the organization's currency and the customer's currency. The subscription fee would be the multiplicative product of the original price and the exchange rate.")
    place_of_supply: Optional[StrictStr] = Field(default=None, description="Place of Supply for the customer's subscription.")
    plan: CreateASubscriptionRequestPlan
    addons: Optional[List[CreateASubscriptionRequestAddonsInner]] = Field(default=None, description="List of addon objects which are to be included in the subscription. Each object contains <code>addon_code</code>, <code>name</code>, <code>price</code> and <code>quantity</code>.")
    coupon_code: Optional[StrictStr] = Field(default=None, description="The coupon code of the coupon which is to be applied to the subscription.")
    auto_collect: Optional[StrictBool] = Field(default=None, description="auto_collect is set to true for creating an online subscription which will charge the customerâ€™s card automatically on every renewal. To create an offline subscriptions, set auto_collect to false.")
    reference_id: Optional[StrictStr] = Field(default=None, description="A string of your choice is required to easily identify and keep track of your subscriptions.")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of the sales person assigned for the subscription.")
    payment_gateways: Optional[List[SubscriptionResponsePaymentGatewaysInner]] = Field(default=None, description="List of payment gateways configured for the customer.")
    create_backdated_invoice: Optional[StrictBool] = Field(default=None, description="To allow creation of invoice for current billing cycle for back dated subscriptions.")
    can_charge_setup_fee_immediately: Optional[StrictBool] = Field(default=None, description="If set to \"true\", a separate invoice will be raised for the setup fee as soon as the subscription's trial period starts. Set the value as \"false\", or remove this optional argument if you want the setup fee to be billed at the end of the trial period, along with the other subscription related charges.")
    template_id: Optional[StrictStr] = Field(default=None, description="Defaulte Invoice Template ID for all the invoices created from the subscription.")
    cfdi_usage: Optional[StrictStr] = Field(default=None, description="Choose CFDI Usage. Allowed values:</br><code>acquisition_of_merchandise</code>, <code>return_discount_bonus</code>, <code>general_expense</code>, <code>buildings</code>, <code>furniture_office_equipment</code>, <code>transport_equipment</code>, <code>computer_equipmentdye_molds_tools</code>, <code>telephone_communication</code>, <code>satellite_communication</code>, <code>other_machinery_equipment</code>, <code>hospital_expense</code>, <code>medical_expense_disability</code>, <code>funeral_expense</code>, <code>donation</code>, <code>interest_mortage_loans</code>, <code>contribution_sar</code>, <code>medical_expense_insurance_pormium</code>, <code>school_transportation_expense</code>, <code>deposit_saving_account</code>, <code>payment_educational_service</code>, <code>no_tax_effect</code>, <code>payment</code>, <code>payroll</code>.")
    allow_partial_payments: Optional[StrictBool] = Field(default=None, description="Boolean to check if partial payments are allowed for the contact")
    account_id: StrictStr = Field(description="Account ID of the bank account from which payment is made by the customer.")
    __properties: ClassVar[List[str]] = ["add_to_unbilled_charges", "customer", "customer_id", "payment_terms", "payment_terms_label", "custom_fields", "contactpersons", "card_id", "starts_at", "exchange_rate", "place_of_supply", "plan", "addons", "coupon_code", "auto_collect", "reference_id", "salesperson_name", "payment_gateways", "create_backdated_invoice", "can_charge_setup_fee_immediately", "template_id", "cfdi_usage", "allow_partial_payments", "account_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateASubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contactpersons (list)
        _items = []
        if self.contactpersons:
            for _item_contactpersons in self.contactpersons:
                if _item_contactpersons:
                    _items.append(_item_contactpersons.to_dict())
            _dict['contactpersons'] = _items
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item_addons in self.addons:
                if _item_addons:
                    _items.append(_item_addons.to_dict())
            _dict['addons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_gateways (list)
        _items = []
        if self.payment_gateways:
            for _item_payment_gateways in self.payment_gateways:
                if _item_payment_gateways:
                    _items.append(_item_payment_gateways.to_dict())
            _dict['payment_gateways'] = _items
        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        # set to None if card_id (nullable) is None
        # and model_fields_set contains the field
        if self.card_id is None and "card_id" in self.model_fields_set:
            _dict['card_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateASubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "add_to_unbilled_charges": obj.get("add_to_unbilled_charges"),
            "customer": CreateASubscriptionRequestCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "customer_id": obj.get("customer_id"),
            "payment_terms": obj.get("payment_terms"),
            "payment_terms_label": obj.get("payment_terms_label"),
            "custom_fields": [ItemCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "contactpersons": [CreateASubscriptionRequestContactpersonsInner.from_dict(_item) for _item in obj["contactpersons"]] if obj.get("contactpersons") is not None else None,
            "card_id": obj.get("card_id"),
            "starts_at": obj.get("starts_at"),
            "exchange_rate": obj.get("exchange_rate"),
            "place_of_supply": obj.get("place_of_supply"),
            "plan": CreateASubscriptionRequestPlan.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "addons": [CreateASubscriptionRequestAddonsInner.from_dict(_item) for _item in obj["addons"]] if obj.get("addons") is not None else None,
            "coupon_code": obj.get("coupon_code"),
            "auto_collect": obj.get("auto_collect"),
            "reference_id": obj.get("reference_id"),
            "salesperson_name": obj.get("salesperson_name"),
            "payment_gateways": [SubscriptionResponsePaymentGatewaysInner.from_dict(_item) for _item in obj["payment_gateways"]] if obj.get("payment_gateways") is not None else None,
            "create_backdated_invoice": obj.get("create_backdated_invoice"),
            "can_charge_setup_fee_immediately": obj.get("can_charge_setup_fee_immediately"),
            "template_id": obj.get("template_id"),
            "cfdi_usage": obj.get("cfdi_usage"),
            "allow_partial_payments": obj.get("allow_partial_payments"),
            "account_id": obj.get("account_id")
        })
        return _obj



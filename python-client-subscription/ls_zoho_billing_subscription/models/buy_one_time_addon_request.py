# coding: utf-8

"""
    Subscriptions

    A subscription enables you to charge customers at specified intervals for a plan of their choice.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_subscription.models.buy_one_time_addon_request_addons_inner import BuyOneTimeAddonRequestAddonsInner
from typing import Optional, Set
from typing_extensions import Self

class BuyOneTimeAddonRequest(BaseModel):
    """
    BuyOneTimeAddonRequest
    """ # noqa: E501
    addons: List[BuyOneTimeAddonRequestAddonsInner] = Field(description="List of addon objects which are to be included in the subscription. Each object contains <code>addon_code</code>, <code>name</code>, <code>price</code> and <code>quantity</code>.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This will be the exchange rate provided for the organization's currency and the customer's currency. The subscription fee would be the multiplicative product of the original price and the exchange rate.")
    coupon_code: Optional[Any] = Field(default=None, description="The coupon code of the coupon which is to be applied to the one-time addon.")
    add_to_unbilled_charges: Optional[StrictBool] = Field(default=None, description="When the value is given as true, the charges for the add-on will be put as unbilled. If the subscription already has unbilled-charges, this will be added as another line item to it. The unbilled charge can be converted to invoice at any later point of time.")
    __properties: ClassVar[List[str]] = ["addons", "exchange_rate", "coupon_code", "add_to_unbilled_charges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuyOneTimeAddonRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item_addons in self.addons:
                if _item_addons:
                    _items.append(_item_addons.to_dict())
            _dict['addons'] = _items
        # set to None if coupon_code (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_code is None and "coupon_code" in self.model_fields_set:
            _dict['coupon_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuyOneTimeAddonRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addons": [BuyOneTimeAddonRequestAddonsInner.from_dict(_item) for _item in obj["addons"]] if obj.get("addons") is not None else None,
            "exchange_rate": obj.get("exchange_rate"),
            "coupon_code": obj.get("coupon_code"),
            "add_to_unbilled_charges": obj.get("add_to_unbilled_charges")
        })
        return _obj



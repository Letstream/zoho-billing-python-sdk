# coding: utf-8

"""
    Subscriptions

    A subscription enables you to charge customers at specified intervals for a plan of their choice.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_subscription.models.item_custom_fields_inner import ItemCustomFieldsInner
from ls_zoho_billing_subscription.models.tags_inner import TagsInner
from typing import Optional, Set
from typing_extensions import Self

class AddChargeRequest(BaseModel):
    """
    AddChargeRequest
    """ # noqa: E501
    amount: Union[StrictFloat, StrictInt] = Field(description="The amount that needs to be charged for the subscription.")
    description: Optional[Any] = Field(default=None, description="Make a note of why the customer was charged so that if can be used for any future reference.")
    tags: Optional[List[TagsInner]] = None
    item_custom_fields: Optional[List[ItemCustomFieldsInner]] = Field(default=None, description="Custom fields for a item.")
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID which the add charge is associated.")
    add_to_unbilled_charges: Optional[StrictBool] = Field(default=None, description="When the value is given as true, the charges will be put as unbilled. If the subscription already has unbilled-charges, this will be added as another line item to it. The unbilled charge can be converted to invoice at any later point of time.")
    __properties: ClassVar[List[str]] = ["amount", "description", "tags", "item_custom_fields", "account_id", "add_to_unbilled_charges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddChargeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_custom_fields (list)
        _items = []
        if self.item_custom_fields:
            for _item_item_custom_fields in self.item_custom_fields:
                if _item_item_custom_fields:
                    _items.append(_item_item_custom_fields.to_dict())
            _dict['item_custom_fields'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddChargeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "description": obj.get("description"),
            "tags": [TagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "item_custom_fields": [ItemCustomFieldsInner.from_dict(_item) for _item in obj["item_custom_fields"]] if obj.get("item_custom_fields") is not None else None,
            "account_id": obj.get("account_id"),
            "add_to_unbilled_charges": obj.get("add_to_unbilled_charges")
        })
        return _obj



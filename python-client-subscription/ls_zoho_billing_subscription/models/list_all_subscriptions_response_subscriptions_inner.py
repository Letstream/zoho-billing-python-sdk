# coding: utf-8

"""
    Subscriptions

    A subscription enables you to charge customers at specified intervals for a plan of their choice.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ListAllSubscriptionsResponseSubscriptionsInner(BaseModel):
    """
    ListAllSubscriptionsResponseSubscriptionsInner
    """ # noqa: E501
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer for whom a subscription needs to be created.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    plan_name: Optional[StrictStr] = Field(default=None, description="Name of the plan.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for a subscription.")
    name: Optional[StrictStr] = Field(default=None, description="Name generated by concatenation of the product name and the selected plan.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the subscription. It can be <code>live</code>, <code>trial</code>, <code>dunning</code>, <code>unpaid</code>, <code>non_renewing</code>, <code>cancelled</code>, <code>creation_failed</code>, <code>cancelled_from_dunning</code>, <code>expired</code>, <code>trial_expired</code> or <code>future</code>.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount that needs to be charged for the subscription.")
    created_at: Optional[StrictStr] = Field(default=None, description="Date at which the subscription was created.")
    activated_at: Optional[StrictStr] = Field(default=None, description="Date at which the subscription was activated.")
    current_term_ends_at: Optional[StrictStr] = Field(default=None, description="Date on which the current term of the subscription ends.")
    current_term_starts_at: Optional[StrictStr] = Field(default=None, description="Date on which the current term of the subscription started.")
    last_billing_at: Optional[StrictStr] = Field(default=None, description="The date on which the customer was billed last.")
    next_billing_at: Optional[StrictStr] = Field(default=None, description="The date on which the customer will be billed next. This will also be the date on which the next term of the subscription starts.")
    expires_at: Optional[StrictStr] = Field(default=None, description="This is applicable only when <code>billing_cycle</code> is set for a plan. A subscription expires on the last day of the last billing cycle.")
    interval: Optional[StrictStr] = Field(default=None, description="Indicates the number of intervals between each billing. If interval=2, the customer would be billed every two months or years depending on the value for interval_unit.")
    interval_unit: Optional[StrictStr] = Field(default=None, description="It can be either <code>months</code> or <code>years</code>. For interval=2 and interval_unit=months, the customer is billed every two months.")
    auto_collect: Optional[StrictBool] = Field(default=None, description="auto_collect is set to true for creating an online subscription which will charge the customerâ€™s card automatically on every renewal. To create an offline subscriptions, set auto_collect to false.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time at which the subscription was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time at which the subscription details were last updated.")
    reference_id: Optional[StrictStr] = Field(default=None, description="A string of your choice is required to easily identify and keep track of your subscriptions.")
    salesperson_id: Optional[StrictStr] = Field(default=None, description="Unique Id of the sales person assigned for the subscription.")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of the sales person assigned for the subscription.")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code of the currency in which the customer wants to pay. If <code>currency_code</code> is not specified here, the currency chosen in your Zoho Billing organization will be used for billing. <code>currency_id</code> and <code>currency_symbol</code> are set automatically in accordance to the currency_code.")
    currency_symbol: Optional[StrictStr] = Field(default=None, description="Symbol of the customer's currency.")
    __properties: ClassVar[List[str]] = ["customer_id", "customer_name", "email", "plan_name", "subscription_id", "name", "status", "amount", "created_at", "activated_at", "current_term_ends_at", "current_term_starts_at", "last_billing_at", "next_billing_at", "expires_at", "interval", "interval_unit", "auto_collect", "created_time", "updated_time", "reference_id", "salesperson_id", "salesperson_name", "currency_code", "currency_symbol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListAllSubscriptionsResponseSubscriptionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListAllSubscriptionsResponseSubscriptionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "email": obj.get("email"),
            "plan_name": obj.get("plan_name"),
            "subscription_id": obj.get("subscription_id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "amount": obj.get("amount"),
            "created_at": obj.get("created_at"),
            "activated_at": obj.get("activated_at"),
            "current_term_ends_at": obj.get("current_term_ends_at"),
            "current_term_starts_at": obj.get("current_term_starts_at"),
            "last_billing_at": obj.get("last_billing_at"),
            "next_billing_at": obj.get("next_billing_at"),
            "expires_at": obj.get("expires_at"),
            "interval": obj.get("interval"),
            "interval_unit": obj.get("interval_unit"),
            "auto_collect": obj.get("auto_collect"),
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time"),
            "reference_id": obj.get("reference_id"),
            "salesperson_id": obj.get("salesperson_id"),
            "salesperson_name": obj.get("salesperson_name"),
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol")
        })
        return _obj



# coding: utf-8

"""
    Subscriptions

    A subscription enables you to charge customers at specified intervals for a plan of their choice.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ls_zoho_billing_subscription.models.billing_address import BillingAddress
from ls_zoho_billing_subscription.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

class UpdateASubscriptionResponseSubscriptionCustomer(BaseModel):
    """
    Customer object of the customer for whom you want to create a subscription. Each object contains <code>display_name</code>, <code>company_name</code>, <code>first_name</code>, <code>last_name</code>, <code>email</code>, <code>fax</code>, <code>currency_code</code> and <code>billing_address</code>.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="This will be name which will be displayed in the interface and invoices.")
    salutation: Optional[StrictStr] = Field(default=None, description="Salutation of the customer.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the customer.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the customer.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    company_name: Optional[StrictStr] = Field(default=None, description="Registered name of the company the customer represents.")
    billing_address: Optional[BillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    payment_terms: Optional[StrictInt] = Field(default=None, description="Payment Due details for the invoices.")
    payment_terms_label: Optional[StrictStr] = Field(default=None, description="Label for the paymet due details.")
    __properties: ClassVar[List[str]] = ["display_name", "salutation", "first_name", "last_name", "email", "company_name", "billing_address", "shipping_address", "payment_terms", "payment_terms_label"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateASubscriptionResponseSubscriptionCustomer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateASubscriptionResponseSubscriptionCustomer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "salutation": obj.get("salutation"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "company_name": obj.get("company_name"),
            "billing_address": BillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "payment_terms": obj.get("payment_terms"),
            "payment_terms_label": obj.get("payment_terms_label")
        })
        return _obj



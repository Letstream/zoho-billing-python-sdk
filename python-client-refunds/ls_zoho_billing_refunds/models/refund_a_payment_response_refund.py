# coding: utf-8

"""
    Refunds

    A refund object enables you to manage your refunds. Refunds can be made by direct payment to the respective customer or through credits.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_refunds.models.refund_response_autotransaction import RefundResponseAutotransaction
from ls_zoho_billing_refunds.models.refund_response_creditnote import RefundResponseCreditnote
from typing import Optional, Set
from typing_extensions import Self

class RefundAPaymentResponseRefund(BaseModel):
    """
    RefundAPaymentResponseRefund
    """ # noqa: E501
    refund_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for a refund made.")
    var_date: Optional[StrictStr] = Field(default=None, description="The date on which refund is made.", alias="date")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount to be refund.")
    description: Optional[StrictStr] = Field(default=None, description="A small description about the refund.")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number for the refund made. A custom string can also be set as the reference number.")
    refund_mode: Optional[StrictStr] = Field(default=None, description="Mode through which refund is made. This can be <code>check</code>, <code>cash</code>, <code>creditcard</code>, <code>banktransfer</code>, <code>bankremittance</code>, <code>autotransaction</code> or <code>others</code>.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the refund made. This can be either <code>success</code> or <code>failure</code>.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer to whom the refund is to be made.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    creditnote: Optional[RefundResponseCreditnote] = None
    autotransaction: Optional[RefundResponseAutotransaction] = None
    currency_code: Optional[StrictStr] = Field(default=None, description="Customer's currency code. Refunds will be made in the customer's currency.")
    currency_symbol: Optional[StrictStr] = Field(default=None, description="The currency symbol of the currency chosen for the customer.")
    __properties: ClassVar[List[str]] = ["refund_id", "date", "amount", "description", "reference_number", "refund_mode", "status", "customer_id", "email", "creditnote", "autotransaction", "currency_code", "currency_symbol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RefundAPaymentResponseRefund from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creditnote
        if self.creditnote:
            _dict['creditnote'] = self.creditnote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of autotransaction
        if self.autotransaction:
            _dict['autotransaction'] = self.autotransaction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RefundAPaymentResponseRefund from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "refund_id": obj.get("refund_id"),
            "date": obj.get("date"),
            "amount": obj.get("amount"),
            "description": obj.get("description"),
            "reference_number": obj.get("reference_number"),
            "refund_mode": obj.get("refund_mode"),
            "status": obj.get("status"),
            "customer_id": obj.get("customer_id"),
            "email": obj.get("email"),
            "creditnote": RefundResponseCreditnote.from_dict(obj["creditnote"]) if obj.get("creditnote") is not None else None,
            "autotransaction": RefundResponseAutotransaction.from_dict(obj["autotransaction"]) if obj.get("autotransaction") is not None else None,
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol")
        })
        return _obj



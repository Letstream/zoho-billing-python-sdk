# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_expenses.models.custom_fields_inner import CustomFieldsInner
from ls_zoho_billing_expenses.models.line_items_inner import LineItemsInner
from ls_zoho_billing_expenses.models.taxes_inner import TaxesInner
from typing import Optional, Set
from typing_extensions import Self

class CreateAnExpenseRequest(BaseModel):
    """
    CreateAnExpenseRequest
    """ # noqa: E501
    account_id: StrictStr = Field(description="ID of the expense account.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date of the expense", alias="date")
    amount: Union[StrictFloat, StrictInt] = Field(description="Total expense value")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax ID applied")
    is_inclusive_tax: Optional[StrictBool] = Field(default=None, description="Check if amount is inclusive of tax")
    source_of_supply: Optional[StrictStr] = Field(default=None, description="Place from where the goods/services are supplied. (If not given, <code>place of contact</code> given for the contact will be taken)")
    destination_of_supply: Optional[StrictStr] = Field(default=None, description="Place where the goods/services are supplied to. (If not given, organisation's home state will be taken)")
    hsn_or_sac: Optional[StrictStr] = Field(default=None, description="Add HSN/SAC code for your goods/services")
    gst_no: Optional[StrictStr] = Field(default=None, description="15 digit GST identification number of the vendor.")
    reverse_charge_tax_id: Optional[StrictStr] = Field(default=None, description="ID of the reverse charge tax")
    custom_fields: Optional[List[CustomFieldsInner]] = Field(default=None, description="Custom fields for an expense.")
    line_items: Optional[List[LineItemsInner]] = None
    taxes: Optional[List[TaxesInner]] = None
    is_billable: Optional[StrictBool] = Field(default=None, description="Check if an expense is billable")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number of the expense. <code>Maximum length [100]</code>")
    description: Optional[StrictStr] = Field(default=None, description="Description of the expense. <code>Maximum length [100]</code>")
    customer_id: Optional[StrictStr] = Field(default=None, description="ID of the expense account.")
    currency_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the currency")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Foreign currency exchange rate")
    project_id: Optional[StrictStr] = Field(default=None, description="ID of the project associated with the customer.")
    mileage_type: Optional[StrictStr] = Field(default=None, description="Milage expense type")
    vat_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment for the expense. VAT treatment denotes the location of the vendor, if the vendor resides in UK then the VAT treatment is <code>uk</code>. If the vendor is in an EU country & VAT registered, you are resides in Northen Ireland and purchasing Goods then his VAT treatment is <code>eu_vat_registered</code> and if he resides outside the UK then his VAT treatment is <code>overseas</code> (For Pre Brexit, this can be split as <code>eu_vat_registered</code>, <code>eu_vat_not_registered</code> and <code>non_eu</code>).")
    product_type: Optional[StrictStr] = Field(default=None, description="Type of the expense. This denotes whether the expense is to be treated as a goods or service purchase. Allowed Values: <code>goods</code> and <code>service</code>.")
    acquisition_vat_id: Optional[StrictStr] = Field(default=None, description="This is the ID of the tax applied in case this is an EU - goods expense and acquisition VAT needs to be reported.")
    reverse_charge_vat_id: Optional[StrictStr] = Field(default=None, description="This is the ID of the tax applied in case this is a non UK - service expense and reverse charge VAT needs to be reported.")
    start_reading: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Start reading of odometer when creating a mileage expense where <code>mileage_type</code> is <code>odometer</code>.")
    end_reading: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="End reading of odometer when creating a mileage expense where <code>mileage_type</code> is <code>odometer</code>.")
    distance: Optional[StrictStr] = Field(default=None, description="Distance travelled for a particular mileage expense where <code>mileage_type</code> is <code>manual</code>")
    mileage_unit: Optional[StrictStr] = Field(default=None, description="Unit of the distance travelled. Allowed Values: <code>km</code> and <code>mile</code>")
    mileage_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mileage rate for a particular mileage expense.")
    employee_id: Optional[StrictStr] = Field(default=None, description="ID of the employee who has submitted this mileage expense.")
    vehicle_type: Optional[StrictStr] = Field(default=None, description="Vehicle type for a particular mileage expense. Allowed Values: <code>car</code>, <code>van</code>, <code>motorcycle</code> and <code>bike</code>")
    can_reclaim_vat_on_mileage: Optional[StrictStr] = Field(default=None, description="To specify if tax can be reclaimed for this mileage expense.")
    fuel_type: Optional[StrictStr] = Field(default=None, description="Fuel type for a particular mileage expense. Allowed Values: <code>petrol</code>, <code>lpg</code> and <code>diesel</code>")
    engine_capacity_range: Optional[StrictStr] = Field(default=None, description="Engine capacity range for a particular mileage expense. Allowed Values: <code>less_than_1400cc</code>, <code>between_1400cc_and_1600cc</code>, <code>between_1600cc_and_2000cc</code> and <code>more_than_2000cc</code>")
    __properties: ClassVar[List[str]] = ["account_id", "date", "amount", "tax_id", "is_inclusive_tax", "source_of_supply", "destination_of_supply", "hsn_or_sac", "gst_no", "reverse_charge_tax_id", "custom_fields", "line_items", "taxes", "is_billable", "reference_number", "description", "customer_id", "currency_id", "exchange_rate", "project_id", "mileage_type", "vat_treatment", "product_type", "acquisition_vat_id", "reverse_charge_vat_id", "start_reading", "end_reading", "distance", "mileage_unit", "mileage_rate", "employee_id", "vehicle_type", "can_reclaim_vat_on_mileage", "fuel_type", "engine_capacity_range"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAnExpenseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taxes (list)
        _items = []
        if self.taxes:
            for _item_taxes in self.taxes:
                if _item_taxes:
                    _items.append(_item_taxes.to_dict())
            _dict['taxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAnExpenseRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "date": obj.get("date"),
            "amount": obj.get("amount"),
            "tax_id": obj.get("tax_id"),
            "is_inclusive_tax": obj.get("is_inclusive_tax"),
            "source_of_supply": obj.get("source_of_supply"),
            "destination_of_supply": obj.get("destination_of_supply"),
            "hsn_or_sac": obj.get("hsn_or_sac"),
            "gst_no": obj.get("gst_no"),
            "reverse_charge_tax_id": obj.get("reverse_charge_tax_id"),
            "custom_fields": [CustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "line_items": [LineItemsInner.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "taxes": [TaxesInner.from_dict(_item) for _item in obj["taxes"]] if obj.get("taxes") is not None else None,
            "is_billable": obj.get("is_billable"),
            "reference_number": obj.get("reference_number"),
            "description": obj.get("description"),
            "customer_id": obj.get("customer_id"),
            "currency_id": obj.get("currency_id"),
            "exchange_rate": obj.get("exchange_rate"),
            "project_id": obj.get("project_id"),
            "mileage_type": obj.get("mileage_type"),
            "vat_treatment": obj.get("vat_treatment"),
            "product_type": obj.get("product_type"),
            "acquisition_vat_id": obj.get("acquisition_vat_id"),
            "reverse_charge_vat_id": obj.get("reverse_charge_vat_id"),
            "start_reading": obj.get("start_reading"),
            "end_reading": obj.get("end_reading"),
            "distance": obj.get("distance"),
            "mileage_unit": obj.get("mileage_unit"),
            "mileage_rate": obj.get("mileage_rate"),
            "employee_id": obj.get("employee_id"),
            "vehicle_type": obj.get("vehicle_type"),
            "can_reclaim_vat_on_mileage": obj.get("can_reclaim_vat_on_mileage"),
            "fuel_type": obj.get("fuel_type"),
            "engine_capacity_range": obj.get("engine_capacity_range")
        })
        return _obj



# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_expenses.models.custom_fields_inner import CustomFieldsInner
from typing import Optional, Set
from typing_extensions import Self

class ListExpensesResponseExpensesInner(BaseModel):
    """
    ListExpensesResponseExpensesInner
    """ # noqa: E501
    expense_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the expense")
    var_date: Optional[StrictStr] = Field(default=None, description="Date of the expense", alias="date")
    account_name: Optional[StrictStr] = Field(default=None, description="Name of the expense account in which that expense is recorded")
    description: Optional[StrictStr] = Field(default=None, description="Description of the expense. <code>Maximum length [100]</code>")
    currency_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the currency")
    currency_code: Optional[StrictStr] = Field(default=None, description="Code of the currency")
    bcy_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total value of expense in Base currency")
    bcy_total_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total expense in Base currency excluding tax")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total value of expense")
    total_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total expense excluding tax")
    is_billable: Optional[StrictBool] = Field(default=None, description="Check if an expense is billable")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number of the expense. <code>Maximum length [100]</code>")
    customer_id: Optional[StrictStr] = Field(default=None, description="ID of the expense account.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the Customer for whom expense is raised. <code>Maximum length [100]</code>")
    status: Optional[StrictStr] = Field(default=None, description="Expense status")
    custom_fields: Optional[List[CustomFieldsInner]] = Field(default=None, description="Custom fields for an expense.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time of expense creation")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Date of last modification to the expense")
    expense_receipt_name: Optional[StrictStr] = Field(default=None, description="Name of the expense receipt")
    mileage_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mileage rate for a particular mileage expense.")
    mileage_unit: Optional[StrictStr] = Field(default=None, description="Unit of the distance travelled. Allowed Values: <code>km</code> and <code>mile</code>")
    expense_type: Optional[StrictStr] = Field(default=None, description="Type of the expense")
    start_reading: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Start reading of odometer when creating a mileage expense where <code>mileage_type</code> is <code>odometer</code>.")
    end_reading: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="End reading of odometer when creating a mileage expense where <code>mileage_type</code> is <code>odometer</code>.")
    __properties: ClassVar[List[str]] = ["expense_id", "date", "account_name", "description", "currency_id", "currency_code", "bcy_total", "bcy_total_without_tax", "total", "total_without_tax", "is_billable", "reference_number", "customer_id", "customer_name", "status", "custom_fields", "created_time", "last_modified_time", "expense_receipt_name", "mileage_rate", "mileage_unit", "expense_type", "start_reading", "end_reading"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListExpensesResponseExpensesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListExpensesResponseExpensesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expense_id": obj.get("expense_id"),
            "date": obj.get("date"),
            "account_name": obj.get("account_name"),
            "description": obj.get("description"),
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "bcy_total": obj.get("bcy_total"),
            "bcy_total_without_tax": obj.get("bcy_total_without_tax"),
            "total": obj.get("total"),
            "total_without_tax": obj.get("total_without_tax"),
            "is_billable": obj.get("is_billable"),
            "reference_number": obj.get("reference_number"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "status": obj.get("status"),
            "custom_fields": [CustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "expense_receipt_name": obj.get("expense_receipt_name"),
            "mileage_rate": obj.get("mileage_rate"),
            "mileage_unit": obj.get("mileage_unit"),
            "expense_type": obj.get("expense_type"),
            "start_reading": obj.get("start_reading"),
            "end_reading": obj.get("end_reading")
        })
        return _obj



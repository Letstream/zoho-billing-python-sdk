# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_expenses.models.acquisition_vat_summary_inner import AcquisitionVatSummaryInner
from ls_zoho_billing_expenses.models.custom_fields_inner import CustomFieldsInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateAnExpenseResponseExpense(BaseModel):
    """
    A cost spent by the company
    """ # noqa: E501
    expense_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the expense")
    transaction_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the transaction")
    transaction_type: Optional[StrictStr] = Field(default=None, description="Type of the transaction")
    expense_item_id: Optional[StrictStr] = Field(default=None, description="ID of the expense item/component.")
    gst_no: Optional[StrictStr] = Field(default=None, description="15 digit GST identification number of the vendor.")
    gst_treatment: Optional[StrictStr] = Field(default=None, description="Choose whether the contact is GST registered/unregistered/consumer/overseas. Allowed values are <code> business_gst </code> , <code> business_none </code> , <code> overseas </code> , <code> consumer </code>.")
    destination_of_supply: Optional[StrictStr] = Field(default=None, description="Place where the goods/services are supplied to. (If not given, organisation's home state will be taken)")
    destination_of_supply_state: Optional[StrictStr] = Field(default=None, description="State to where goods/services are supplied")
    hsn_or_sac: Optional[StrictStr] = Field(default=None, description="Add HSN/SAC code for your goods/services")
    source_of_supply: Optional[StrictStr] = Field(default=None, description="Place from where the goods/services are supplied. (If not given, <code>place of contact</code> given for the contact will be taken)")
    paid_through_account_name: Optional[StrictStr] = Field(default=None, description="Enter the name of the paid through account.")
    vat_reg_no: Optional[StrictStr] = Field(default=None, description="Enter VAT registration number.")
    reverse_charge_tax_id: Optional[StrictStr] = Field(default=None, description="ID of the reverse charge tax")
    reverse_charge_tax_name: Optional[StrictStr] = Field(default=None, description="Enter name of the reverse charge tax")
    reverse_charge_tax_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter percentage of the reverse charge tax")
    reverse_charge_tax_amount: Optional[StrictInt] = Field(default=None, description="Enter amount of the reverse charge tax")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total expense amount")
    is_itemized_expense: Optional[StrictBool] = None
    is_pre_gst: Optional[StrictStr] = Field(default=None, description="Applicable for transactions that fall before july 1, 2017")
    trip_id: Optional[StrictStr] = Field(default=None, description="Enter trip ID")
    trip_number: Optional[StrictStr] = Field(default=None, description="Enter trip number")
    reverse_charge_vat_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter total of the reverse charge vat tax.")
    acquisition_vat_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter acquisition vat total.")
    acquisition_vat_summary: Optional[List[AcquisitionVatSummaryInner]] = None
    reverse_charge_vat_summary: Optional[List[AcquisitionVatSummaryInner]] = None
    account_id: Optional[StrictStr] = Field(default=None, description="ID of the expense account.")
    account_name: Optional[StrictStr] = Field(default=None, description="Name of the expense account in which that expense is recorded")
    var_date: Optional[StrictStr] = Field(default=None, description="Date of the expense", alias="date")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax ID applied")
    tax_name: Optional[StrictStr] = Field(default=None, description="Name of the tax levied")
    tax_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of tax charged")
    currency_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the currency")
    currency_code: Optional[StrictStr] = Field(default=None, description="Code of the currency")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Foreign currency exchange rate")
    sub_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sub-total of the expense amount")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total value of expense")
    bcy_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total value of expense in Base currency")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of expense billed")
    is_inclusive_tax: Optional[StrictBool] = Field(default=None, description="Check if amount is inclusive of tax")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number of the expense. <code>Maximum length [100]</code>")
    description: Optional[StrictStr] = Field(default=None, description="Description of the expense. <code>Maximum length [100]</code>")
    is_billable: Optional[StrictBool] = Field(default=None, description="Check if an expense is billable")
    is_personal: Optional[StrictBool] = Field(default=None, description="Check if the expense os personal")
    customer_id: Optional[StrictStr] = Field(default=None, description="ID of the expense account.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the Customer for whom expense is raised. <code>Maximum length [100]</code>")
    expense_receipt_name: Optional[StrictStr] = Field(default=None, description="Name of the expense receipt")
    expense_receipt_type: Optional[StrictStr] = Field(default=None, description="Type of the expense receipt")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Date of last modification to the expense")
    status: Optional[StrictStr] = Field(default=None, description="Expense status")
    custom_fields: Optional[List[CustomFieldsInner]] = Field(default=None, description="Custom fields for an expense.")
    invoice_id: Optional[StrictStr] = Field(default=None, description="ID of the invoice associated")
    invoice_number: Optional[StrictStr] = Field(default=None, description="Serial Number of the invoice attached")
    project_id: Optional[StrictStr] = Field(default=None, description="ID of the project associated with the customer.")
    project_name: Optional[StrictStr] = Field(default=None, description="Name of the project in question")
    mileage_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mileage rate for a particular mileage expense.")
    mileage_type: Optional[StrictStr] = Field(default=None, description="Milage expense type")
    expense_type: Optional[StrictStr] = Field(default=None, description="Type of the expense")
    start_reading: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Start reading of odometer when creating a mileage expense where <code>mileage_type</code> is <code>odometer</code>.")
    end_reading: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="End reading of odometer when creating a mileage expense where <code>mileage_type</code> is <code>odometer</code>.")
    __properties: ClassVar[List[str]] = ["expense_id", "transaction_id", "transaction_type", "expense_item_id", "gst_no", "gst_treatment", "destination_of_supply", "destination_of_supply_state", "hsn_or_sac", "source_of_supply", "paid_through_account_name", "vat_reg_no", "reverse_charge_tax_id", "reverse_charge_tax_name", "reverse_charge_tax_percentage", "reverse_charge_tax_amount", "tax_amount", "is_itemized_expense", "is_pre_gst", "trip_id", "trip_number", "reverse_charge_vat_total", "acquisition_vat_total", "acquisition_vat_summary", "reverse_charge_vat_summary", "account_id", "account_name", "date", "tax_id", "tax_name", "tax_percentage", "currency_id", "currency_code", "exchange_rate", "sub_total", "total", "bcy_total", "amount", "is_inclusive_tax", "reference_number", "description", "is_billable", "is_personal", "customer_id", "customer_name", "expense_receipt_name", "expense_receipt_type", "last_modified_time", "status", "custom_fields", "invoice_id", "invoice_number", "project_id", "project_name", "mileage_rate", "mileage_type", "expense_type", "start_reading", "end_reading"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAnExpenseResponseExpense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in acquisition_vat_summary (list)
        _items = []
        if self.acquisition_vat_summary:
            for _item_acquisition_vat_summary in self.acquisition_vat_summary:
                if _item_acquisition_vat_summary:
                    _items.append(_item_acquisition_vat_summary.to_dict())
            _dict['acquisition_vat_summary'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reverse_charge_vat_summary (list)
        _items = []
        if self.reverse_charge_vat_summary:
            for _item_reverse_charge_vat_summary in self.reverse_charge_vat_summary:
                if _item_reverse_charge_vat_summary:
                    _items.append(_item_reverse_charge_vat_summary.to_dict())
            _dict['reverse_charge_vat_summary'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAnExpenseResponseExpense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expense_id": obj.get("expense_id"),
            "transaction_id": obj.get("transaction_id"),
            "transaction_type": obj.get("transaction_type"),
            "expense_item_id": obj.get("expense_item_id"),
            "gst_no": obj.get("gst_no"),
            "gst_treatment": obj.get("gst_treatment"),
            "destination_of_supply": obj.get("destination_of_supply"),
            "destination_of_supply_state": obj.get("destination_of_supply_state"),
            "hsn_or_sac": obj.get("hsn_or_sac"),
            "source_of_supply": obj.get("source_of_supply"),
            "paid_through_account_name": obj.get("paid_through_account_name"),
            "vat_reg_no": obj.get("vat_reg_no"),
            "reverse_charge_tax_id": obj.get("reverse_charge_tax_id"),
            "reverse_charge_tax_name": obj.get("reverse_charge_tax_name"),
            "reverse_charge_tax_percentage": obj.get("reverse_charge_tax_percentage"),
            "reverse_charge_tax_amount": obj.get("reverse_charge_tax_amount"),
            "tax_amount": obj.get("tax_amount"),
            "is_itemized_expense": obj.get("is_itemized_expense"),
            "is_pre_gst": obj.get("is_pre_gst"),
            "trip_id": obj.get("trip_id"),
            "trip_number": obj.get("trip_number"),
            "reverse_charge_vat_total": obj.get("reverse_charge_vat_total"),
            "acquisition_vat_total": obj.get("acquisition_vat_total"),
            "acquisition_vat_summary": [AcquisitionVatSummaryInner.from_dict(_item) for _item in obj["acquisition_vat_summary"]] if obj.get("acquisition_vat_summary") is not None else None,
            "reverse_charge_vat_summary": [AcquisitionVatSummaryInner.from_dict(_item) for _item in obj["reverse_charge_vat_summary"]] if obj.get("reverse_charge_vat_summary") is not None else None,
            "account_id": obj.get("account_id"),
            "account_name": obj.get("account_name"),
            "date": obj.get("date"),
            "tax_id": obj.get("tax_id"),
            "tax_name": obj.get("tax_name"),
            "tax_percentage": obj.get("tax_percentage"),
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "exchange_rate": obj.get("exchange_rate"),
            "sub_total": obj.get("sub_total"),
            "total": obj.get("total"),
            "bcy_total": obj.get("bcy_total"),
            "amount": obj.get("amount"),
            "is_inclusive_tax": obj.get("is_inclusive_tax"),
            "reference_number": obj.get("reference_number"),
            "description": obj.get("description"),
            "is_billable": obj.get("is_billable"),
            "is_personal": obj.get("is_personal"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "expense_receipt_name": obj.get("expense_receipt_name"),
            "expense_receipt_type": obj.get("expense_receipt_type"),
            "last_modified_time": obj.get("last_modified_time"),
            "status": obj.get("status"),
            "custom_fields": [CustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "invoice_id": obj.get("invoice_id"),
            "invoice_number": obj.get("invoice_number"),
            "project_id": obj.get("project_id"),
            "project_name": obj.get("project_name"),
            "mileage_rate": obj.get("mileage_rate"),
            "mileage_type": obj.get("mileage_type"),
            "expense_type": obj.get("expense_type"),
            "start_reading": obj.get("start_reading"),
            "end_reading": obj.get("end_reading")
        })
        return _obj



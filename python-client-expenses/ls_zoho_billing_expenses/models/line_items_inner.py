# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LineItemsInner(BaseModel):
    """
    LineItemsInner
    """ # noqa: E501
    line_item_id: Optional[StrictStr] = Field(default=None, description="ID of the items in the expense")
    account_id: Optional[StrictStr] = Field(default=None, description="ID of the expense account.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the expense. <code>Maximum length [100]</code>")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total expense value")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax ID applied")
    item_order: Optional[StrictStr] = Field(default=None, description="Order of the items")
    product_type: Optional[StrictStr] = Field(default=None, description="Type of the expense. This denotes whether the expense is to be treated as a goods or service purchase. Allowed Values: <code>goods</code> and <code>service</code>.")
    acquisition_vat_id: Optional[StrictStr] = Field(default=None, description="This is the ID of the tax applied in case this is an EU - goods expense and acquisition VAT needs to be reported.")
    reverse_charge_vat_id: Optional[StrictStr] = Field(default=None, description="This is the ID of the tax applied in case this is a non UK - service expense and reverse charge VAT needs to be reported.")
    reverse_charge_tax_id: Optional[StrictStr] = Field(default=None, description="ID of the reverse charge tax")
    tax_exemption_code: Optional[StrictStr] = Field(default=None, description="Enter tax exemption code")
    tax_exemption_id: Optional[StrictStr] = Field(default=None, description="Enter tax exemption ID")
    __properties: ClassVar[List[str]] = ["line_item_id", "account_id", "description", "amount", "tax_id", "item_order", "product_type", "acquisition_vat_id", "reverse_charge_vat_id", "reverse_charge_tax_id", "tax_exemption_code", "tax_exemption_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LineItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LineItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "line_item_id": obj.get("line_item_id"),
            "account_id": obj.get("account_id"),
            "description": obj.get("description"),
            "amount": obj.get("amount"),
            "tax_id": obj.get("tax_id"),
            "item_order": obj.get("item_order"),
            "product_type": obj.get("product_type"),
            "acquisition_vat_id": obj.get("acquisition_vat_id"),
            "reverse_charge_vat_id": obj.get("reverse_charge_vat_id"),
            "reverse_charge_tax_id": obj.get("reverse_charge_tax_id"),
            "tax_exemption_code": obj.get("tax_exemption_code"),
            "tax_exemption_id": obj.get("tax_exemption_id")
        })
        return _obj



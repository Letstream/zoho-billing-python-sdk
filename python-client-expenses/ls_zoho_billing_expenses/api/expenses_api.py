# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing import Optional, Tuple, Union
from typing_extensions import Annotated
from ls_zoho_billing_expenses.models.create_an_expense_request import CreateAnExpenseRequest
from ls_zoho_billing_expenses.models.create_an_expense_response import CreateAnExpenseResponse
from ls_zoho_billing_expenses.models.delete_an_expense_response import DeleteAnExpenseResponse
from ls_zoho_billing_expenses.models.get_an_expense_response import GetAnExpenseResponse
from ls_zoho_billing_expenses.models.list_expenses_response import ListExpensesResponse
from ls_zoho_billing_expenses.models.update_an_expense_request import UpdateAnExpenseRequest
from ls_zoho_billing_expenses.models.update_an_expense_response import UpdateAnExpenseResponse

from ls_zoho_billing_expenses.api_client import ApiClient, RequestSerialized
from ls_zoho_billing_expenses.api_response import ApiResponse
from ls_zoho_billing_expenses.rest import RESTResponseType


class ExpensesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def expenses_expense_id_delete(
        self,
        expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteAnExpenseResponse:
        """Delete an Expense

        Delete an existing expense.

        :param expense_id: (required)
        :type expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_expense_id_delete_serialize(
            expense_id=expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def expenses_expense_id_delete_with_http_info(
        self,
        expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteAnExpenseResponse]:
        """Delete an Expense

        Delete an existing expense.

        :param expense_id: (required)
        :type expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_expense_id_delete_serialize(
            expense_id=expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def expenses_expense_id_delete_without_preload_content(
        self,
        expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an Expense

        Delete an existing expense.

        :param expense_id: (required)
        :type expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_expense_id_delete_serialize(
            expense_id=expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _expenses_expense_id_delete_serialize(
        self,
        expense_id,
        x_com_zoho_subscriptions_organizationid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if expense_id is not None:
            _path_params['expense_id'] = expense_id
        # process the query parameters
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/expenses/{expense_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def expenses_expense_id_get(
        self,
        expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAnExpenseResponse:
        """Retrieve an Expense

        Fetch the details of the Expense.

        :param expense_id: (required)
        :type expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_expense_id_get_serialize(
            expense_id=expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def expenses_expense_id_get_with_http_info(
        self,
        expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAnExpenseResponse]:
        """Retrieve an Expense

        Fetch the details of the Expense.

        :param expense_id: (required)
        :type expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_expense_id_get_serialize(
            expense_id=expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def expenses_expense_id_get_without_preload_content(
        self,
        expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve an Expense

        Fetch the details of the Expense.

        :param expense_id: (required)
        :type expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_expense_id_get_serialize(
            expense_id=expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _expenses_expense_id_get_serialize(
        self,
        expense_id,
        x_com_zoho_subscriptions_organizationid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if expense_id is not None:
            _path_params['expense_id'] = expense_id
        # process the query parameters
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/expenses/{expense_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def expenses_expense_id_put(
        self,
        expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        receipt: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.")] = None,
        delete_receipt: Annotated[Optional[StrictBool], Field(description="A historic receipt")] = None,
        update_an_expense_request: Optional[UpdateAnExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateAnExpenseResponse:
        """Update an Expense

        Update an existing Expense.

        :param expense_id: (required)
        :type expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param receipt: Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.
        :type receipt: bytearray
        :param delete_receipt: A historic receipt
        :type delete_receipt: bool
        :param update_an_expense_request:
        :type update_an_expense_request: UpdateAnExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_expense_id_put_serialize(
            expense_id=expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            receipt=receipt,
            delete_receipt=delete_receipt,
            update_an_expense_request=update_an_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def expenses_expense_id_put_with_http_info(
        self,
        expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        receipt: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.")] = None,
        delete_receipt: Annotated[Optional[StrictBool], Field(description="A historic receipt")] = None,
        update_an_expense_request: Optional[UpdateAnExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateAnExpenseResponse]:
        """Update an Expense

        Update an existing Expense.

        :param expense_id: (required)
        :type expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param receipt: Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.
        :type receipt: bytearray
        :param delete_receipt: A historic receipt
        :type delete_receipt: bool
        :param update_an_expense_request:
        :type update_an_expense_request: UpdateAnExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_expense_id_put_serialize(
            expense_id=expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            receipt=receipt,
            delete_receipt=delete_receipt,
            update_an_expense_request=update_an_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def expenses_expense_id_put_without_preload_content(
        self,
        expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        receipt: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.")] = None,
        delete_receipt: Annotated[Optional[StrictBool], Field(description="A historic receipt")] = None,
        update_an_expense_request: Optional[UpdateAnExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update an Expense

        Update an existing Expense.

        :param expense_id: (required)
        :type expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param receipt: Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.
        :type receipt: bytearray
        :param delete_receipt: A historic receipt
        :type delete_receipt: bool
        :param update_an_expense_request:
        :type update_an_expense_request: UpdateAnExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_expense_id_put_serialize(
            expense_id=expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            receipt=receipt,
            delete_receipt=delete_receipt,
            update_an_expense_request=update_an_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _expenses_expense_id_put_serialize(
        self,
        expense_id,
        x_com_zoho_subscriptions_organizationid,
        receipt,
        delete_receipt,
        update_an_expense_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if expense_id is not None:
            _path_params['expense_id'] = expense_id
        # process the query parameters
        if receipt is not None:
            
            _query_params.append(('receipt', receipt))
            
        if delete_receipt is not None:
            
            _query_params.append(('delete_receipt', delete_receipt))
            
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter
        if update_an_expense_request is not None:
            _body_params = update_an_expense_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/expenses/{expense_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def expenses_get(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        description: Annotated[Optional[StrictStr], Field(description="Search expenses by description.Variants <code>description_startswith</code> and <code>description_contains</code>. <code>Maximum length [100]</code>")] = None,
        reference_number: Annotated[Optional[StrictStr], Field(description="Search expenses by reference number. Variants <code>reference_number_startswith</code> and <code>reference_number_contains</code>. <code>Maximum length [100]</code>")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Search expenses by expense date. Variants <code>date_start</code>, <code>date_end</code>, <code>date_before</code> and <code>date_after</code>. <code>Date Format [yyyy-mm-dd]</code>")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Search expenses by expense status. Allowed Values <code>unbilled</code>, <code>invoiced</code>, <code>reimbursed</code>, <code>non-billable</code> and <code>billable</code>")] = None,
        amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>")] = None,
        account_name: Annotated[Optional[StrictStr], Field(description="Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code>. <code>Maximum length [100]</code>")] = None,
        customer_name: Annotated[Optional[StrictStr], Field(description="Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code>. <code>Maximum length [100]</code>")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code>")] = None,
        sort_column: Annotated[Optional[StrictStr], Field(description="Sort expenses.Allowed Values <code>date</code>, <code>account_name</code>, <code>total</code>, <code>bcy_total</code>, <code>reference_number</code>, <code>customer_name</code> and <code>created_time</code>")] = None,
        filter_by: Annotated[Optional[StrictStr], Field(description="Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Billable</code>, <code>Status.Nonbillable</code>, <code>Status.Reimbursed</code>, <code>Status.Invoiced</code> and <code>Status.Unbilled</code>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListExpensesResponse:
        """List Expenses

        List all the Expenses with pagination.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param description: Search expenses by description.Variants <code>description_startswith</code> and <code>description_contains</code>. <code>Maximum length [100]</code>
        :type description: str
        :param reference_number: Search expenses by reference number. Variants <code>reference_number_startswith</code> and <code>reference_number_contains</code>. <code>Maximum length [100]</code>
        :type reference_number: str
        :param var_date: Search expenses by expense date. Variants <code>date_start</code>, <code>date_end</code>, <code>date_before</code> and <code>date_after</code>. <code>Date Format [yyyy-mm-dd]</code>
        :type var_date: str
        :param status: Search expenses by expense status. Allowed Values <code>unbilled</code>, <code>invoiced</code>, <code>reimbursed</code>, <code>non-billable</code> and <code>billable</code>
        :type status: str
        :param amount: Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>
        :type amount: float
        :param account_name: Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code>. <code>Maximum length [100]</code>
        :type account_name: str
        :param customer_name: Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code>. <code>Maximum length [100]</code>
        :type customer_name: str
        :param search_text: Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code>
        :type search_text: str
        :param sort_column: Sort expenses.Allowed Values <code>date</code>, <code>account_name</code>, <code>total</code>, <code>bcy_total</code>, <code>reference_number</code>, <code>customer_name</code> and <code>created_time</code>
        :type sort_column: str
        :param filter_by: Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Billable</code>, <code>Status.Nonbillable</code>, <code>Status.Reimbursed</code>, <code>Status.Invoiced</code> and <code>Status.Unbilled</code>
        :type filter_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_get_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            description=description,
            reference_number=reference_number,
            var_date=var_date,
            status=status,
            amount=amount,
            account_name=account_name,
            customer_name=customer_name,
            search_text=search_text,
            sort_column=sort_column,
            filter_by=filter_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListExpensesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def expenses_get_with_http_info(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        description: Annotated[Optional[StrictStr], Field(description="Search expenses by description.Variants <code>description_startswith</code> and <code>description_contains</code>. <code>Maximum length [100]</code>")] = None,
        reference_number: Annotated[Optional[StrictStr], Field(description="Search expenses by reference number. Variants <code>reference_number_startswith</code> and <code>reference_number_contains</code>. <code>Maximum length [100]</code>")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Search expenses by expense date. Variants <code>date_start</code>, <code>date_end</code>, <code>date_before</code> and <code>date_after</code>. <code>Date Format [yyyy-mm-dd]</code>")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Search expenses by expense status. Allowed Values <code>unbilled</code>, <code>invoiced</code>, <code>reimbursed</code>, <code>non-billable</code> and <code>billable</code>")] = None,
        amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>")] = None,
        account_name: Annotated[Optional[StrictStr], Field(description="Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code>. <code>Maximum length [100]</code>")] = None,
        customer_name: Annotated[Optional[StrictStr], Field(description="Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code>. <code>Maximum length [100]</code>")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code>")] = None,
        sort_column: Annotated[Optional[StrictStr], Field(description="Sort expenses.Allowed Values <code>date</code>, <code>account_name</code>, <code>total</code>, <code>bcy_total</code>, <code>reference_number</code>, <code>customer_name</code> and <code>created_time</code>")] = None,
        filter_by: Annotated[Optional[StrictStr], Field(description="Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Billable</code>, <code>Status.Nonbillable</code>, <code>Status.Reimbursed</code>, <code>Status.Invoiced</code> and <code>Status.Unbilled</code>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListExpensesResponse]:
        """List Expenses

        List all the Expenses with pagination.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param description: Search expenses by description.Variants <code>description_startswith</code> and <code>description_contains</code>. <code>Maximum length [100]</code>
        :type description: str
        :param reference_number: Search expenses by reference number. Variants <code>reference_number_startswith</code> and <code>reference_number_contains</code>. <code>Maximum length [100]</code>
        :type reference_number: str
        :param var_date: Search expenses by expense date. Variants <code>date_start</code>, <code>date_end</code>, <code>date_before</code> and <code>date_after</code>. <code>Date Format [yyyy-mm-dd]</code>
        :type var_date: str
        :param status: Search expenses by expense status. Allowed Values <code>unbilled</code>, <code>invoiced</code>, <code>reimbursed</code>, <code>non-billable</code> and <code>billable</code>
        :type status: str
        :param amount: Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>
        :type amount: float
        :param account_name: Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code>. <code>Maximum length [100]</code>
        :type account_name: str
        :param customer_name: Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code>. <code>Maximum length [100]</code>
        :type customer_name: str
        :param search_text: Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code>
        :type search_text: str
        :param sort_column: Sort expenses.Allowed Values <code>date</code>, <code>account_name</code>, <code>total</code>, <code>bcy_total</code>, <code>reference_number</code>, <code>customer_name</code> and <code>created_time</code>
        :type sort_column: str
        :param filter_by: Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Billable</code>, <code>Status.Nonbillable</code>, <code>Status.Reimbursed</code>, <code>Status.Invoiced</code> and <code>Status.Unbilled</code>
        :type filter_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_get_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            description=description,
            reference_number=reference_number,
            var_date=var_date,
            status=status,
            amount=amount,
            account_name=account_name,
            customer_name=customer_name,
            search_text=search_text,
            sort_column=sort_column,
            filter_by=filter_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListExpensesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def expenses_get_without_preload_content(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        description: Annotated[Optional[StrictStr], Field(description="Search expenses by description.Variants <code>description_startswith</code> and <code>description_contains</code>. <code>Maximum length [100]</code>")] = None,
        reference_number: Annotated[Optional[StrictStr], Field(description="Search expenses by reference number. Variants <code>reference_number_startswith</code> and <code>reference_number_contains</code>. <code>Maximum length [100]</code>")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Search expenses by expense date. Variants <code>date_start</code>, <code>date_end</code>, <code>date_before</code> and <code>date_after</code>. <code>Date Format [yyyy-mm-dd]</code>")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Search expenses by expense status. Allowed Values <code>unbilled</code>, <code>invoiced</code>, <code>reimbursed</code>, <code>non-billable</code> and <code>billable</code>")] = None,
        amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>")] = None,
        account_name: Annotated[Optional[StrictStr], Field(description="Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code>. <code>Maximum length [100]</code>")] = None,
        customer_name: Annotated[Optional[StrictStr], Field(description="Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code>. <code>Maximum length [100]</code>")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code>")] = None,
        sort_column: Annotated[Optional[StrictStr], Field(description="Sort expenses.Allowed Values <code>date</code>, <code>account_name</code>, <code>total</code>, <code>bcy_total</code>, <code>reference_number</code>, <code>customer_name</code> and <code>created_time</code>")] = None,
        filter_by: Annotated[Optional[StrictStr], Field(description="Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Billable</code>, <code>Status.Nonbillable</code>, <code>Status.Reimbursed</code>, <code>Status.Invoiced</code> and <code>Status.Unbilled</code>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Expenses

        List all the Expenses with pagination.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param description: Search expenses by description.Variants <code>description_startswith</code> and <code>description_contains</code>. <code>Maximum length [100]</code>
        :type description: str
        :param reference_number: Search expenses by reference number. Variants <code>reference_number_startswith</code> and <code>reference_number_contains</code>. <code>Maximum length [100]</code>
        :type reference_number: str
        :param var_date: Search expenses by expense date. Variants <code>date_start</code>, <code>date_end</code>, <code>date_before</code> and <code>date_after</code>. <code>Date Format [yyyy-mm-dd]</code>
        :type var_date: str
        :param status: Search expenses by expense status. Allowed Values <code>unbilled</code>, <code>invoiced</code>, <code>reimbursed</code>, <code>non-billable</code> and <code>billable</code>
        :type status: str
        :param amount: Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>
        :type amount: float
        :param account_name: Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code>. <code>Maximum length [100]</code>
        :type account_name: str
        :param customer_name: Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code>. <code>Maximum length [100]</code>
        :type customer_name: str
        :param search_text: Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code>
        :type search_text: str
        :param sort_column: Sort expenses.Allowed Values <code>date</code>, <code>account_name</code>, <code>total</code>, <code>bcy_total</code>, <code>reference_number</code>, <code>customer_name</code> and <code>created_time</code>
        :type sort_column: str
        :param filter_by: Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Billable</code>, <code>Status.Nonbillable</code>, <code>Status.Reimbursed</code>, <code>Status.Invoiced</code> and <code>Status.Unbilled</code>
        :type filter_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_get_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            description=description,
            reference_number=reference_number,
            var_date=var_date,
            status=status,
            amount=amount,
            account_name=account_name,
            customer_name=customer_name,
            search_text=search_text,
            sort_column=sort_column,
            filter_by=filter_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListExpensesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _expenses_get_serialize(
        self,
        x_com_zoho_subscriptions_organizationid,
        description,
        reference_number,
        var_date,
        status,
        amount,
        account_name,
        customer_name,
        search_text,
        sort_column,
        filter_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if description is not None:
            
            _query_params.append(('description', description))
            
        if reference_number is not None:
            
            _query_params.append(('reference_number', reference_number))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if amount is not None:
            
            _query_params.append(('amount', amount))
            
        if account_name is not None:
            
            _query_params.append(('account_name', account_name))
            
        if customer_name is not None:
            
            _query_params.append(('customer_name', customer_name))
            
        if search_text is not None:
            
            _query_params.append(('search_text', search_text))
            
        if sort_column is not None:
            
            _query_params.append(('sort_column', sort_column))
            
        if filter_by is not None:
            
            _query_params.append(('filter_by', filter_by))
            
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/expenses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def expenses_post(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        receipt: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.")] = None,
        create_an_expense_request: Optional[CreateAnExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateAnExpenseResponse:
        """Create an Expense

        Create billable or non-billable expense.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param receipt: Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.
        :type receipt: bytearray
        :param create_an_expense_request:
        :type create_an_expense_request: CreateAnExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_post_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            receipt=receipt,
            create_an_expense_request=create_an_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def expenses_post_with_http_info(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        receipt: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.")] = None,
        create_an_expense_request: Optional[CreateAnExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateAnExpenseResponse]:
        """Create an Expense

        Create billable or non-billable expense.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param receipt: Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.
        :type receipt: bytearray
        :param create_an_expense_request:
        :type create_an_expense_request: CreateAnExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_post_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            receipt=receipt,
            create_an_expense_request=create_an_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def expenses_post_without_preload_content(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        receipt: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.")] = None,
        create_an_expense_request: Optional[CreateAnExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an Expense

        Create billable or non-billable expense.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param receipt: Expense receipt file to attach. Allowed Extensions: <code>gif</code>, <code>png</code>, <code>jpeg</code>, <code>jpg</code>, <code>bmp</code> and <code>pdf</code>. It should be sent in multipart/formdata.
        :type receipt: bytearray
        :param create_an_expense_request:
        :type create_an_expense_request: CreateAnExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._expenses_post_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            receipt=receipt,
            create_an_expense_request=create_an_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateAnExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _expenses_post_serialize(
        self,
        x_com_zoho_subscriptions_organizationid,
        receipt,
        create_an_expense_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if receipt is not None:
            
            _query_params.append(('receipt', receipt))
            
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter
        if create_an_expense_request is not None:
            _body_params = create_an_expense_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/expenses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_expenses.models.create_an_expense_request import CreateAnExpenseRequest

class TestCreateAnExpenseRequest(unittest.TestCase):
    """CreateAnExpenseRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateAnExpenseRequest:
        """Test CreateAnExpenseRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateAnExpenseRequest`
        """
        model = CreateAnExpenseRequest()
        if include_optional:
            return CreateAnExpenseRequest(
                account_id = '982000000561057',
                var_date = '2013-11-18',
                amount = 112.5,
                tax_id = '982000000566007',
                is_inclusive_tax = False,
                source_of_supply = 'AP',
                destination_of_supply = 'TN',
                hsn_or_sac = '80540',
                gst_no = '22AAAAA0000A1Z5',
                reverse_charge_tax_id = '982000000561063',
                custom_fields = [
                    ls_zoho_billing_expenses.models.custom_fields_inner.custom_fields_inner(
                        customfield_id = 46000000012845, 
                        value = 'Normal', )
                    ],
                line_items = [
                    ls_zoho_billing_expenses.models.line_items_inner.line_items_inner(
                        line_item_id = '10763000000140068', 
                        account_id = '982000000561057', 
                        description = 'Marketing', 
                        amount = 112.5, 
                        tax_id = '982000000566007', 
                        item_order = '1', 
                        product_type = 'goods', 
                        acquisition_vat_id = ' ', 
                        reverse_charge_vat_id = ' ', 
                        reverse_charge_tax_id = '982000000561063', 
                        tax_exemption_code = '', 
                        tax_exemption_id = '982000000561067', )
                    ],
                taxes = [
                    ls_zoho_billing_expenses.models.taxes_inner.taxes_inner(
                        tax_id = '982000000566007', 
                        tax_amount = 11.85, )
                    ],
                is_billable = True,
                reference_number = '#562SD23R4',
                description = 'Marketing',
                customer_id = '982000000567001',
                currency_id = '982000000567001',
                exchange_rate = 1,
                project_id = '982000000567226',
                mileage_type = 'non_mileage',
                vat_treatment = 'overseas',
                product_type = 'goods',
                acquisition_vat_id = ' ',
                reverse_charge_vat_id = ' ',
                start_reading = 1.337,
                end_reading = 1.337,
                distance = ' ',
                mileage_unit = ' ',
                mileage_rate = 1.337,
                employee_id = ' ',
                vehicle_type = ' ',
                can_reclaim_vat_on_mileage = ' ',
                fuel_type = ' ',
                engine_capacity_range = ' '
            )
        else:
            return CreateAnExpenseRequest(
                account_id = '982000000561057',
                amount = 112.5,
        )
        """

    def testCreateAnExpenseRequest(self):
        """Test CreateAnExpenseRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

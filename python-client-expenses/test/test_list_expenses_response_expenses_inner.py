# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_expenses.models.list_expenses_response_expenses_inner import ListExpensesResponseExpensesInner

class TestListExpensesResponseExpensesInner(unittest.TestCase):
    """ListExpensesResponseExpensesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListExpensesResponseExpensesInner:
        """Test ListExpensesResponseExpensesInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListExpensesResponseExpensesInner`
        """
        model = ListExpensesResponseExpensesInner()
        if include_optional:
            return ListExpensesResponseExpensesInner(
                expense_id = '982000000030049',
                var_date = '2013-11-18',
                account_name = 'Rent',
                description = 'Marketing',
                currency_id = '982000000567001',
                currency_code = 'USD',
                bcy_total = 100,
                bcy_total_without_tax = 100,
                total = 100,
                total_without_tax = 100,
                is_billable = True,
                reference_number = '#562SD23R4',
                customer_id = '982000000567001',
                customer_name = 'Bowman & Co',
                status = 'unbilled',
                custom_fields = [
                    ls_zoho_billing_expenses.models.custom_fields_inner.custom_fields_inner(
                        customfield_id = 46000000012845, 
                        value = 'Normal', )
                    ],
                created_time = '2013-11-18T02:17:40-0800',
                last_modified_time = '2013-12-18T02:17:40-0800',
                expense_receipt_name = ' ',
                mileage_rate = 1.337,
                mileage_unit = ' ',
                expense_type = 'non-mileage',
                start_reading = 1.337,
                end_reading = 1.337
            )
        else:
            return ListExpensesResponseExpensesInner(
        )
        """

    def testListExpensesResponseExpensesInner(self):
        """Test ListExpensesResponseExpensesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_expenses.api.expenses_api import ExpensesApi


class TestExpensesApi(unittest.TestCase):
    """ExpensesApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ExpensesApi()

    def tearDown(self) -> None:
        pass

    def test_expenses_expense_id_delete(self) -> None:
        """Test case for expenses_expense_id_delete

        Delete an Expense
        """
        pass

    def test_expenses_expense_id_get(self) -> None:
        """Test case for expenses_expense_id_get

        Retrieve an Expense
        """
        pass

    def test_expenses_expense_id_put(self) -> None:
        """Test case for expenses_expense_id_put

        Update an Expense
        """
        pass

    def test_expenses_get(self) -> None:
        """Test case for expenses_get

        List Expenses
        """
        pass

    def test_expenses_post(self) -> None:
        """Test case for expenses_post

        Create an Expense
        """
        pass


if __name__ == '__main__':
    unittest.main()

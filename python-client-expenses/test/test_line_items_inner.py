# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_expenses.models.line_items_inner import LineItemsInner

class TestLineItemsInner(unittest.TestCase):
    """LineItemsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LineItemsInner:
        """Test LineItemsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LineItemsInner`
        """
        model = LineItemsInner()
        if include_optional:
            return LineItemsInner(
                line_item_id = '10763000000140068',
                account_id = '982000000561057',
                description = 'Marketing',
                amount = 112.5,
                tax_id = '982000000566007',
                item_order = '1',
                product_type = 'goods',
                acquisition_vat_id = ' ',
                reverse_charge_vat_id = ' ',
                reverse_charge_tax_id = '982000000561063',
                tax_exemption_code = '',
                tax_exemption_id = '982000000561067'
            )
        else:
            return LineItemsInner(
        )
        """

    def testLineItemsInner(self):
        """Test LineItemsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

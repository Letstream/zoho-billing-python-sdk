# coding: utf-8

"""
    Expenses

    An expense represents the money that you spend, with the ultimate target of generating revenue for your organization.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Expense does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5001</span></td><td>Expenses that were converted to an invoice cannot be deleted</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr><td><span style=\"color:#FF0000;\"> 5019</span></td><td>Contact cannot be changed for an invoiced expense</td></tr><tr><td><span style=\"color:#FF0000;\"> 5032</span></td><td>You cannot make this expense non-billable as it has been already invoiced</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_expenses.models.create_an_expense_response import CreateAnExpenseResponse

class TestCreateAnExpenseResponse(unittest.TestCase):
    """CreateAnExpenseResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateAnExpenseResponse:
        """Test CreateAnExpenseResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateAnExpenseResponse`
        """
        model = CreateAnExpenseResponse()
        if include_optional:
            return CreateAnExpenseResponse(
                code = 0,
                message = 'The expense has been recorded.',
                expense = ls_zoho_billing_expenses.models.expense_response.expense-response(
                    expense_id = '982000000030049', 
                    transaction_id = ' ', 
                    transaction_type = 'expense', 
                    expense_item_id = '982000000567220', 
                    gst_no = '22AAAAA0000A1Z5', 
                    gst_treatment = 'business_gst', 
                    destination_of_supply = 'TN', 
                    destination_of_supply_state = 'TN', 
                    hsn_or_sac = '80540', 
                    source_of_supply = 'AP', 
                    paid_through_account_name = 'Petty Cash', 
                    vat_reg_no = '', 
                    reverse_charge_tax_id = '982000000561063', 
                    reverse_charge_tax_name = 'intra', 
                    reverse_charge_tax_percentage = 10, 
                    reverse_charge_tax_amount = 12, 
                    tax_amount = 11.85, 
                    is_itemized_expense = False, 
                    is_pre_gst = 'fasle', 
                    trip_id = '', 
                    trip_number = '', 
                    reverse_charge_vat_total = 1.2, 
                    acquisition_vat_total = 0, 
                    acquisition_vat_summary = [
                        ls_zoho_billing_expenses.models.acquisition_vat_summary_inner.acquisition_vat_summary_inner(
                            tax = ls_zoho_billing_expenses.models.tax.tax(
                                tax_name = 'SalesTax', 
                                tax_amount = 11.85, ), )
                        ], 
                    reverse_charge_vat_summary = [
                        ls_zoho_billing_expenses.models.acquisition_vat_summary_inner.acquisition_vat_summary_inner()
                        ], 
                    account_id = '982000000561057', 
                    account_name = 'Rent', 
                    date = '2013-11-18', 
                    tax_id = '982000000566007', 
                    tax_name = 'SalesTax', 
                    tax_percentage = 10.5, 
                    currency_id = '982000000567001', 
                    currency_code = 'USD', 
                    exchange_rate = 1, 
                    sub_total = 90, 
                    total = 100, 
                    bcy_total = 100, 
                    amount = 112.5, 
                    is_inclusive_tax = False, 
                    reference_number = '#562SD23R4', 
                    description = 'Marketing', 
                    is_billable = True, 
                    is_personal = False, 
                    customer_id = '982000000567001', 
                    customer_name = 'Bowman & Co', 
                    expense_receipt_name = ' ', 
                    expense_receipt_type = ' ', 
                    last_modified_time = '2013-12-18T02:17:40-0800', 
                    status = 'unbilled', 
                    custom_fields = [
                        ls_zoho_billing_expenses.models.custom_fields_inner.custom_fields_inner(
                            customfield_id = 46000000012845, 
                            value = 'Normal', )
                        ], 
                    invoice_id = ' ', 
                    invoice_number = ' ', 
                    project_id = '982000000567226', 
                    project_name = ' ', 
                    mileage_rate = 1.337, 
                    mileage_type = 'non_mileage', 
                    expense_type = 'non-mileage', 
                    start_reading = 1.337, 
                    end_reading = 1.337, )
            )
        else:
            return CreateAnExpenseResponse(
        )
        """

    def testCreateAnExpenseResponse(self):
        """Test CreateAnExpenseResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Items

    A product is the item offered for sale. It can be a commodity. Based on the type of your business, you can offer one or more goods.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1000</span></td><td>The item name already exist</td></tr><tr><tr><td><span style=\"color:#FF0000;\"> 2006</span></td><td>Item does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2049</span></td><td>Items which are a part of other transactions cannot be deleted. Instead, mark them as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 2076</span></td><td>Product type cannot be changed for Items having transactions</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_items.models.custom_fields_inner import CustomFieldsInner
from ls_zoho_billing_items.models.item_tax_preferences_inner import ItemTaxPreferencesInner
from typing import Optional, Set
from typing_extensions import Self

class CreateAnItemRequest(BaseModel):
    """
    CreateAnItemRequest
    """ # noqa: E501
    name: StrictStr = Field(description="Name of the item. <code>Maximum length of the name [100]</code>")
    rate: Union[StrictFloat, StrictInt] = Field(description="Per unit price of an item.")
    description: Optional[StrictStr] = Field(default=None, description="Description for the item. <code>Maximum characters to be used for describing the item [2000]</code>")
    tax_id: Optional[StrictStr] = Field(default=None, description="ID of the tax to be associated to the item.")
    sku: Optional[StrictStr] = Field(default=None, description="SKU or the Stock Keeping Unit value of an item, should be unique throughout the product")
    product_type: Optional[StrictStr] = Field(default=None, description="Specify the type of an item. It can be either <code> goods</code> or <code> service</code>")
    is_taxable: Optional[StrictBool] = Field(default=None, description="Boolean to track the taxability of the item.")
    tax_exemption_id: Optional[StrictStr] = Field(default=None, description="ID of the tax exemption applied. Mandatory, if <code>is_taxable</code> is false.")
    hsn_or_sac: Optional[StrictStr] = Field(default=None, description="HSN Code")
    sat_item_key_code: Optional[StrictStr] = Field(default=None, description="Add SAT Item Key Code for your goods/services. Download the <a href= http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/catCFDI_V_4_07122022.xls  >CFDI Catalogs.</a>")
    unitkey_code: Optional[StrictStr] = Field(default=None, description="Add Unit Key Code for your goods/services. Download the <a href= http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/catCFDI_V_4_07122022.xls  >CFDI Catalogs.</a>")
    item_tax_preferences: Optional[List[ItemTaxPreferencesInner]] = None
    custom_fields: Optional[List[CustomFieldsInner]] = Field(default=None, description="Custom fields for an item.")
    __properties: ClassVar[List[str]] = ["name", "rate", "description", "tax_id", "sku", "product_type", "is_taxable", "tax_exemption_id", "hsn_or_sac", "sat_item_key_code", "unitkey_code", "item_tax_preferences", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAnItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in item_tax_preferences (list)
        _items = []
        if self.item_tax_preferences:
            for _item_item_tax_preferences in self.item_tax_preferences:
                if _item_item_tax_preferences:
                    _items.append(_item_item_tax_preferences.to_dict())
            _dict['item_tax_preferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAnItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "rate": obj.get("rate"),
            "description": obj.get("description"),
            "tax_id": obj.get("tax_id"),
            "sku": obj.get("sku"),
            "product_type": obj.get("product_type"),
            "is_taxable": obj.get("is_taxable"),
            "tax_exemption_id": obj.get("tax_exemption_id"),
            "hsn_or_sac": obj.get("hsn_or_sac"),
            "sat_item_key_code": obj.get("sat_item_key_code"),
            "unitkey_code": obj.get("unitkey_code"),
            "item_tax_preferences": [ItemTaxPreferencesInner.from_dict(_item) for _item in obj["item_tax_preferences"]] if obj.get("item_tax_preferences") is not None else None,
            "custom_fields": [CustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None
        })
        return _obj



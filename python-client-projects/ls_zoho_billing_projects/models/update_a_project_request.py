# coding: utf-8

"""
    Projects

    A project is a series of tasks performed over a period of time, to achieve certain targets. There can be many number of people working on a single project and a project may consist of single or multiple tasks. A project is billed and charged upon a customer whom the project was taken up for.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Project does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 20004</span></td><td>Please ensure that the amount is not negative</td></tr><tr><td><span style=\"color:#FF0000;\"> 20077</span></td><td>Expense has been recorded for this project. Hence, it cannot be deleted</td></tr></tbody></table></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ls_zoho_billing_projects.models.create_a_project_request_tasks_inner import CreateAProjectRequestTasksInner
from ls_zoho_billing_projects.models.create_a_project_request_users_inner import CreateAProjectRequestUsersInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateAProjectRequest(BaseModel):
    """
    UpdateAProjectRequest
    """ # noqa: E501
    project_name: StrictStr = Field(description="Name of the project. <code>Maximum length [100]</code>")
    customer_id: StrictStr = Field(description="ID of the customer.")
    description: Optional[StrictStr] = Field(default=None, description="Project description. <code>Maximum length [500]</code>")
    billing_type: StrictStr = Field(description="The way you bill your customer. Allowed Values: <code>fixed_cost_for_project</code>, <code>based_on_project_hours</code>, <code>based_on_staff_hours</code> and <code>based_on_task_hours</code>")
    rate: Optional[StrictStr] = Field(default=None, description="Hourly rate for a task. Mandatory for projects whose billing_type is either <code>fixed_cost_for_project\"</code> or <code>\"based_on_project_hours\"</code>")
    budget_type: Optional[StrictStr] = Field(default=None, description="The way you budget. Allowed Values: <code>total_project_cost</code>, <code>total_project_hours</code>, <code>hours_per_task</code> and <code>hours_per_staff</code>")
    budget_hours: Optional[StrictStr] = Field(default=None, description="Task budget hours")
    budget_amount: Optional[StrictStr] = Field(default=None, description="Give value, if you are estimating total project cost.")
    tasks: Optional[List[CreateAProjectRequestTasksInner]] = Field(default=None, description="Tasks comprising a project")
    users: Optional[List[CreateAProjectRequestUsersInner]] = Field(default=None, description="Users of a project")
    __properties: ClassVar[List[str]] = ["project_name", "customer_id", "description", "billing_type", "rate", "budget_type", "budget_hours", "budget_amount", "tasks", "users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAProjectRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item_tasks in self.tasks:
                if _item_tasks:
                    _items.append(_item_tasks.to_dict())
            _dict['tasks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAProjectRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_name": obj.get("project_name"),
            "customer_id": obj.get("customer_id"),
            "description": obj.get("description"),
            "billing_type": obj.get("billing_type"),
            "rate": obj.get("rate"),
            "budget_type": obj.get("budget_type"),
            "budget_hours": obj.get("budget_hours"),
            "budget_amount": obj.get("budget_amount"),
            "tasks": [CreateAProjectRequestTasksInner.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None,
            "users": [CreateAProjectRequestUsersInner.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Projects

    A project is a series of tasks performed over a period of time, to achieve certain targets. There can be many number of people working on a single project and a project may consist of single or multiple tasks. A project is billed and charged upon a customer whom the project was taken up for.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Project does not exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 20004</span></td><td>Please ensure that the amount is not negative</td></tr><tr><td><span style=\"color:#FF0000;\"> 20077</span></td><td>Expense has been recorded for this project. Hence, it cannot be deleted</td></tr></tbody></table></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_projects.models.project_response_tasks_inner import ProjectResponseTasksInner
from ls_zoho_billing_projects.models.project_response_users_inner import ProjectResponseUsersInner
from typing import Optional, Set
from typing_extensions import Self

class ProjectResponse(BaseModel):
    """
    Name of the project
    """ # noqa: E501
    project_id: Optional[StrictStr] = Field(default=None, description="Unoque ID of the project")
    project_name: Optional[StrictStr] = Field(default=None, description="Name of the project. <code>Maximum length [100]</code>")
    customer_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the customer.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the client of the project")
    currency_code: Optional[StrictStr] = Field(default=None, description="Code to denote currency")
    description: Optional[StrictStr] = Field(default=None, description="Project Description - A short note on the project details")
    status: Optional[StrictStr] = Field(default=None, description="Project Status")
    billing_type: Optional[StrictStr] = Field(default=None, description="The way you bill your customer. Allowed Values: <code>fixed_cost_for_project</code>, <code>based_on_project_hours</code>, <code>based_on_staff_hours</code> and <code>based_on_task_hours</code>")
    rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total project cost")
    budget_type: Optional[StrictStr] = Field(default=None, description="Project budject type")
    total_hours: Optional[StrictStr] = Field(default=None, description="Total hours spent on project")
    total_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total cost of the project")
    billed_hours: Optional[StrictStr] = Field(default=None, description="Total duration/hours of a project that is billed")
    billed_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total billable amount of the project")
    un_billed_hours: Optional[StrictStr] = Field(default=None, description="Hours of the project that cannot be billed")
    un_billed_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total value of Unbilled expense of the project")
    billable_hours: Optional[StrictStr] = Field(default=None, description="Hours charged for, in total project hours")
    billable_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total billed amount")
    non_billable_hours: Optional[StrictStr] = Field(default=None, description="Non-billable project hours")
    non_billable_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total value of non-billable expense")
    created_time: Optional[StrictStr] = Field(default=None, description="Time of project creation")
    show_in_dashboard: Optional[StrictBool] = Field(default=None, description="To check if dashboard view is available for project")
    tasks: Optional[List[ProjectResponseTasksInner]] = Field(default=None, description="Tasks comprising a project")
    users: Optional[List[ProjectResponseUsersInner]] = Field(default=None, description="Users of a project")
    __properties: ClassVar[List[str]] = ["project_id", "project_name", "customer_id", "customer_name", "currency_code", "description", "status", "billing_type", "rate", "budget_type", "total_hours", "total_amount", "billed_hours", "billed_amount", "un_billed_hours", "un_billed_amount", "billable_hours", "billable_amount", "non_billable_hours", "non_billable_amount", "created_time", "show_in_dashboard", "tasks", "users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item_tasks in self.tasks:
                if _item_tasks:
                    _items.append(_item_tasks.to_dict())
            _dict['tasks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "project_name": obj.get("project_name"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "currency_code": obj.get("currency_code"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "billing_type": obj.get("billing_type"),
            "rate": obj.get("rate"),
            "budget_type": obj.get("budget_type"),
            "total_hours": obj.get("total_hours"),
            "total_amount": obj.get("total_amount"),
            "billed_hours": obj.get("billed_hours"),
            "billed_amount": obj.get("billed_amount"),
            "un_billed_hours": obj.get("un_billed_hours"),
            "un_billed_amount": obj.get("un_billed_amount"),
            "billable_hours": obj.get("billable_hours"),
            "billable_amount": obj.get("billable_amount"),
            "non_billable_hours": obj.get("non_billable_hours"),
            "non_billable_amount": obj.get("non_billable_amount"),
            "created_time": obj.get("created_time"),
            "show_in_dashboard": obj.get("show_in_dashboard"),
            "tasks": [ProjectResponseTasksInner.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None,
            "users": [ProjectResponseUsersInner.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None
        })
        return _obj



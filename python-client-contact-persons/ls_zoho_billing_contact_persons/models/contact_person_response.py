# coding: utf-8

"""
    Contact-Persons

    A contact person is customerâ€™s additional point of contact.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContactPersonResponse(BaseModel):
    """
    ContactPersonResponse
    """ # noqa: E501
    contactperson_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated by the server.This can be used as an identifier.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the contact person.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the contact person.")
    email: Optional[StrictStr] = Field(default=None, description="Email ID of the contact person to whom notifications regarding the subscription needs to be sent.")
    mobile: Optional[StrictStr] = Field(default=None, description="Mobile number of the contact person.")
    phone: Optional[StrictStr] = Field(default=None, description="Landline or fixed line number of the contact person.")
    fax: Optional[StrictStr] = Field(default=None, description="Customer's fax number.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer the contact person is associated with.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time at which the contact person was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time at which the contact person details were last updated.")
    __properties: ClassVar[List[str]] = ["contactperson_id", "first_name", "last_name", "email", "mobile", "phone", "fax", "customer_id", "created_time", "updated_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactPersonResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactPersonResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contactperson_id": obj.get("contactperson_id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "mobile": obj.get("mobile"),
            "phone": obj.get("phone"),
            "fax": obj.get("fax"),
            "customer_id": obj.get("customer_id"),
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time")
        })
        return _obj



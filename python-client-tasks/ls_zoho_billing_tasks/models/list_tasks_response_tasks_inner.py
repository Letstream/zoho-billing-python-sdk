# coding: utf-8

"""
    Tasks

    A project comprises of a single or multiple tasks that need to be completed. You need to add a task to the project before you log time.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ListTasksResponseTasksInner(BaseModel):
    """
    ListTasksResponseTasksInner
    """ # noqa: E501
    project_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the project generated by the server.")
    task_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the task generated by the server.")
    currency_id: Optional[StrictStr] = Field(default=None, description="The currenct ID of the currency")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer for whom the task is created.")
    task_name: Optional[StrictStr] = Field(default=None, description="The name of the task. <code>Maximum length [100]</code>")
    project_name: Optional[StrictStr] = Field(default=None, description="The name of the project")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer to whom the task is created.")
    billed_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total hours that are billed.")
    log_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total hours logged in the project.")
    un_billed_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total hours that are unbilled.")
    __properties: ClassVar[List[str]] = ["project_id", "task_id", "currency_id", "customer_id", "task_name", "project_name", "customer_name", "billed_hours", "log_time", "un_billed_hours"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListTasksResponseTasksInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListTasksResponseTasksInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "task_id": obj.get("task_id"),
            "currency_id": obj.get("currency_id"),
            "customer_id": obj.get("customer_id"),
            "task_name": obj.get("task_name"),
            "project_name": obj.get("project_name"),
            "customer_name": obj.get("customer_name"),
            "billed_hours": obj.get("billed_hours"),
            "log_time": obj.get("log_time"),
            "un_billed_hours": obj.get("un_billed_hours")
        })
        return _obj



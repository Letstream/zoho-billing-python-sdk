# coding: utf-8

"""
    Time Entries

    Time entries are various entries of time made by users in a project, based on the time they spent on a project, in a task.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>This task does not exist in this project. Hence, this timesheet entry cannot be made</td></tr><tr><td><span style=\"color:#FF0000;\"> 20050</span></td><td>This timesheet entry is already being timed</td></tr><tr><td><span style=\"color:#FF0000;\"> 20054</span></td><td>This timesheet is being timed. Hence, it cannot be edited</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ls_zoho_billing_time_entries.models.update_time_entry_response_time_entry import UpdateTimeEntryResponseTimeEntry
from typing import Optional, Set
from typing_extensions import Self

class StopTimerResponse(BaseModel):
    """
    StopTimerResponse
    """ # noqa: E501
    code: Optional[StrictInt] = None
    message: Optional[StrictStr] = None
    time_entry: Optional[UpdateTimeEntryResponseTimeEntry] = None
    __properties: ClassVar[List[str]] = ["code", "message", "time_entry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StopTimerResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "code",
            "message",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_entry
        if self.time_entry:
            _dict['time_entry'] = self.time_entry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StopTimerResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "message": obj.get("message"),
            "time_entry": UpdateTimeEntryResponseTimeEntry.from_dict(obj["time_entry"]) if obj.get("time_entry") is not None else None
        })
        return _obj



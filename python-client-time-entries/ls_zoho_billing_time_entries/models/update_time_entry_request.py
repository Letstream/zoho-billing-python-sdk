# coding: utf-8

"""
    Time Entries

    Time entries are various entries of time made by users in a project, based on the time they spent on a project, in a task.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>This task does not exist in this project. Hence, this timesheet entry cannot be made</td></tr><tr><td><span style=\"color:#FF0000;\"> 20050</span></td><td>This timesheet entry is already being timed</td></tr><tr><td><span style=\"color:#FF0000;\"> 20054</span></td><td>This timesheet is being timed. Hence, it cannot be edited</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateTimeEntryRequest(BaseModel):
    """
    UpdateTimeEntryRequest
    """ # noqa: E501
    project_id: StrictStr = Field(description="ID of the project.")
    task_id: StrictStr = Field(description="ID of the task.")
    user_id: StrictStr = Field(description="ID of the user.")
    log_date: StrictStr = Field(description="Date on which the user spent on the task. <code>Date Format [yyyy-mm-dd]</code>")
    log_time: Optional[StrictStr] = Field(default=None, description="Time the user spent on this task. Either send this attribute or begin and end time attributes. <code>Time Format [HH:mm]</code>")
    begin_time: Optional[StrictStr] = Field(default=None, description="Time the user started working on this task. <code>Time Format [HH:mm]</code>")
    end_time: Optional[StrictStr] = Field(default=None, description="Time the user stopped working on this task. <code>Time Format [HH:mm]</code>")
    is_billable: Optional[StrictBool] = Field(default=None, description="Whether it is billable or not.")
    notes: Optional[StrictStr] = Field(default=None, description="Description of the work done. <code>Maximum length [500]</code>")
    start_timer: Optional[StrictStr] = Field(default=None, description="Start timer.")
    __properties: ClassVar[List[str]] = ["project_id", "task_id", "user_id", "log_date", "log_time", "begin_time", "end_time", "is_billable", "notes", "start_timer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateTimeEntryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateTimeEntryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "task_id": obj.get("task_id"),
            "user_id": obj.get("user_id"),
            "log_date": obj.get("log_date"),
            "log_time": obj.get("log_time"),
            "begin_time": obj.get("begin_time"),
            "end_time": obj.get("end_time"),
            "is_billable": obj.get("is_billable"),
            "notes": obj.get("notes"),
            "start_timer": obj.get("start_timer")
        })
        return _obj



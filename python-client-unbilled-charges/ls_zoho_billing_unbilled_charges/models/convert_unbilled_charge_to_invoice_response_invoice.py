# coding: utf-8

"""
    Unbilled-Charges

    These are charges to be converted into an invoice at a later point of time, either by manual intervention or during renewal.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_unbilled_charges.models.billing_address import BillingAddress
from ls_zoho_billing_unbilled_charges.models.coupons_inner import CouponsInner
from ls_zoho_billing_unbilled_charges.models.credits_inner import CreditsInner
from ls_zoho_billing_unbilled_charges.models.invoice_items_inner import InvoiceItemsInner
from ls_zoho_billing_unbilled_charges.models.payments_inner import PaymentsInner
from ls_zoho_billing_unbilled_charges.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

class ConvertUnbilledChargeToInvoiceResponseInvoice(BaseModel):
    """
    ConvertUnbilledChargeToInvoiceResponseInvoice
    """ # noqa: E501
    invoice_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for an invoice.")
    number: Optional[StrictStr] = Field(default=None, description="Unique number (starts with INV) generated for display in interface.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the unbilled charge. It can be <code>invoiced</code>, <code>open</code>")
    invoice_date: Optional[StrictStr] = Field(default=None, description="The date on which the invoice is raised.")
    due_date: Optional[StrictStr] = Field(default=None, description="Date on which the invoice is due. If the invoice is not fully paid on or before this date, the status of the invoice will be changed to <code>overdue</code>. If the invoice is only partially paid, its status will be <code>partially_paid</code>.")
    payment_expected_date: Optional[StrictStr] = Field(default=None, description="A date to specify the expected payment date.")
    ach_payment_initiated: Optional[StrictBool] = Field(default=None, description="Set to true if ACH payment is initiated.")
    transaction_type: Optional[StrictStr] = Field(default=None, description="Type of the transaction made.")
    customer_id: Optional[List[StrictStr]] = Field(default=None, description="Customer ID of the customer to whom the unbilled charge was raised.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer to whom the unbilled charge was raised.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    invoice_items: Optional[List[InvoiceItemsInner]] = None
    coupons: Optional[List[CouponsInner]] = Field(default=None, description="The array of objects which contains the details of the added coupon. <code>coupon_code</code> and <code>discount_amount</code> are applied to the total.")
    credits: Optional[List[CreditsInner]] = None
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount to be paid. This would be the sum of individual costs of all items.")
    payment_made: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Payments can be made in multiple instalments. payment_made refers to the amount paid for the invoice in the respective instalment.")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice.")
    credits_applied: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Credits applied for the invoice.")
    write_off_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice that is written off.")
    payments: Optional[List[PaymentsInner]] = None
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code in which the payment is made.")
    currency_symbol: Optional[StrictStr] = Field(default=None, description="Customer's currency symbol.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time when the unbilled charge was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time when the unbilled charge details were last updated.")
    salesperson_id: Optional[StrictStr] = Field(default=None, description="Unique Id to denote the sales person.")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of the sales person associated with the invoice for offline payments.")
    invoice_url: Optional[StrictStr] = Field(default=None, description="Url which corresponds to the invoice.")
    billing_address: Optional[BillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    __properties: ClassVar[List[str]] = ["invoice_id", "number", "status", "invoice_date", "due_date", "payment_expected_date", "ach_payment_initiated", "transaction_type", "customer_id", "customer_name", "email", "invoice_items", "coupons", "credits", "total", "payment_made", "balance", "credits_applied", "write_off_amount", "payments", "currency_code", "currency_symbol", "created_time", "updated_time", "salesperson_id", "salesperson_name", "invoice_url", "billing_address", "shipping_address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConvertUnbilledChargeToInvoiceResponseInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item_invoice_items in self.invoice_items:
                if _item_invoice_items:
                    _items.append(_item_invoice_items.to_dict())
            _dict['invoice_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coupons (list)
        _items = []
        if self.coupons:
            for _item_coupons in self.coupons:
                if _item_coupons:
                    _items.append(_item_coupons.to_dict())
            _dict['coupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credits (list)
        _items = []
        if self.credits:
            for _item_credits in self.credits:
                if _item_credits:
                    _items.append(_item_credits.to_dict())
            _dict['credits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item_payments in self.payments:
                if _item_payments:
                    _items.append(_item_payments.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConvertUnbilledChargeToInvoiceResponseInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoice_id": obj.get("invoice_id"),
            "number": obj.get("number"),
            "status": obj.get("status"),
            "invoice_date": obj.get("invoice_date"),
            "due_date": obj.get("due_date"),
            "payment_expected_date": obj.get("payment_expected_date"),
            "ach_payment_initiated": obj.get("ach_payment_initiated"),
            "transaction_type": obj.get("transaction_type"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "email": obj.get("email"),
            "invoice_items": [InvoiceItemsInner.from_dict(_item) for _item in obj["invoice_items"]] if obj.get("invoice_items") is not None else None,
            "coupons": [CouponsInner.from_dict(_item) for _item in obj["coupons"]] if obj.get("coupons") is not None else None,
            "credits": [CreditsInner.from_dict(_item) for _item in obj["credits"]] if obj.get("credits") is not None else None,
            "total": obj.get("total"),
            "payment_made": obj.get("payment_made"),
            "balance": obj.get("balance"),
            "credits_applied": obj.get("credits_applied"),
            "write_off_amount": obj.get("write_off_amount"),
            "payments": [PaymentsInner.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol"),
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time"),
            "salesperson_id": obj.get("salesperson_id"),
            "salesperson_name": obj.get("salesperson_name"),
            "invoice_url": obj.get("invoice_url"),
            "billing_address": BillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None
        })
        return _obj



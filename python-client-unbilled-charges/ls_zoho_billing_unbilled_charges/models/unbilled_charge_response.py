# coding: utf-8

"""
    Unbilled-Charges

    These are charges to be converted into an invoice at a later point of time, either by manual intervention or during renewal.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_unbilled_charges.models.billing_address import BillingAddress
from ls_zoho_billing_unbilled_charges.models.coupons_inner import CouponsInner
from ls_zoho_billing_unbilled_charges.models.shipping_address import ShippingAddress
from ls_zoho_billing_unbilled_charges.models.unbilled_charge_items_inner import UnbilledChargeItemsInner
from typing import Optional, Set
from typing_extensions import Self

class UnbilledChargeResponse(BaseModel):
    """
    UnbilledChargeResponse
    """ # noqa: E501
    unbilled_charge_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for an unbilled charge.")
    number: Optional[StrictStr] = Field(default=None, description="Unique number (starts with UNBILL) generated for display in interface.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the unbilled charge. It can be <code>invoiced</code>, <code>open</code>")
    unbilled_charge_date: Optional[StrictStr] = Field(default=None, description="The date on which the unbilled charge was raised.")
    customer_id: Optional[List[StrictStr]] = Field(default=None, description="Customer ID of the customer to whom the unbilled charge was raised.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer to whom the unbilled charge was raised.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    unbilled_charge_items: Optional[List[UnbilledChargeItemsInner]] = Field(default=None, description="Multiple items can be added as unbilled charges for a subscription : buy one time addon, add charge.")
    coupons: Optional[List[CouponsInner]] = Field(default=None, description="The array of objects which contains the details of the added coupon. <code>coupon_code</code> and <code>discount_amount</code> are applied to the total.")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount to be paid. This would be the sum of individual costs of all items.")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code in which the payment is made.")
    currency_symbol: Optional[StrictStr] = Field(default=None, description="Customer's currency symbol.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time when the unbilled charge was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time when the unbilled charge details were last updated.")
    billing_address: Optional[BillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    __properties: ClassVar[List[str]] = ["unbilled_charge_id", "number", "status", "unbilled_charge_date", "customer_id", "customer_name", "email", "unbilled_charge_items", "coupons", "total", "currency_code", "currency_symbol", "created_time", "updated_time", "billing_address", "shipping_address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnbilledChargeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in unbilled_charge_items (list)
        _items = []
        if self.unbilled_charge_items:
            for _item_unbilled_charge_items in self.unbilled_charge_items:
                if _item_unbilled_charge_items:
                    _items.append(_item_unbilled_charge_items.to_dict())
            _dict['unbilled_charge_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coupons (list)
        _items = []
        if self.coupons:
            for _item_coupons in self.coupons:
                if _item_coupons:
                    _items.append(_item_coupons.to_dict())
            _dict['coupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnbilledChargeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unbilled_charge_id": obj.get("unbilled_charge_id"),
            "number": obj.get("number"),
            "status": obj.get("status"),
            "unbilled_charge_date": obj.get("unbilled_charge_date"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "email": obj.get("email"),
            "unbilled_charge_items": [UnbilledChargeItemsInner.from_dict(_item) for _item in obj["unbilled_charge_items"]] if obj.get("unbilled_charge_items") is not None else None,
            "coupons": [CouponsInner.from_dict(_item) for _item in obj["coupons"]] if obj.get("coupons") is not None else None,
            "total": obj.get("total"),
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol"),
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time"),
            "billing_address": BillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None
        })
        return _obj



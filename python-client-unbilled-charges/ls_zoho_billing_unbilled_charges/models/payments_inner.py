# coding: utf-8

"""
    Unbilled-Charges

    These are charges to be converted into an invoice at a later point of time, either by manual intervention or during renewal.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PaymentsInner(BaseModel):
    """
    PaymentsInner
    """ # noqa: E501
    payment_id: Optional[StrictStr] = Field(default=None, description="The payment ID of the payment made for the invoice.")
    payment_mode: Optional[StrictStr] = Field(default=None, description="The mode in which payment is made for the invoice. This can be <code>check</code>, <code>cash</code>, <code>creditcard</code>, <code>banktransfer</code>, <code>bankremittance</code>, <code>autotransaction</code> or <code>others</code>.")
    invoice_payment_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for an instalment of payment made for a particular invoice.")
    amount_refunded: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount that is refund. Refunds are applicable only for payments whose payment_mode is <code>autotransaction</code>. Refunds would be made to the respective card provided by the customer.")
    gateway_transaction_id: Optional[StrictStr] = Field(default=None, description="Gateway transaction ID provided for the payment made to the invoice. This is applicable only if <code>payment_mode</code> is autotransaction.")
    description: Optional[Any] = Field(default=None, description="Description for the item.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on which payment is made.", alias="date")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number generated for the payment. A string of your choice can also be used as the reference number.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount paid for the invoice.")
    bank_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Denotes any additional bank charges.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=1, description="Exchange rate for the currency used in the invoices and customer's currency. The payment amount would be the multiplicative product of the original amount and the exchange rate.")
    __properties: ClassVar[List[str]] = ["payment_id", "payment_mode", "invoice_payment_id", "amount_refunded", "gateway_transaction_id", "description", "date", "reference_number", "amount", "bank_charges", "exchange_rate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_id": obj.get("payment_id"),
            "payment_mode": obj.get("payment_mode"),
            "invoice_payment_id": obj.get("invoice_payment_id"),
            "amount_refunded": obj.get("amount_refunded"),
            "gateway_transaction_id": obj.get("gateway_transaction_id"),
            "description": obj.get("description"),
            "date": obj.get("date"),
            "reference_number": obj.get("reference_number"),
            "amount": obj.get("amount"),
            "bank_charges": obj.get("bank_charges"),
            "exchange_rate": obj.get("exchange_rate") if obj.get("exchange_rate") is not None else 1
        })
        return _obj



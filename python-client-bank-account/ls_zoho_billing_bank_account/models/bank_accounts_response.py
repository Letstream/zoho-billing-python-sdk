# coding: utf-8

"""
    Bank-Accounts

    A bank account  object shows the cbank account information for a particular customer

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BankAccountsResponse(BaseModel):
    """
    BankAccountsResponse
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of the bank account from which payment is about to made by the customer.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Unique ID associated with the customer.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer, whom the bank account is associated.")
    gateway: Optional[StrictStr] = Field(default=None, description="Payment gateway through which payment needs to be made. Supported payment gateway values <code>test_gateway</code>, <code>payflow_pro</code>, <code>stripe</code>, <code>2checkout</code>, <code>authorize_net</code>, <code>payments_pro</code>, <code>forte</code>, <code>worldpay</code>, <code>wepay</code>.")
    last_four_digits: Optional[StrictInt] = Field(default=None, description="Last four digits of the customer's bank account.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the bank account.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Time at which the contact person details were last updated.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time at which the contact person was created.")
    created_by_id: Optional[StrictStr] = Field(default=None, description="Unique ID to denote the user who added the bank account.")
    created_by_name: Optional[StrictStr] = Field(default=None, description="Name of the user who added the bank account.")
    __properties: ClassVar[List[str]] = ["account_id", "customer_id", "customer_name", "gateway", "last_four_digits", "status", "last_modified_time", "created_time", "created_by_id", "created_by_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankAccountsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankAccountsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "gateway": obj.get("gateway"),
            "last_four_digits": obj.get("last_four_digits"),
            "status": obj.get("status"),
            "last_modified_time": obj.get("last_modified_time"),
            "created_time": obj.get("created_time"),
            "created_by_id": obj.get("created_by_id"),
            "created_by_name": obj.get("created_by_name")
        })
        return _obj



# coding: utf-8

"""
    Payments

    A payment object describes details regarding a particular customer payment. There can be multiple payments for a single invoice. Multiple invoices can be paid in a single payment as well.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_payments.models.create_a_payment_request_custom_fields_inner import CreateAPaymentRequestCustomFieldsInner
from ls_zoho_billing_payments.models.create_a_payment_request_invoices_inner import CreateAPaymentRequestInvoicesInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateAPaymentRequest(BaseModel):
    """
    UpdateAPaymentRequest
    """ # noqa: E501
    customer_id: StrictStr = Field(description="Customer ID of the customer involved in the payment.")
    payment_mode: StrictStr = Field(description="Mode through which payment is made. This can be <code>check</code>, <code>cash</code>, <code>creditcard</code>, <code>banktransfer</code>, <code>bankremittance</code>, <code>autotransaction</code> or <code>others</code>.")
    amount: Union[StrictFloat, StrictInt] = Field(description="Amount paid in the respective payment.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on which payment is made.", alias="date")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number generated for the payment. A string of your choice can also be used as the reference number.")
    description: Optional[StrictStr] = Field(default=None, description="Description about the payment.")
    invoices: List[CreateAPaymentRequestInvoicesInner] = Field(description="List of invoices associated with the payment. Each invoice object contains <code>invoice_id</code>, <code>invoice_number</code>, <code>date</code>, <code>invoice_amount</code>, <code>amount_applied</code> and <code>balance_amount</code>.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=1, description="Exchange rate for the currency used in the invoices and customer's currency. The payment amount would be the multiplicative product of the original amount and the exchange rate.")
    bank_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Denotes any additional bank charges.")
    tax_account_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the account which was used for transaction.")
    account_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the account.")
    custom_fields: Optional[List[CreateAPaymentRequestCustomFieldsInner]] = Field(default=None, description="Additional fields for the payments.")
    __properties: ClassVar[List[str]] = ["customer_id", "payment_mode", "amount", "date", "reference_number", "description", "invoices", "exchange_rate", "bank_charges", "tax_account_id", "account_id", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAPaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item_invoices in self.invoices:
                if _item_invoices:
                    _items.append(_item_invoices.to_dict())
            _dict['invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAPaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_id": obj.get("customer_id"),
            "payment_mode": obj.get("payment_mode"),
            "amount": obj.get("amount"),
            "date": obj.get("date"),
            "reference_number": obj.get("reference_number"),
            "description": obj.get("description"),
            "invoices": [CreateAPaymentRequestInvoicesInner.from_dict(_item) for _item in obj["invoices"]] if obj.get("invoices") is not None else None,
            "exchange_rate": obj.get("exchange_rate") if obj.get("exchange_rate") is not None else 1,
            "bank_charges": obj.get("bank_charges"),
            "tax_account_id": obj.get("tax_account_id"),
            "account_id": obj.get("account_id"),
            "custom_fields": [CreateAPaymentRequestCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None
        })
        return _obj



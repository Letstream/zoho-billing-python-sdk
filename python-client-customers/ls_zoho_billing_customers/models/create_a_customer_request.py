# coding: utf-8

"""
    Customers

    A customer object allows you to keep track of all customer related information.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ls_zoho_billing_customers.models.billing_address import BillingAddress
from ls_zoho_billing_customers.models.create_a_customer_request_custom_fields_inner import CreateACustomerRequestCustomFieldsInner
from ls_zoho_billing_customers.models.customer_response_default_templates import CustomerResponseDefaultTemplates
from ls_zoho_billing_customers.models.shipping_address import ShippingAddress
from ls_zoho_billing_customers.models.tags_inner import TagsInner
from typing import Optional, Set
from typing_extensions import Self

class CreateACustomerRequest(BaseModel):
    """
    CreateACustomerRequest
    """ # noqa: E501
    display_name: StrictStr = Field(description="Name of the customer which will be displayed in the interface and invoices.")
    salutation: Optional[StrictStr] = Field(default=None, description="Salutation of the customer.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the customer.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the customer.")
    email: StrictStr = Field(description="Email address of the customer.")
    tags: Optional[List[TagsInner]] = None
    company_name: Optional[StrictStr] = Field(default=None, description="Registered name of the company the customer represents.")
    phone: Optional[StrictStr] = Field(default=None, description="Customer's landline or fixed-line number.")
    mobile: Optional[StrictStr] = Field(default=None, description="Customer's mobile phone number.")
    department: Optional[StrictStr] = Field(default=None, description="Customer's department.")
    designation: Optional[StrictStr] = Field(default=None, description="Customer's designation.")
    website: Optional[StrictStr] = Field(default=None, description="Customer's website if any.")
    billing_address: Optional[BillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    payment_terms: Optional[StrictInt] = Field(default=None, description="Net payment term for the customer.")
    payment_terms_label: Optional[StrictStr] = Field(default=None, description="Text field of payment terms.")
    currency_code: Optional[StrictStr] = Field(default='currency_code chosen in organization profile settings', description="Currency code of the currency in which the customer wants to pay. If currency_code is not specified here, the currency chosen in your Zoho Billing organization will be used for billing.")
    ach_supported: Optional[StrictBool] = Field(default=False, description="Set to true if ACH payment is supported for the customer.")
    twitter: Optional[StrictStr] = Field(default=None, description="Twitter profile of the customer.")
    facebook: Optional[StrictStr] = Field(default=None, description="Facebook profile of the customer.")
    skype: Optional[StrictStr] = Field(default=None, description="Skype ID of the customer")
    notes: Optional[StrictStr] = Field(default=None, description="A short note about the customer.")
    is_portal_enabled: Optional[StrictBool] = Field(default=None, description="Is Client portal enabled for the customer.")
    gst_no: Optional[StrictStr] = Field(default=None, description="GSTIN Number for the customer.")
    gst_treatment: Optional[StrictStr] = Field(default=None, description="GST Treatment for the customer.<br>Allowed values for <strong><code>gst_treatment</code></strong> : <br><code>business_gst</code>, <code>business_none</code>, <code>consumer</code>, <code>overseas</code><br> <code>business_gst</code> - For a GST Registered business owner. <br><code>business_none</code> - For a GST unregistered business owner. <br><code>consumer</code> - For a consumer. <br><code>overseas</code> - Customer for whom you export your goods/services.")
    place_of_contact: Optional[StrictStr] = Field(default=None, description="Customer's place of contact.")
    vat_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment of the contact.Allowed Values: <br/><code>uk</code> (A business that is located in the UK.),<br/><code>eu_vat_registered</code> (A business that is reg for VAT and trade goods between Northern Ireland and EU. This node is available only for organizations enabled for NI protocal in VAT Settings.) and<br/><code>overseas</code> (A business that is located outside UK. Pre Brexit, this was split as <code>eu_vat_registered</code>, <code>eu_vat_not_registered</code> and <code>non_eu</code> ).")
    tax_reg_no: Optional[StrictStr] = Field(default=None, description="12 digit Tax Registration number of a contact with Tax treatment as </br> <code>home_country_mexico</code>, <code>border_region_mexico</code>, <code>non_mexico</code>.</br> Consumers generic RFC: <code>XAXX010101000</code>, Overseas generic RFC: <code>XEXX010101000</code>")
    tds_tax_id: Optional[StrictStr] = Field(default=None, description="ID of the TDS tax.")
    tax_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment of the contact.Allowed Values:</br> <code>home_country_mexico</code> (A business that is located within MX)</br><code>border_region_mexico</code> (A business that is located in the northern and southern border regions in MX)</br><code>non_mexico</code> (A business that is located outside MX).")
    tax_regime: Optional[StrictStr] = Field(default=None, description="Tax Regime of the contact.Allowed Values: <code>general_legal_person</code>, <code>legal_entities_non_profit</code>, <code>resident_abroad</code>, <code>production_cooperative_societies</code>, <code>agricultural_livestock</code>, <code>optional_group_of_companies</code>, <code>coordinated</code>, <code>simplified_trust</code>, <code>wages_salaries_income</code>, <code>lease</code>, <code>property_disposal_acquisition</code>, <code>other_income</code>, <code>resident_abroad</code>, <code>divident_income</code>, <code>individual_business_professional</code>, <code>interest_income</code>, <code>income_obtaining_price</code>, <code>no_tax_obligation</code>, <code>tax_incorporation</code>, <code>income_through_technology_platform</code>, <code>simplified_trust</code>.")
    is_tds_registered: Optional[StrictBool] = Field(default=None, description="Boolean to check if tax is registered.")
    vat_reg_no: Optional[StrictStr] = Field(default=None, description="VAT Registration number of a contact with length should be between 2 and 12 characters.")
    is_taxable: Optional[StrictStr] = Field(default=None, description="Set to true if customer's transactions must be tax inclusive.")
    tax_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax or tax group that can be collected from the contact. Tax can be given only if <code>is_taxable</code> is <code>true</code>.")
    tax_authority_id: Optional[Any] = Field(description="Unique ID of the tax authority. Tax authority depends on the location of the customer. For example, if the customer is located in NY, then the tax authority is NY tax authority.")
    tax_authority_name: StrictStr = Field(description="Unique name of the tax authority. Either tax_authority_id or tax_authority_name can be given.")
    tax_exemption_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax exemption.")
    tax_exemption_code: Optional[StrictStr] = Field(default=None, description="Unique code of the tax exemption.")
    default_templates: Optional[CustomerResponseDefaultTemplates] = None
    custom_fields: Optional[List[CreateACustomerRequestCustomFieldsInner]] = Field(default=None, description="Additional fields for customers.")
    __properties: ClassVar[List[str]] = ["display_name", "salutation", "first_name", "last_name", "email", "tags", "company_name", "phone", "mobile", "department", "designation", "website", "billing_address", "shipping_address", "payment_terms", "payment_terms_label", "currency_code", "ach_supported", "twitter", "facebook", "skype", "notes", "is_portal_enabled", "gst_no", "gst_treatment", "place_of_contact", "vat_treatment", "tax_reg_no", "tds_tax_id", "tax_treatment", "tax_regime", "is_tds_registered", "vat_reg_no", "is_taxable", "tax_id", "tax_authority_id", "tax_authority_name", "tax_exemption_id", "tax_exemption_code", "default_templates", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateACustomerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_templates
        if self.default_templates:
            _dict['default_templates'] = self.default_templates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # set to None if tax_authority_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_authority_id is None and "tax_authority_id" in self.model_fields_set:
            _dict['tax_authority_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateACustomerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "salutation": obj.get("salutation"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "tags": [TagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "company_name": obj.get("company_name"),
            "phone": obj.get("phone"),
            "mobile": obj.get("mobile"),
            "department": obj.get("department"),
            "designation": obj.get("designation"),
            "website": obj.get("website"),
            "billing_address": BillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "payment_terms": obj.get("payment_terms"),
            "payment_terms_label": obj.get("payment_terms_label"),
            "currency_code": obj.get("currency_code") if obj.get("currency_code") is not None else 'currency_code chosen in organization profile settings',
            "ach_supported": obj.get("ach_supported") if obj.get("ach_supported") is not None else False,
            "twitter": obj.get("twitter"),
            "facebook": obj.get("facebook"),
            "skype": obj.get("skype"),
            "notes": obj.get("notes"),
            "is_portal_enabled": obj.get("is_portal_enabled"),
            "gst_no": obj.get("gst_no"),
            "gst_treatment": obj.get("gst_treatment"),
            "place_of_contact": obj.get("place_of_contact"),
            "vat_treatment": obj.get("vat_treatment"),
            "tax_reg_no": obj.get("tax_reg_no"),
            "tds_tax_id": obj.get("tds_tax_id"),
            "tax_treatment": obj.get("tax_treatment"),
            "tax_regime": obj.get("tax_regime"),
            "is_tds_registered": obj.get("is_tds_registered"),
            "vat_reg_no": obj.get("vat_reg_no"),
            "is_taxable": obj.get("is_taxable"),
            "tax_id": obj.get("tax_id"),
            "tax_authority_id": obj.get("tax_authority_id"),
            "tax_authority_name": obj.get("tax_authority_name"),
            "tax_exemption_id": obj.get("tax_exemption_id"),
            "tax_exemption_code": obj.get("tax_exemption_code"),
            "default_templates": CustomerResponseDefaultTemplates.from_dict(obj["default_templates"]) if obj.get("default_templates") is not None else None,
            "custom_fields": [CreateACustomerRequestCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None
        })
        return _obj



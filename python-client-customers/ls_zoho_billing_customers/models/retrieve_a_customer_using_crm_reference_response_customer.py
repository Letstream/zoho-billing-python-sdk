# coding: utf-8

"""
    Customers

    A customer object allows you to keep track of all customer related information.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_customers.models.billing_address import BillingAddress
from ls_zoho_billing_customers.models.customer_response_custom_fields_inner import CustomerResponseCustomFieldsInner
from ls_zoho_billing_customers.models.customer_response_default_templates import CustomerResponseDefaultTemplates
from ls_zoho_billing_customers.models.customer_response_documents_inner import CustomerResponseDocumentsInner
from ls_zoho_billing_customers.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

class RetrieveACustomerUsingCrmReferenceResponseCustomer(BaseModel):
    """
    RetrieveACustomerUsingCrmReferenceResponseCustomer
    """ # noqa: E501
    customer_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated by the server. This is used as identifier.")
    display_name: Optional[StrictStr] = Field(default=None, description="Name of the customer which will be displayed in the interface and invoices.")
    salutation: Optional[StrictStr] = Field(default=None, description="Salutation of the customer.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the customer.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the customer.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    company_name: Optional[StrictStr] = Field(default=None, description="Registered name of the company the customer represents.")
    phone: Optional[StrictStr] = Field(default=None, description="Customer's landline or fixed-line number.")
    mobile: Optional[StrictStr] = Field(default=None, description="Customer's mobile phone number.")
    website: Optional[StrictStr] = Field(default=None, description="Customer's website if any.")
    designation: Optional[StrictStr] = Field(default=None, description="Customer's designation.")
    department: Optional[StrictStr] = Field(default=None, description="Customer's department.")
    is_portal_enabled: Optional[StrictBool] = Field(default=None, description="Is Client portal enabled for the customer.")
    billing_address: Optional[BillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    currency_code: Optional[StrictStr] = Field(default='currency_code chosen in organization profile settings', description="Currency code of the currency in which the customer wants to pay. If currency_code is not specified here, the currency chosen in your Zoho Billing organization will be used for billing.")
    currency_id: Optional[StrictStr] = Field(default=None, description="Currency ID of the customer's currency.")
    ach_supported: Optional[StrictBool] = Field(default=False, description="Set to true if ACH payment is supported for the customer.")
    gst_no: Optional[StrictStr] = Field(default=None, description="GSTIN Number for the customer.")
    gst_treatment: Optional[StrictStr] = Field(default=None, description="GST Treatment for the customer.<br>Allowed values for <strong><code>gst_treatment</code></strong> : <br><code>business_gst</code>, <code>business_none</code>, <code>consumer</code>, <code>overseas</code><br> <code>business_gst</code> - For a GST Registered business owner. <br><code>business_none</code> - For a GST unregistered business owner. <br><code>consumer</code> - For a consumer. <br><code>overseas</code> - Customer for whom you export your goods/services.")
    tax_reg_no: Optional[StrictStr] = Field(default=None, description="12 digit Tax Registration number of a contact with Tax treatment as </br> <code>home_country_mexico</code>, <code>border_region_mexico</code>, <code>non_mexico</code>.</br> Consumers generic RFC: <code>XAXX010101000</code>, Overseas generic RFC: <code>XEXX010101000</code>")
    tds_tax_id: Optional[StrictStr] = Field(default=None, description="ID of the TDS tax.")
    tax_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment of the contact.Allowed Values:</br> <code>home_country_mexico</code> (A business that is located within MX)</br><code>border_region_mexico</code> (A business that is located in the northern and southern border regions in MX)</br><code>non_mexico</code> (A business that is located outside MX).")
    tax_regime: Optional[StrictStr] = Field(default=None, description="Tax Regime of the contact.Allowed Values: <code>general_legal_person</code>, <code>legal_entities_non_profit</code>, <code>resident_abroad</code>, <code>production_cooperative_societies</code>, <code>agricultural_livestock</code>, <code>optional_group_of_companies</code>, <code>coordinated</code>, <code>simplified_trust</code>, <code>wages_salaries_income</code>, <code>lease</code>, <code>property_disposal_acquisition</code>, <code>other_income</code>, <code>resident_abroad</code>, <code>divident_income</code>, <code>individual_business_professional</code>, <code>interest_income</code>, <code>income_obtaining_price</code>, <code>no_tax_obligation</code>, <code>tax_incorporation</code>, <code>income_through_technology_platform</code>, <code>simplified_trust</code>.")
    is_tds_registered: Optional[StrictBool] = Field(default=None, description="Boolean to check if tax is registered.")
    place_of_contact: Optional[StrictStr] = Field(default=None, description="Customer's place of contact.")
    price_precision: Optional[StrictInt] = Field(default=None, description="The Price Precision of the selected currency for the customer")
    unused_credits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Customer's unused credits.")
    outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount that has to be paid to the customer.")
    notes: Optional[StrictStr] = Field(default=None, description="A short note about the customer.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the customer. It can either be <code>active</code> or <code>inactive</code>.")
    custom_fields: Optional[List[CustomerResponseCustomFieldsInner]] = Field(default=None, description="Additional fields for customers.")
    zcrm_account_id: Optional[StrictStr] = Field(default=None, description="This is the Zoho CRM account id of the customer if the customer is synced with the accounts in Zoho CRM.")
    zcrm_contact_id: Optional[StrictStr] = Field(default=None, description="This is the Zoho CRM contact id of the customer if the customer is synced with the contacts in Zoho CRM.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time at which the customer details were last updated.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time at which the customer was created.")
    source: Optional[StrictStr] = Field(default=None, description="Denotes how the customer was created.")
    payment_terms_label: Optional[StrictStr] = Field(default=None, description="Text field of payment terms.")
    is_linked_with_zohocrm: Optional[StrictBool] = Field(default=None, description="Set to true if linked with Zoho CRM.")
    primary_contactperson_id: Optional[StrictStr] = Field(default=None, description="Unique Id of primary contact person. This ID will refer to contactperson_id for this customer.")
    can_add_card: Optional[StrictBool] = Field(default=None, description="Set to true if card can be associated.")
    can_add_bank_account: Optional[StrictBool] = Field(default=None, description="Set to true if bank account can be associated.")
    default_templates: Optional[CustomerResponseDefaultTemplates] = None
    documents: Optional[List[CustomerResponseDocumentsInner]] = Field(default=None, description="List of files attached to a particular customer.")
    __properties: ClassVar[List[str]] = ["customer_id", "display_name", "salutation", "first_name", "last_name", "email", "company_name", "phone", "mobile", "website", "designation", "department", "is_portal_enabled", "billing_address", "shipping_address", "currency_code", "currency_id", "ach_supported", "gst_no", "gst_treatment", "tax_reg_no", "tds_tax_id", "tax_treatment", "tax_regime", "is_tds_registered", "place_of_contact", "price_precision", "unused_credits", "outstanding", "notes", "status", "custom_fields", "zcrm_account_id", "zcrm_contact_id", "updated_time", "created_time", "source", "payment_terms_label", "is_linked_with_zohocrm", "primary_contactperson_id", "can_add_card", "can_add_bank_account", "default_templates", "documents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveACustomerUsingCrmReferenceResponseCustomer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_templates
        if self.default_templates:
            _dict['default_templates'] = self.default_templates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveACustomerUsingCrmReferenceResponseCustomer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_id": obj.get("customer_id"),
            "display_name": obj.get("display_name"),
            "salutation": obj.get("salutation"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "company_name": obj.get("company_name"),
            "phone": obj.get("phone"),
            "mobile": obj.get("mobile"),
            "website": obj.get("website"),
            "designation": obj.get("designation"),
            "department": obj.get("department"),
            "is_portal_enabled": obj.get("is_portal_enabled"),
            "billing_address": BillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "currency_code": obj.get("currency_code") if obj.get("currency_code") is not None else 'currency_code chosen in organization profile settings',
            "currency_id": obj.get("currency_id"),
            "ach_supported": obj.get("ach_supported") if obj.get("ach_supported") is not None else False,
            "gst_no": obj.get("gst_no"),
            "gst_treatment": obj.get("gst_treatment"),
            "tax_reg_no": obj.get("tax_reg_no"),
            "tds_tax_id": obj.get("tds_tax_id"),
            "tax_treatment": obj.get("tax_treatment"),
            "tax_regime": obj.get("tax_regime"),
            "is_tds_registered": obj.get("is_tds_registered"),
            "place_of_contact": obj.get("place_of_contact"),
            "price_precision": obj.get("price_precision"),
            "unused_credits": obj.get("unused_credits"),
            "outstanding": obj.get("outstanding"),
            "notes": obj.get("notes"),
            "status": obj.get("status"),
            "custom_fields": [CustomerResponseCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "zcrm_account_id": obj.get("zcrm_account_id"),
            "zcrm_contact_id": obj.get("zcrm_contact_id"),
            "updated_time": obj.get("updated_time"),
            "created_time": obj.get("created_time"),
            "source": obj.get("source"),
            "payment_terms_label": obj.get("payment_terms_label"),
            "is_linked_with_zohocrm": obj.get("is_linked_with_zohocrm"),
            "primary_contactperson_id": obj.get("primary_contactperson_id"),
            "can_add_card": obj.get("can_add_card"),
            "can_add_bank_account": obj.get("can_add_bank_account"),
            "default_templates": CustomerResponseDefaultTemplates.from_dict(obj["default_templates"]) if obj.get("default_templates") is not None else None,
            "documents": [CustomerResponseDocumentsInner.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Customers

    A customer object allows you to keep track of all customer related information.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_customers.models.tags_inner import TagsInner
from typing import Optional, Set
from typing_extensions import Self

class ListAllCustomersResponseCustomersInner(BaseModel):
    """
    ListAllCustomersResponseCustomersInner
    """ # noqa: E501
    customer_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated by the server. This is used as identifier.")
    display_name: Optional[StrictStr] = Field(default=None, description="Name of the customer which will be displayed in the interface and invoices.")
    salutation: Optional[StrictStr] = Field(default=None, description="Salutation of the customer.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the customer.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the customer.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    tags: Optional[List[TagsInner]] = None
    company_name: Optional[StrictStr] = Field(default=None, description="Registered name of the company the customer represents.")
    phone: Optional[StrictStr] = Field(default=None, description="Customer's landline or fixed-line number.")
    mobile: Optional[StrictStr] = Field(default=None, description="Customer's mobile phone number.")
    website: Optional[StrictStr] = Field(default=None, description="Customer's website if any.")
    department: Optional[StrictStr] = Field(default=None, description="Customer's department.")
    designation: Optional[StrictStr] = Field(default=None, description="Customer's designation.")
    currency_code: Optional[StrictStr] = Field(default='currency_code chosen in organization profile settings', description="Currency code of the currency in which the customer wants to pay. If currency_code is not specified here, the currency chosen in your Zoho Billing organization will be used for billing.")
    unused_credits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Customer's unused credits.")
    outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount that has to be paid to the customer.")
    is_gapps_customer: Optional[StrictBool] = Field(default=None, description="Denotes whether imported from GApps.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time at which the customer details were last updated.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time at which the customer was created.")
    has_attachment: Optional[Any] = Field(default=None, description="Denotes whether a customer has any attachments associated with it.")
    __properties: ClassVar[List[str]] = ["customer_id", "display_name", "salutation", "first_name", "last_name", "email", "tags", "company_name", "phone", "mobile", "website", "department", "designation", "currency_code", "unused_credits", "outstanding", "is_gapps_customer", "updated_time", "created_time", "has_attachment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListAllCustomersResponseCustomersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # set to None if has_attachment (nullable) is None
        # and model_fields_set contains the field
        if self.has_attachment is None and "has_attachment" in self.model_fields_set:
            _dict['has_attachment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListAllCustomersResponseCustomersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_id": obj.get("customer_id"),
            "display_name": obj.get("display_name"),
            "salutation": obj.get("salutation"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "tags": [TagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "company_name": obj.get("company_name"),
            "phone": obj.get("phone"),
            "mobile": obj.get("mobile"),
            "website": obj.get("website"),
            "department": obj.get("department"),
            "designation": obj.get("designation"),
            "currency_code": obj.get("currency_code") if obj.get("currency_code") is not None else 'currency_code chosen in organization profile settings',
            "unused_credits": obj.get("unused_credits"),
            "outstanding": obj.get("outstanding"),
            "is_gapps_customer": obj.get("is_gapps_customer"),
            "updated_time": obj.get("updated_time"),
            "created_time": obj.get("created_time"),
            "has_attachment": obj.get("has_attachment")
        })
        return _obj



# coding: utf-8

"""
    Hosted-Pages

    Zoho Billing provides a hosted payment page to integrate with your websites. You can securely integrate with Zoho Billing for collecting your customer's sensitive card information through the hosted page. These Hosted Pages will expire within one hour.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_hosted_pages.models.create_a_subscription_request_addons_inner import CreateASubscriptionRequestAddonsInner
from ls_zoho_billing_hosted_pages.models.create_a_subscription_request_contactpersons_inner import CreateASubscriptionRequestContactpersonsInner
from ls_zoho_billing_hosted_pages.models.create_a_subscription_request_customer import CreateASubscriptionRequestCustomer
from ls_zoho_billing_hosted_pages.models.create_a_subscription_request_plan import CreateASubscriptionRequestPlan
from ls_zoho_billing_hosted_pages.models.item_custom_fields_inner import ItemCustomFieldsInner
from ls_zoho_billing_hosted_pages.models.payment_gateways_inner import PaymentGatewaysInner
from typing import Optional, Set
from typing_extensions import Self

class CreateASubscriptionRequest(BaseModel):
    """
    CreateASubscriptionRequest
    """ # noqa: E501
    customer_id: Optional[Any] = Field(description="Customer ID of the customer for whom a subscription needs to be created.")
    pricebook_id: Optional[StrictStr] = Field(default=None, description="A Pricebook that has currency same as that of the customer")
    customer: CreateASubscriptionRequestCustomer
    contactpersons: Optional[List[CreateASubscriptionRequestContactpersonsInner]] = Field(default=None, description="List of contact person objects. Each object contains <code>contactperson_id</code> and <code>email</code>.")
    plan: CreateASubscriptionRequestPlan
    addons: Optional[List[CreateASubscriptionRequestAddonsInner]] = Field(default=None, description="List of addon objects which are to be included in the subscription. Each object contains <code>addon_code</code>, <code>name</code>, <code>price</code> and <code>quantity</code>.")
    reference_id: Optional[StrictStr] = Field(default=None, description="A string of your choice is required to easily identify and keep track of your subscriptions.")
    starts_at: Optional[StrictStr] = Field(default=None, description="Generally the subscription will start on the day it is created. But, the date can also be a future  or past date depending upon your usecase. For future dates, the subscription status would be Future till the starts_at date. And for past dates, the subscription status can be Trial, Live or Expired depending on the subscription interval that you have selected.")
    custom_fields: Optional[List[ItemCustomFieldsInner]] = Field(default=None, description="Additional fields for the Hosted pages.")
    coupon_code: Optional[StrictStr] = Field(default=None, description="The coupon code of the coupon which is to be applied to the subscription.")
    redirect_url: Optional[StrictStr] = Field(default=None, description="It specifies the url to which the customer will be redirected after successful transaction.")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of tha sales person assigned for the subscription.")
    template_id: Optional[StrictInt] = Field(default=None, description="Unique Id used to denote the invoice template.")
    can_charge_setup_fee_immediately: Optional[StrictBool] = Field(default=None, description="If set to \"true\", a separate invoice will be raised for the setup fee as soon as the subscription's trial period starts. Set the value as \"false\", or remove this optional argument if you want the setup fee to be billed at the end of the trial period, along with the other subscription related charges.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This will be the exchange rate provided for the organization's currency and the customer's currency. The subscription fee would be the multiplicative product of the original price and the exchange rate.")
    place_of_supply: Optional[StrictStr] = Field(default=None, description="Place of Supply for the customer's subscription.")
    gst_treatment: Optional[StrictStr] = Field(default=None, description="GST Treatment for the customer.<br>Allowed values for <strong><code>gst_treatment</code></strong> : <br><code>business_gst</code>, <code>business_none</code>, <code>consumer</code>, <code>overseas</code><br> <code>business_gst</code> - For a GST Registered business owner. <br><code>business_none</code> - For a GST unregistered business owner. <br><code>consumer</code> - For a consumer. <br><code>overseas</code> - Customer for whom you export your goods/services.")
    gst_no: Optional[StrictStr] = Field(default=None, description="GSTIN Number for the customer.")
    cfdi_usage: Optional[StrictStr] = Field(default=None, description="Choose CFDI Usage. Allowed values:</br><code>acquisition_of_merchandise</code>, <code>return_discount_bonus</code>, <code>general_expense</code>, <code>buildings</code>, <code>furniture_office_equipment</code>, <code>transport_equipment</code>, <code>computer_equipmentdye_molds_tools</code>, <code>telephone_communication</code>, <code>satellite_communication</code>, <code>other_machinery_equipment</code>, <code>hospital_expense</code>, <code>medical_expense_disability</code>, <code>funeral_expense</code>, <code>donation</code>, <code>interest_mortage_loans</code>, <code>contribution_sar</code>, <code>medical_expense_insurance_pormium</code>, <code>school_transportation_expense</code>, <code>deposit_saving_account</code>, <code>payment_educational_service</code>, <code>no_tax_effect</code>, <code>payment</code>, <code>payroll</code>.")
    payment_gateways: Optional[List[PaymentGatewaysInner]] = Field(default=None, description="List of payment gateways configured for the customer.")
    billing_address_id: Optional[StrictStr] = Field(default=None, description=" ID of the respective billing address")
    shipping_address_id: Optional[StrictStr] = Field(default=None, description=" ID of the respective Shipping address")
    branch_id: Optional[StrictStr] = Field(default=None, description=" branch under which this transaction will fall under")
    __properties: ClassVar[List[str]] = ["customer_id", "pricebook_id", "customer", "contactpersons", "plan", "addons", "reference_id", "starts_at", "custom_fields", "coupon_code", "redirect_url", "salesperson_name", "template_id", "can_charge_setup_fee_immediately", "exchange_rate", "place_of_supply", "gst_treatment", "gst_no", "cfdi_usage", "payment_gateways", "billing_address_id", "shipping_address_id", "branch_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateASubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in contactpersons (list)
        _items = []
        if self.contactpersons:
            for _item_contactpersons in self.contactpersons:
                if _item_contactpersons:
                    _items.append(_item_contactpersons.to_dict())
            _dict['contactpersons'] = _items
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item_addons in self.addons:
                if _item_addons:
                    _items.append(_item_addons.to_dict())
            _dict['addons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_gateways (list)
        _items = []
        if self.payment_gateways:
            for _item_payment_gateways in self.payment_gateways:
                if _item_payment_gateways:
                    _items.append(_item_payment_gateways.to_dict())
            _dict['payment_gateways'] = _items
        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateASubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_id": obj.get("customer_id"),
            "pricebook_id": obj.get("pricebook_id"),
            "customer": CreateASubscriptionRequestCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "contactpersons": [CreateASubscriptionRequestContactpersonsInner.from_dict(_item) for _item in obj["contactpersons"]] if obj.get("contactpersons") is not None else None,
            "plan": CreateASubscriptionRequestPlan.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "addons": [CreateASubscriptionRequestAddonsInner.from_dict(_item) for _item in obj["addons"]] if obj.get("addons") is not None else None,
            "reference_id": obj.get("reference_id"),
            "starts_at": obj.get("starts_at"),
            "custom_fields": [ItemCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "coupon_code": obj.get("coupon_code"),
            "redirect_url": obj.get("redirect_url"),
            "salesperson_name": obj.get("salesperson_name"),
            "template_id": obj.get("template_id"),
            "can_charge_setup_fee_immediately": obj.get("can_charge_setup_fee_immediately"),
            "exchange_rate": obj.get("exchange_rate"),
            "place_of_supply": obj.get("place_of_supply"),
            "gst_treatment": obj.get("gst_treatment"),
            "gst_no": obj.get("gst_no"),
            "cfdi_usage": obj.get("cfdi_usage"),
            "payment_gateways": [PaymentGatewaysInner.from_dict(_item) for _item in obj["payment_gateways"]] if obj.get("payment_gateways") is not None else None,
            "billing_address_id": obj.get("billing_address_id"),
            "shipping_address_id": obj.get("shipping_address_id"),
            "branch_id": obj.get("branch_id")
        })
        return _obj



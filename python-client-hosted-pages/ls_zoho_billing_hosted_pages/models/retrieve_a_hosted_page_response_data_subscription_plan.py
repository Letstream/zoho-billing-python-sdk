# coding: utf-8

"""
    Hosted-Pages

    Zoho Billing provides a hosted payment page to integrate with your websites. You can securely integrate with Zoho Billing for collecting your customer's sensitive card information through the hosted page. These Hosted Pages will expire within one hour.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_hosted_pages.models.item_custom_fields_inner import ItemCustomFieldsInner
from ls_zoho_billing_hosted_pages.models.tags_inner import TagsInner
from typing import Optional, Set
from typing_extensions import Self

class RetrieveAHostedPageResponseDataSubscriptionPlan(BaseModel):
    """
    Plan object for which the subscription is to be created/updated. This contains <code>plan_code</code>, <code>name</code>, <code>price</code>, <code>exclude_setup_fee</code>, <code>quantity</code>, <code>exclude_setup_fee</code>, <code>exclude_trial</code>, <code>billing_cycles</code> and <code>trial_days</code>.
    """ # noqa: E501
    plan_code: Optional[StrictStr] = Field(default=None, description="Plan code of the plan that is to be subscribed to the customer.")
    name: Optional[StrictStr] = Field(default=None, description="Name generated by concatenation of the product name and the selected plan.")
    quantity: Optional[StrictInt] = Field(default=None, description="Required quantity of the chosen plan.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of a plan for a particular subscription. If a value is provided here, the plan’s price for this subscription will be changed to the given value. If no value is provided, the plan’s price would be the same as what it was when it was created.")
    tags: Optional[List[TagsInner]] = None
    item_custom_fields: Optional[List[ItemCustomFieldsInner]] = Field(default=None, description="Custom fields for a item.")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discount amount applied for the plan.")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount for the plan.")
    setup_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Setup fee for the plan.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the plan exclusive to this subscription. This will be displayed in place of the plan name in invoices generated for this subscription.")
    tax_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax or tax group that can be collected from the contact. Tax can be given only if <code>is_taxable</code> is <code>true</code>.")
    __properties: ClassVar[List[str]] = ["plan_code", "name", "quantity", "price", "tags", "item_custom_fields", "discount", "total", "setup_fee", "description", "tax_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveAHostedPageResponseDataSubscriptionPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_custom_fields (list)
        _items = []
        if self.item_custom_fields:
            for _item_item_custom_fields in self.item_custom_fields:
                if _item_item_custom_fields:
                    _items.append(_item_item_custom_fields.to_dict())
            _dict['item_custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveAHostedPageResponseDataSubscriptionPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plan_code": obj.get("plan_code"),
            "name": obj.get("name"),
            "quantity": obj.get("quantity"),
            "price": obj.get("price"),
            "tags": [TagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "item_custom_fields": [ItemCustomFieldsInner.from_dict(_item) for _item in obj["item_custom_fields"]] if obj.get("item_custom_fields") is not None else None,
            "discount": obj.get("discount"),
            "total": obj.get("total"),
            "setup_fee": obj.get("setup_fee"),
            "description": obj.get("description"),
            "tax_id": obj.get("tax_id")
        })
        return _obj



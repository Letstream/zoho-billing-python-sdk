# coding: utf-8

"""
    Hosted-Pages

    Zoho Billing provides a hosted payment page to integrate with your websites. You can securely integrate with Zoho Billing for collecting your customer's sensitive card information through the hosted page. These Hosted Pages will expire within one hour.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContactpersonsInner(BaseModel):
    """
    ContactpersonsInner
    """ # noqa: E501
    contactperson_id: Optional[StrictStr] = Field(default=None, description="Contact person ID of the customer’s contact person.")
    email: Optional[Any] = Field(default=None, description="Email ID of the contact person.")
    phone: Optional[Any] = Field(default=None, description="Contactperson’s landline or fixed-line number.")
    mobile: Optional[Any] = Field(default=None, description="Contactperson’s mobile phone number.")
    zcrm_contact_id: Optional[Any] = Field(default=None, description="This is the Zoho CRM contact id of the contactperson if the contactperson is synced with the contacts in Zoho CRM.")
    __properties: ClassVar[List[str]] = ["contactperson_id", "email", "phone", "mobile", "zcrm_contact_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactpersonsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if mobile (nullable) is None
        # and model_fields_set contains the field
        if self.mobile is None and "mobile" in self.model_fields_set:
            _dict['mobile'] = None

        # set to None if zcrm_contact_id (nullable) is None
        # and model_fields_set contains the field
        if self.zcrm_contact_id is None and "zcrm_contact_id" in self.model_fields_set:
            _dict['zcrm_contact_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactpersonsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contactperson_id": obj.get("contactperson_id"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "mobile": obj.get("mobile"),
            "zcrm_contact_id": obj.get("zcrm_contact_id")
        })
        return _obj



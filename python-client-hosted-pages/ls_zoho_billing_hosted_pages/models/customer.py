# coding: utf-8

"""
    Hosted-Pages

    Zoho Billing provides a hosted payment page to integrate with your websites. You can securely integrate with Zoho Billing for collecting your customer's sensitive card information through the hosted page. These Hosted Pages will expire within one hour.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Customer(BaseModel):
    """
    Customer object of the customer for whom you want to create a subscription. Each object contains <code>display_name</code>, <code>company_name</code>, <code>first_name</code>, <code>last_name</code>, <code>email</code>, <code>fax</code>, <code>currency_code</code> and <code>billing_address</code>.
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the customer.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the customer.")
    display_name: Optional[StrictStr] = Field(default=None, description="This will be name which will be displayed in the interface and invoices.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    company_name: Optional[StrictStr] = Field(default=None, description="Registered name of the company the customer represents.")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code of the currency in which the customer wants to pay. If <code>currency_code</code> is not specified here, the currency chosen in your Zoho Billing organization will be used for billing. <code>currency_id</code> and <code>currency_symbol</code> are set automatically in accordance to the currency_code.")
    phone: Optional[StrictStr] = Field(default=None, description="Customer’s landline or fixed-line number.")
    mobile: Optional[StrictStr] = Field(default=None, description="Customer’s mobile phone number.")
    place_of_contact: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["first_name", "last_name", "display_name", "email", "company_name", "currency_code", "phone", "mobile", "place_of_contact"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "display_name": obj.get("display_name"),
            "email": obj.get("email"),
            "company_name": obj.get("company_name"),
            "currency_code": obj.get("currency_code"),
            "phone": obj.get("phone"),
            "mobile": obj.get("mobile"),
            "place_of_contact": obj.get("place_of_contact")
        })
        return _obj



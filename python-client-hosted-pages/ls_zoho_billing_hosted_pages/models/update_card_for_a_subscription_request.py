# coding: utf-8

"""
    Hosted-Pages

    Zoho Billing provides a hosted payment page to integrate with your websites. You can securely integrate with Zoho Billing for collecting your customer's sensitive card information through the hosted page. These Hosted Pages will expire within one hour.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ls_zoho_billing_hosted_pages.models.payment_gateways_inner import PaymentGatewaysInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateCardForASubscriptionRequest(BaseModel):
    """
    UpdateCardForASubscriptionRequest
    """ # noqa: E501
    subscription_id: StrictStr = Field(description="Unique ID generated for a subscription.")
    redirect_url: Optional[StrictStr] = Field(default=None, description="It specifies the url to which the customer will be redirected after successful transaction.")
    payment_gateways: Optional[List[PaymentGatewaysInner]] = Field(default=None, description="List of payment gateways configured for the customer.")
    __properties: ClassVar[List[str]] = ["subscription_id", "redirect_url", "payment_gateways"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateCardForASubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_gateways (list)
        _items = []
        if self.payment_gateways:
            for _item_payment_gateways in self.payment_gateways:
                if _item_payment_gateways:
                    _items.append(_item_payment_gateways.to_dict())
            _dict['payment_gateways'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateCardForASubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subscription_id": obj.get("subscription_id"),
            "redirect_url": obj.get("redirect_url"),
            "payment_gateways": [PaymentGatewaysInner.from_dict(_item) for _item in obj["payment_gateways"]] if obj.get("payment_gateways") is not None else None
        })
        return _obj



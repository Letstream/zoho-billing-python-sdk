# coding: utf-8

"""
    Hosted-Pages

    Zoho Billing provides a hosted payment page to integrate with your websites. You can securely integrate with Zoho Billing for collecting your customer's sensitive card information through the hosted page. These Hosted Pages will expire within one hour.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InvoiceItemsInner(BaseModel):
    """
    InvoiceItemsInner
    """ # noqa: E501
    item_id: Optional[StrictStr] = Field(default=None, description="The ID of the item included in the invoice.")
    name: Optional[Any] = Field(default=None, description="Name which denotes the invoice.")
    description: Optional[Any] = Field(default=None, description="Small description about the Invoice item.")
    code: Optional[StrictStr] = Field(default=None, description="code for the response received.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of a plan for a particular subscription. If a value is provided here, the plan’s price for this subscription will be changed to the given value. If no value is provided, the plan’s price would be the same as what it was when it was created.")
    quantity: Optional[StrictInt] = Field(default=None, description="Required quantity of the chosen plan.")
    discount_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The discount amount included in an invoice on applying a coupon.")
    item_total: Optional[StrictInt] = Field(default=None, description="Cost of an item included in the invoice. This would be the product of quantity of the item included and the price of that item.")
    tax_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax or tax group that can be collected from the contact. Tax can be given only if <code>is_taxable</code> is <code>true</code>.")
    tax_exemption_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax exemption.")
    tax_exemption_code: Optional[StrictStr] = Field(default=None, description="Unique code of the tax exemption.")
    __properties: ClassVar[List[str]] = ["item_id", "name", "description", "code", "price", "quantity", "discount_amount", "item_total", "tax_id", "tax_exemption_id", "tax_exemption_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "item_id": obj.get("item_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "code": obj.get("code"),
            "price": obj.get("price"),
            "quantity": obj.get("quantity"),
            "discount_amount": obj.get("discount_amount"),
            "item_total": obj.get("item_total"),
            "tax_id": obj.get("tax_id"),
            "tax_exemption_id": obj.get("tax_exemption_id"),
            "tax_exemption_code": obj.get("tax_exemption_code")
        })
        return _obj



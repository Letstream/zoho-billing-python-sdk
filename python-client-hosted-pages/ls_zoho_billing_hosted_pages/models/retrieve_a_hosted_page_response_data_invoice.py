# coding: utf-8

"""
    Hosted-Pages

    Zoho Billing provides a hosted payment page to integrate with your websites. You can securely integrate with Zoho Billing for collecting your customer's sensitive card information through the hosted page. These Hosted Pages will expire within one hour.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_hosted_pages.models.comments_inner import CommentsInner
from ls_zoho_billing_hosted_pages.models.data_subscription_custom_fields_inner import DataSubscriptionCustomFieldsInner
from ls_zoho_billing_hosted_pages.models.retrieve_a_hosted_page_response_data_invoice_billing_address import RetrieveAHostedPageResponseDataInvoiceBillingAddress
from ls_zoho_billing_hosted_pages.models.retrieve_a_hosted_page_response_data_invoice_coupon_inner import RetrieveAHostedPageResponseDataInvoiceCouponInner
from ls_zoho_billing_hosted_pages.models.retrieve_a_hosted_page_response_data_invoice_credits_inner import RetrieveAHostedPageResponseDataInvoiceCreditsInner
from ls_zoho_billing_hosted_pages.models.retrieve_a_hosted_page_response_data_invoice_invoice_items_inner import RetrieveAHostedPageResponseDataInvoiceInvoiceItemsInner
from ls_zoho_billing_hosted_pages.models.retrieve_a_hosted_page_response_data_invoice_payments_inner import RetrieveAHostedPageResponseDataInvoicePaymentsInner
from ls_zoho_billing_hosted_pages.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

class RetrieveAHostedPageResponseDataInvoice(BaseModel):
    """
    RetrieveAHostedPageResponseDataInvoice
    """ # noqa: E501
    invoice_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for an invoice.")
    number: Optional[StrictStr] = Field(default=None, description="Unique number generated for the invoice.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the hosted page generated. This can be <code>fresh</code>, <code>read</code>, <code>success</code>, <code>failed</code>, <code>cancelled</code> or <code>force_cancelled</code>.")
    invoice_date: Optional[StrictStr] = Field(default=None, description="Date in which the invoice was generated.")
    due_date: Optional[StrictStr] = Field(default=None, description="Date on which the payment is due for the invoice.")
    payment_expected_date: Optional[StrictStr] = Field(default=None, description="A date to specify the expected payment date.")
    ach_payment_initiated: Optional[StrictBool] = Field(default=None, description="Set to true if ACH payment is initiated.")
    transaction_type: Optional[StrictStr] = Field(default=None, description="Small description about the type of transaction.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer for whom a subscription needs to be created.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    invoice_items: Optional[List[RetrieveAHostedPageResponseDataInvoiceInvoiceItemsInner]] = Field(default=None, description="The list of items which are all included in the invoice. Each item object will have <code>item_id</code>, <code>name</code>, <code>code</code>, <code>price</code>, <code>quantity</code> and <code>item_total</code>.")
    coupon: Optional[List[RetrieveAHostedPageResponseDataInvoiceCouponInner]] = Field(default=None, description="The object containing the details of the added coupon. <code>coupon_code</code> and <code>discount_amount</code> applied to the invoice total.")
    credits: Optional[List[RetrieveAHostedPageResponseDataInvoiceCreditsInner]] = None
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount for the plan.")
    payment_made: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Payments can be made in multiple instalments. payment_made refers to the amount paid for the invoice in the respective instalment.")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice.")
    credits_applied: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Credits applied for the invoice.")
    write_off_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unpaid amount of an invoice that is written off.")
    payments: Optional[List[RetrieveAHostedPageResponseDataInvoicePaymentsInner]] = Field(default=None, description="List of payment objects. Each object will contain <code>payment_id</code>, <code>payment_mode</code>, <code>invoice_payment_id</code>, <code>gateway_transaction_id</code>, <code>description</code>, <code>date</code>, <code>reference_number</code> and <code>amount</code>.")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code of the currency in which the customer wants to pay. If <code>currency_code</code> is not specified here, the currency chosen in your Zoho Billing organization will be used for billing. <code>currency_id</code> and <code>currency_symbol</code> are set automatically in accordance to the currency_code.")
    currency_symbol: Optional[StrictStr] = Field(default=None, description="Currency symbol of the customer's currency.")
    created_time: Optional[StrictStr] = Field(default=None, description="The time at which the hosted page was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time at which the subscription details were last updated.")
    salesperson_id: Optional[StrictStr] = Field(default=None, description="Unique Id of the sales person assigned for the subscription.")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of tha sales person assigned for the subscription.")
    invoice_url: Optional[StrictStr] = Field(default=None, description="Url which corresponds to the invoice.")
    billing_address: Optional[RetrieveAHostedPageResponseDataInvoiceBillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    comments: Optional[List[CommentsInner]] = Field(default=None, description="Lists the comments added by the system or by user.")
    custom_fields: Optional[List[DataSubscriptionCustomFieldsInner]] = Field(default=None, description="Additional fields for the Hosted pages.")
    __properties: ClassVar[List[str]] = ["invoice_id", "number", "status", "invoice_date", "due_date", "payment_expected_date", "ach_payment_initiated", "transaction_type", "customer_id", "customer_name", "email", "invoice_items", "coupon", "credits", "total", "payment_made", "balance", "credits_applied", "write_off_amount", "payments", "currency_code", "currency_symbol", "created_time", "updated_time", "salesperson_id", "salesperson_name", "invoice_url", "billing_address", "shipping_address", "comments", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveAHostedPageResponseDataInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item_invoice_items in self.invoice_items:
                if _item_invoice_items:
                    _items.append(_item_invoice_items.to_dict())
            _dict['invoice_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coupon (list)
        _items = []
        if self.coupon:
            for _item_coupon in self.coupon:
                if _item_coupon:
                    _items.append(_item_coupon.to_dict())
            _dict['coupon'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credits (list)
        _items = []
        if self.credits:
            for _item_credits in self.credits:
                if _item_credits:
                    _items.append(_item_credits.to_dict())
            _dict['credits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item_payments in self.payments:
                if _item_payments:
                    _items.append(_item_payments.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item_comments in self.comments:
                if _item_comments:
                    _items.append(_item_comments.to_dict())
            _dict['comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveAHostedPageResponseDataInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoice_id": obj.get("invoice_id"),
            "number": obj.get("number"),
            "status": obj.get("status"),
            "invoice_date": obj.get("invoice_date"),
            "due_date": obj.get("due_date"),
            "payment_expected_date": obj.get("payment_expected_date"),
            "ach_payment_initiated": obj.get("ach_payment_initiated"),
            "transaction_type": obj.get("transaction_type"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "email": obj.get("email"),
            "invoice_items": [RetrieveAHostedPageResponseDataInvoiceInvoiceItemsInner.from_dict(_item) for _item in obj["invoice_items"]] if obj.get("invoice_items") is not None else None,
            "coupon": [RetrieveAHostedPageResponseDataInvoiceCouponInner.from_dict(_item) for _item in obj["coupon"]] if obj.get("coupon") is not None else None,
            "credits": [RetrieveAHostedPageResponseDataInvoiceCreditsInner.from_dict(_item) for _item in obj["credits"]] if obj.get("credits") is not None else None,
            "total": obj.get("total"),
            "payment_made": obj.get("payment_made"),
            "balance": obj.get("balance"),
            "credits_applied": obj.get("credits_applied"),
            "write_off_amount": obj.get("write_off_amount"),
            "payments": [RetrieveAHostedPageResponseDataInvoicePaymentsInner.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol"),
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time"),
            "salesperson_id": obj.get("salesperson_id"),
            "salesperson_name": obj.get("salesperson_name"),
            "invoice_url": obj.get("invoice_url"),
            "billing_address": RetrieveAHostedPageResponseDataInvoiceBillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "comments": [CommentsInner.from_dict(_item) for _item in obj["comments"]] if obj.get("comments") is not None else None,
            "custom_fields": [DataSubscriptionCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None
        })
        return _obj



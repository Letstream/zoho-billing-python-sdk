# coding: utf-8

"""
    Hosted-Pages

    Zoho Billing provides a hosted payment page to integrate with your websites. You can securely integrate with Zoho Billing for collecting your customer's sensitive card information through the hosted page. These Hosted Pages will expire within one hour.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_hosted_pages.models.billing_address import BillingAddress
from ls_zoho_billing_hosted_pages.models.create_a_subscription_request_customer_default_templates import CreateASubscriptionRequestCustomerDefaultTemplates
from ls_zoho_billing_hosted_pages.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

class CreateASubscriptionRequestCustomer(BaseModel):
    """
    Customer object of the customer for whom you want to create a subscription. Each object contains <code>display_name</code>, <code>company_name</code>, <code>first_name</code>, <code>last_name</code>, <code>email</code>, <code>fax</code>, <code>currency_code</code> and <code>billing_address</code>.
    """ # noqa: E501
    display_name: StrictStr = Field(description="This will be name which will be displayed in the interface and invoices.")
    salutation: Optional[StrictStr] = Field(default=None, description="Salutation of the customer.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the customer.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the customer.")
    email: StrictStr = Field(description="Email address of the customer.")
    company_name: Optional[StrictStr] = Field(default=None, description="Registered name of the company the customer represents.")
    billing_address: Optional[BillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    pricebook_id: Optional[StrictStr] = Field(default=None, description="A Pricebook that has currency same as that of the customer")
    payment_terms: Optional[StrictInt] = Field(default=None, description="Payment Due details for the invoices.")
    payment_terms_label: Optional[StrictStr] = Field(default=None, description="Label for the paymet due details.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This will be the exchange rate provided for the organization's currency and the customer's currency. The subscription fee would be the multiplicative product of the original price and the exchange rate.")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code of the currency in which the customer wants to pay. If <code>currency_code</code> is not specified here, the currency chosen in your Zoho Billing organization will be used for billing. <code>currency_id</code> and <code>currency_symbol</code> are set automatically in accordance to the currency_code.")
    vat_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment for the credit-note. VAT treatment denotes the location of the customer, if the customer resides in UK then the VAT treatment is `uk`. If the customer is in a EU country & if he is VAT registered then his VAT treatment is `eu_vat_registered`, if he resides in EU & if he is not VAT registered then his VAT treatment is `eu_vat_not_registered` and if he resides outside the EU then his VAT treatment is `non_eu`.")
    vat_reg_no: Optional[StrictStr] = Field(default=None, description="VAT Registration number of a contact with VAT treatment as <code>eu_vat_registered</code>. Length should be between 2 and 12 characters. (This node is only available for EU VAT registered  customers.)")
    country_code: Optional[StrictStr] = Field(default=None, description="Two letter country code of a contact with VAT treatment as <code>eu_vat_registered</code>. (This node is only available for EU VAT registered  customers.)")
    is_taxable: Optional[StrictStr] = Field(default=None, description="Set to true if customer's transactions must be tax inclusive.")
    tax_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax or tax group that can be collected from the contact. Tax can be given only if <code>is_taxable</code> is <code>true</code>.")
    tax_authority_id: StrictStr = Field(description="Unique ID of the tax authority. Tax authority depends on the location of the customer. For example, if the customer is located in NY, then the tax authority is NY tax authority.")
    tax_authority_name: StrictStr = Field(description="Unique name of the tax authority.")
    tax_exemption_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax exemption.")
    tax_exemption_code: Optional[StrictStr] = Field(default=None, description="Unique code of the tax exemption.")
    default_templates: Optional[CreateASubscriptionRequestCustomerDefaultTemplates] = None
    place_of_contact: Optional[StrictStr] = None
    gst_no: Optional[StrictStr] = Field(default=None, description="GSTIN Number for the customer.")
    gst_treatment: Optional[StrictStr] = Field(default=None, description="GST Treatment for the customer.<br>Allowed values for <strong><code>gst_treatment</code></strong> : <br><code>business_gst</code>, <code>business_none</code>, <code>consumer</code>, <code>overseas</code><br> <code>business_gst</code> - For a GST Registered business owner. <br><code>business_none</code> - For a GST unregistered business owner. <br><code>consumer</code> - For a consumer. <br><code>overseas</code> - Customer for whom you export your goods/services.")
    __properties: ClassVar[List[str]] = ["display_name", "salutation", "first_name", "last_name", "email", "company_name", "billing_address", "shipping_address", "pricebook_id", "payment_terms", "payment_terms_label", "exchange_rate", "currency_code", "vat_treatment", "vat_reg_no", "country_code", "is_taxable", "tax_id", "tax_authority_id", "tax_authority_name", "tax_exemption_id", "tax_exemption_code", "default_templates", "place_of_contact", "gst_no", "gst_treatment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateASubscriptionRequestCustomer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_templates
        if self.default_templates:
            _dict['default_templates'] = self.default_templates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateASubscriptionRequestCustomer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "salutation": obj.get("salutation"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "company_name": obj.get("company_name"),
            "billing_address": BillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "pricebook_id": obj.get("pricebook_id"),
            "payment_terms": obj.get("payment_terms"),
            "payment_terms_label": obj.get("payment_terms_label"),
            "exchange_rate": obj.get("exchange_rate"),
            "currency_code": obj.get("currency_code"),
            "vat_treatment": obj.get("vat_treatment"),
            "vat_reg_no": obj.get("vat_reg_no"),
            "country_code": obj.get("country_code"),
            "is_taxable": obj.get("is_taxable"),
            "tax_id": obj.get("tax_id"),
            "tax_authority_id": obj.get("tax_authority_id"),
            "tax_authority_name": obj.get("tax_authority_name"),
            "tax_exemption_id": obj.get("tax_exemption_id"),
            "tax_exemption_code": obj.get("tax_exemption_code"),
            "default_templates": CreateASubscriptionRequestCustomerDefaultTemplates.from_dict(obj["default_templates"]) if obj.get("default_templates") is not None else None,
            "place_of_contact": obj.get("place_of_contact"),
            "gst_no": obj.get("gst_no"),
            "gst_treatment": obj.get("gst_treatment")
        })
        return _obj



# coding: utf-8

"""
    Hosted-Pages

    Zoho Billing provides a hosted payment page to integrate with your websites. You can securely integrate with Zoho Billing for collecting your customer's sensitive card information through the hosted page. These Hosted Pages will expire within one hour.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RetrieveAHostedPageResponseDataInvoicePaymentsInner(BaseModel):
    """
    RetrieveAHostedPageResponseDataInvoicePaymentsInner
    """ # noqa: E501
    payment_id: Optional[StrictStr] = Field(default=None, description="The payment ID of the payment made for the invoice.")
    payment_mode: Optional[StrictStr] = Field(default=None, description="The mode in which payment is made for the invoice. This can be <code>check</code>, <code>cash</code>, <code>creditcard</code>, <code>banktransfer</code>, <code>bankremittance</code>, <code>autotransaction</code> or <code>others</code>.")
    invoice_payment_id: Optional[StrictStr] = Field(default=None, description="Unique ID generated for an instalment of payment made for a particular invoice.")
    gateway_transaction_id: Optional[StrictStr] = Field(default=None, description="Gateway transaction ID provided for the payment made to the invoice. This is applicable only if <code>payment_mode</code> is autotransaction.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the plan exclusive to this subscription. This will be displayed in place of the plan name in invoices generated for this subscription.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date at which the comment was commented.", alias="date")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number of the invoice for which payment is made.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount that needs to be charged for the subscription.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This will be the exchange rate provided for the organization's currency and the customer's currency. The subscription fee would be the multiplicative product of the original price and the exchange rate.")
    __properties: ClassVar[List[str]] = ["payment_id", "payment_mode", "invoice_payment_id", "gateway_transaction_id", "description", "date", "reference_number", "amount", "exchange_rate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveAHostedPageResponseDataInvoicePaymentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveAHostedPageResponseDataInvoicePaymentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_id": obj.get("payment_id"),
            "payment_mode": obj.get("payment_mode"),
            "invoice_payment_id": obj.get("invoice_payment_id"),
            "gateway_transaction_id": obj.get("gateway_transaction_id"),
            "description": obj.get("description"),
            "date": obj.get("date"),
            "reference_number": obj.get("reference_number"),
            "amount": obj.get("amount"),
            "exchange_rate": obj.get("exchange_rate")
        })
        return _obj



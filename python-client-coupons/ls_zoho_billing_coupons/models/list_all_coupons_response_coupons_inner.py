# coding: utf-8

"""
    Coupons

    Coupons are used to provide discounts and special offers to customers. These coupons can be applied to a subscription at any time.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ListAllCouponsResponseCouponsInner(BaseModel):
    """
    ListAllCouponsResponseCouponsInner
    """ # noqa: E501
    coupon_code: Optional[StrictStr] = Field(default=None, description="Unique string of your choice which lets you identify this coupon.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the coupon to be displayed in the interface and invoices.")
    description: Optional[StrictStr] = Field(default=None, description="A small description about the coupon.")
    type: Optional[StrictStr] = Field(default=None, description="This indicates whether the coupon is to be applied only once, particular number of times or every time an invoice is raised for the subscription. It can either be <code>one_time</code>, <code>duration</code>, <code>forever</code>.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the coupon. It can either be <code>active</code>, <code>inactive</code>, <code>expired</code> or <code>maxed_out</code>")
    discount_by: Optional[StrictStr] = Field(default=None, description="Percentage off or Flat rate discounts can be offered. The value can either be <code>flat</code> or <code>percentage</code>.")
    discount_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value of the discount associated with a coupon. Depending on the value of <code>discount_by</code>, it can be flat discount or a percentage value. Discount will be deducted from the plans/addons the coupon is associated with.")
    product_id: Optional[StrictStr] = Field(default=None, description="The Product ID of the product for which the coupon has to be created.")
    max_redemption: Optional[StrictInt] = Field(default=None, description="Maximum number of subscriptions the coupon can be used for. The status of the coupon will be changed to <code>maxed_out</code> once this limit is reached.")
    redemption_count: Optional[StrictInt] = Field(default=None, description="Number of subscriptions the coupon has been used for at present.")
    expiry_at: Optional[StrictStr] = Field(default=None, description="Date on which the coupon expires. The coupon cannot be applied to new subscriptions after this date. However, coupons with <code>type</code>=<code>forever</code> already applied to subscriptions can still be redeemed.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time at which the coupon was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time at which the coupon details were last updated.")
    __properties: ClassVar[List[str]] = ["coupon_code", "name", "description", "type", "status", "discount_by", "discount_value", "product_id", "max_redemption", "redemption_count", "expiry_at", "created_time", "updated_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListAllCouponsResponseCouponsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListAllCouponsResponseCouponsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coupon_code": obj.get("coupon_code"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "discount_by": obj.get("discount_by"),
            "discount_value": obj.get("discount_value"),
            "product_id": obj.get("product_id"),
            "max_redemption": obj.get("max_redemption"),
            "redemption_count": obj.get("redemption_count"),
            "expiry_at": obj.get("expiry_at"),
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time")
        })
        return _obj



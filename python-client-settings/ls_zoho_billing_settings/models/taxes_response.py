# coding: utf-8

"""
    Settings

    Tax Settings Related APIs.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TaxesResponse(BaseModel):
    """
    TaxesResponse
    """ # noqa: E501
    is_default_tax: Optional[StrictStr] = Field(default=None, description="Set to true for default taxes.")
    is_editable: Optional[StrictStr] = Field(default=None, description="Set to true for editable taxes.")
    tax_authority_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax authority. Tax authority depends on the location of the customer. For example, if the customer is located in NY, then the tax authority is NY tax authority.")
    tax_authority_name: Optional[StrictStr] = Field(default=None, description="Unique name of the tax authority. Either tax_authority_id or tax_authority_name can be given.")
    tax_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax or tax group that can be collected from the contact. Tax can be given only if <code>is_taxable</code> is <code>true</code>.")
    tax_name: Optional[StrictStr] = Field(default=None, description="Name of the tax to which subscription is associated.")
    tax_percentage: Optional[StrictStr] = Field(default=None, description="Percentage of tax.")
    tax_type: Optional[StrictStr] = Field(default=None, description="Specifies whether the tax is Simple tax or Tax Group.")
    __properties: ClassVar[List[str]] = ["is_default_tax", "is_editable", "tax_authority_id", "tax_authority_name", "tax_id", "tax_name", "tax_percentage", "tax_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaxesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaxesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "is_default_tax": obj.get("is_default_tax"),
            "is_editable": obj.get("is_editable"),
            "tax_authority_id": obj.get("tax_authority_id"),
            "tax_authority_name": obj.get("tax_authority_name"),
            "tax_id": obj.get("tax_id"),
            "tax_name": obj.get("tax_name"),
            "tax_percentage": obj.get("tax_percentage"),
            "tax_type": obj.get("tax_type")
        })
        return _obj



# coding: utf-8

"""
    Quotes

    A quote is an approximation, of the prices, which a seller projects to a buyer. There can be different quotes to different buyers.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1001</span></td><td>Quote Number already exist</td></tr><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Quote does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2007</span></td><td>Quote cannot be raised for items that have been deleted or marked as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 4041</span></td><td>Quote status cannot be changed to Draft</td></tr><tr><td><span style=\"color:#FF0000;\"> 9526</span></td><td>Please enter a valid retainer percentage. It should be greater than 0 and less than or equal to 100</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_quotes.models.estimate_response import EstimateResponse

class TestEstimateResponse(unittest.TestCase):
    """EstimateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EstimateResponse:
        """Test EstimateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EstimateResponse`
        """
        model = EstimateResponse()
        if include_optional:
            return EstimateResponse(
                estimate_id = '982000000567011',
                estimate_number = 'EST-00002',
                var_date = '2013-11-18',
                reference_number = 'QRT-12346',
                is_pre_gst = False,
                place_of_supply = 'TN',
                gst_no = '22AAAAA0000A1Z5',
                gst_treatment = 'business_gst',
                tax_treatment = 'vat_registered',
                status = 'draft',
                customer_id = '982000000567001',
                customer_name = 'Bowman & Co',
                contact_persons = ["982000000567003","982000000567019"],
                currency_id = '982000000000190',
                currency_code = 'USD',
                exchange_rate = 1,
                expiry_date = '2013-11-30',
                discount = 0,
                is_discount_before_tax = True,
                discount_type = 'item_level',
                is_inclusive_tax = False,
                line_items = [
                    ls_zoho_billing_quotes.models.line_items_inner.line_items_inner(
                        item_id = ' ', 
                        name = 'Hard Drive', 
                        description = '500GB, USB 2.0 interface 1400 rpm, protective hard case.', 
                        item_order = 1, 
                        bcy_rate = 120, 
                        rate = 120, 
                        quantity = 1, 
                        unit = ' ', 
                        discount_amount = 0, 
                        discount = 0, 
                        tax_id = '982000000557028', 
                        tax_name = 'VAT', 
                        tax_type = 'tax', 
                        tax_percentage = 12.5, 
                        item_total = 120, )
                    ],
                shipping_charge = '0',
                adjustment = 0,
                adjustment_description = ' ',
                sub_total = 153,
                total = 40.6,
                tax_total = 22.6,
                price_precision = 2,
                taxes = [
                    ls_zoho_billing_quotes.models.taxes_inner.taxes_inner(
                        tax_name = 'VAT', 
                        tax_amount = 19.13, )
                    ],
                billing_address = ls_zoho_billing_quotes.models.billing_address.billing_address(
                    address = '4900 Hopyard Rd, Suite 310', 
                    city = 'Pleasanton', 
                    state = 'CA', 
                    zip = '94588', 
                    country = 'U.S.A', 
                    fax = '1234', ),
                shipping_address = ls_zoho_billing_quotes.models.shipping_address.shipping_address(
                    address = '4900 Hopyard Rd, Suite 310', 
                    city = 'Pleasanton', 
                    state = 'CA', 
                    zip = '94588', 
                    country = 'U.S.A', 
                    fax = '1234', ),
                notes = 'Looking forward for your business.',
                terms = 'Terms & Conditions apply',
                custom_fields = [
                    ls_zoho_billing_quotes.models.custom_fields_inner.custom_fields_inner(
                        customfield_id = 439910000000236000, 
                        data_type = 'number', 
                        index = 1, 
                        label = 'Delivery Date', 
                        show_on_pdf = False, 
                        show_in_all_pdf = true, 
                        value = '15 Dec 2013', )
                    ],
                template_id = '982000000000143',
                template_name = 'Service - Classic',
                created_time = '2013-11-18T02:17:40-0800',
                last_modified_time = '2013-12-18T04:46:45-0500',
                salesperson_id = '982000000567003',
                salesperson_name = 'Will smith',
                project = ls_zoho_billing_quotes.models.project.project(
                    project_id = '90300000087378', 
                    project_name = 'Sample Project', )
            )
        else:
            return EstimateResponse(
        )
        """

    def testEstimateResponse(self):
        """Test EstimateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

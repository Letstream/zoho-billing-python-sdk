# coding: utf-8

"""
    Quotes

    A quote is an approximation, of the prices, which a seller projects to a buyer. There can be different quotes to different buyers.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1001</span></td><td>Quote Number already exist</td></tr><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Quote does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2007</span></td><td>Quote cannot be raised for items that have been deleted or marked as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 4041</span></td><td>Quote status cannot be changed to Draft</td></tr><tr><td><span style=\"color:#FF0000;\"> 9526</span></td><td>Please enter a valid retainer percentage. It should be greater than 0 and less than or equal to 100</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_quotes.models.mark_an_estimate_as_accepted_response import MarkAnEstimateAsAcceptedResponse

class TestMarkAnEstimateAsAcceptedResponse(unittest.TestCase):
    """MarkAnEstimateAsAcceptedResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MarkAnEstimateAsAcceptedResponse:
        """Test MarkAnEstimateAsAcceptedResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MarkAnEstimateAsAcceptedResponse`
        """
        model = MarkAnEstimateAsAcceptedResponse()
        if include_optional:
            return MarkAnEstimateAsAcceptedResponse(
                code = 0,
                message = 'Estimate status has been changed to Accepted.'
            )
        else:
            return MarkAnEstimateAsAcceptedResponse(
        )
        """

    def testMarkAnEstimateAsAcceptedResponse(self):
        """Test MarkAnEstimateAsAcceptedResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

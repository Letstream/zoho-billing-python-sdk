# coding: utf-8

"""
    Quotes

    A quote is an approximation, of the prices, which a seller projects to a buyer. There can be different quotes to different buyers.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1001</span></td><td>Quote Number already exist</td></tr><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Quote does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2007</span></td><td>Quote cannot be raised for items that have been deleted or marked as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 4041</span></td><td>Quote status cannot be changed to Draft</td></tr><tr><td><span style=\"color:#FF0000;\"> 9526</span></td><td>Please enter a valid retainer percentage. It should be greater than 0 and less than or equal to 100</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LineItemsInner(BaseModel):
    """
    LineItemsInner
    """ # noqa: E501
    item_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the item.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the line item")
    description: Optional[StrictStr] = Field(default=None, description="The description of the line items")
    item_order: Optional[StrictInt] = Field(default=None, description="The order of the line item_order")
    bcy_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="base currency rate")
    rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rate of the line item.")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of line item")
    unit: Optional[StrictStr] = Field(default=None, description="Unit of measuring the line item e.g. kgs, Nos.")
    discount_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The discount amount on the line item")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discount applied to the invoice. It can be either in % or in amount. e.g. 12.5% or 190.")
    tax_id: Optional[StrictStr] = Field(default=None, description="ID of the tax or tax group applied to the quote")
    tax_name: Optional[StrictStr] = Field(default=None, description="The name of the tax")
    tax_type: Optional[StrictStr] = Field(default=None, description="The type of the tax")
    tax_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The  percentage of tax levied")
    item_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of the line items")
    __properties: ClassVar[List[str]] = ["item_id", "name", "description", "item_order", "bcy_rate", "rate", "quantity", "unit", "discount_amount", "discount", "tax_id", "tax_name", "tax_type", "tax_percentage", "item_total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LineItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LineItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "item_id": obj.get("item_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "item_order": obj.get("item_order"),
            "bcy_rate": obj.get("bcy_rate"),
            "rate": obj.get("rate"),
            "quantity": obj.get("quantity"),
            "unit": obj.get("unit"),
            "discount_amount": obj.get("discount_amount"),
            "discount": obj.get("discount"),
            "tax_id": obj.get("tax_id"),
            "tax_name": obj.get("tax_name"),
            "tax_type": obj.get("tax_type"),
            "tax_percentage": obj.get("tax_percentage"),
            "item_total": obj.get("item_total")
        })
        return _obj



# coding: utf-8

"""
    Quotes

    A quote is an approximation, of the prices, which a seller projects to a buyer. There can be different quotes to different buyers.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1001</span></td><td>Quote Number already exist</td></tr><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Quote does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2007</span></td><td>Quote cannot be raised for items that have been deleted or marked as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 4041</span></td><td>Quote status cannot be changed to Draft</td></tr><tr><td><span style=\"color:#FF0000;\"> 9526</span></td><td>Please enter a valid retainer percentage. It should be greater than 0 and less than or equal to 100</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ListEstimatesResponseEstimatesInner(BaseModel):
    """
    ListEstimatesResponseEstimatesInner
    """ # noqa: E501
    estimate_id: Optional[StrictStr] = Field(default=None, description="The  unique id of a particular quote")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the Customer to whom the quote is sent.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID on the quote.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the quote. Allowed Values<code>draft</code>, <code>sent</code>,<code> invoiced </code>, <code>accepted</code>, <code>declined</code> and <code>expired</code>")
    estimate_number: Optional[StrictStr] = Field(default=None, description="quote Serial number.")
    reference_number: Optional[StrictStr] = Field(default=None, description="Transaction reference number.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on the quote.", alias="date")
    currency_id: Optional[StrictStr] = Field(default=None, description="The Unique ID of the customer")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code of the currency in which the customer wants to pay. If currency_code is not specified here, the currency chosen in your Zoho Billing organization will be used for billing. currency_id and currency_symbol are set automatically in accordance to the currency_code.")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="quote total value.")
    created_time: Optional[StrictStr] = Field(default=None, description="The time of creation of the quote")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Last date of modification in quote")
    accepted_date: Optional[StrictStr] = Field(default=None, description="The date of acceptance of the quotes")
    declined_date: Optional[StrictStr] = Field(default=None, description="The date of declination of the quotes")
    expiry_date: Optional[StrictStr] = Field(default=None, description="The date of expiration of the quotes")
    has_attachment: Optional[StrictBool] = Field(default=None, description="To check for any attachment")
    is_viewed_by_client: Optional[StrictBool] = Field(default=None, description="To see view status, if viewed by client the quote from the portal or not")
    client_viewed_time: Optional[StrictStr] = Field(default=None, description="Time when the client viewed the quote")
    __properties: ClassVar[List[str]] = ["estimate_id", "customer_name", "customer_id", "status", "estimate_number", "reference_number", "date", "currency_id", "currency_code", "total", "created_time", "last_modified_time", "accepted_date", "declined_date", "expiry_date", "has_attachment", "is_viewed_by_client", "client_viewed_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListEstimatesResponseEstimatesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListEstimatesResponseEstimatesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "estimate_id": obj.get("estimate_id"),
            "customer_name": obj.get("customer_name"),
            "customer_id": obj.get("customer_id"),
            "status": obj.get("status"),
            "estimate_number": obj.get("estimate_number"),
            "reference_number": obj.get("reference_number"),
            "date": obj.get("date"),
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "total": obj.get("total"),
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "accepted_date": obj.get("accepted_date"),
            "declined_date": obj.get("declined_date"),
            "expiry_date": obj.get("expiry_date"),
            "has_attachment": obj.get("has_attachment"),
            "is_viewed_by_client": obj.get("is_viewed_by_client"),
            "client_viewed_time": obj.get("client_viewed_time")
        })
        return _obj



# coding: utf-8

"""
    Quotes

    A quote is an approximation, of the prices, which a seller projects to a buyer. There can be different quotes to different buyers.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1001</span></td><td>Quote Number already exist</td></tr><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Quote does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2007</span></td><td>Quote cannot be raised for items that have been deleted or marked as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 4041</span></td><td>Quote status cannot be changed to Draft</td></tr><tr><td><span style=\"color:#FF0000;\"> 9526</span></td><td>Please enter a valid retainer percentage. It should be greater than 0 and less than or equal to 100</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CustomFieldsInner(BaseModel):
    """
    CustomFieldsInner
    """ # noqa: E501
    customfield_id: Optional[StrictInt] = Field(default=None, description="Unique ID of the custom field")
    data_type: Optional[StrictStr] = Field(default=None, description="Data type of the custom field")
    index: Optional[StrictInt] = Field(default=None, description="An index for the custom field.")
    label: Optional[StrictStr] = Field(default=None, description="Label for the quote")
    show_on_pdf: Optional[StrictBool] = Field(default=None, description="Show exported file in PDF format")
    show_in_all_pdf: Optional[Any] = Field(default=None, description="Enable/Disable show this custom field on all the pdf")
    value: Optional[StrictStr] = Field(default=None, description="Value for the custom field")
    __properties: ClassVar[List[str]] = ["customfield_id", "data_type", "index", "label", "show_on_pdf", "show_in_all_pdf", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomFieldsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if show_in_all_pdf (nullable) is None
        # and model_fields_set contains the field
        if self.show_in_all_pdf is None and "show_in_all_pdf" in self.model_fields_set:
            _dict['show_in_all_pdf'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomFieldsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customfield_id": obj.get("customfield_id"),
            "data_type": obj.get("data_type"),
            "index": obj.get("index"),
            "label": obj.get("label"),
            "show_on_pdf": obj.get("show_on_pdf"),
            "show_in_all_pdf": obj.get("show_in_all_pdf"),
            "value": obj.get("value")
        })
        return _obj



# coding: utf-8

"""
    Quotes

    A quote is an approximation, of the prices, which a seller projects to a buyer. There can be different quotes to different buyers.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1001</span></td><td>Quote Number already exist</td></tr><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Quote does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2007</span></td><td>Quote cannot be raised for items that have been deleted or marked as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 4041</span></td><td>Quote status cannot be changed to Draft</td></tr><tr><td><span style=\"color:#FF0000;\"> 9526</span></td><td>Please enter a valid retainer percentage. It should be greater than 0 and less than or equal to 100</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateCommentResponseComment(BaseModel):
    """
    Comment on the quote
    """ # noqa: E501
    comment_id: Optional[StrictStr] = Field(default=None, description="The ID of the comment")
    estimate_id: Optional[StrictStr] = Field(default=None, description="The  unique id of a particular quote")
    description: Optional[StrictStr] = Field(default=None, description="The description of the line items")
    commented_by_id: Optional[StrictStr] = Field(default=None, description="Comment by comment ID")
    commented_by: Optional[StrictStr] = Field(default=None, description="Name of the person who has commented")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on the quote.", alias="date")
    date_description: Optional[StrictStr] = Field(default=None, description="Number of days since the comment has been made")
    time: Optional[StrictStr] = Field(default=None, description="time when quote was created")
    comment_type: Optional[StrictStr] = Field(default=None, description="Type of comment made")
    __properties: ClassVar[List[str]] = ["comment_id", "estimate_id", "description", "commented_by_id", "commented_by", "date", "date_description", "time", "comment_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateCommentResponseComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateCommentResponseComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment_id": obj.get("comment_id"),
            "estimate_id": obj.get("estimate_id"),
            "description": obj.get("description"),
            "commented_by_id": obj.get("commented_by_id"),
            "commented_by": obj.get("commented_by"),
            "date": obj.get("date"),
            "date_description": obj.get("date_description"),
            "time": obj.get("time"),
            "comment_type": obj.get("comment_type")
        })
        return _obj



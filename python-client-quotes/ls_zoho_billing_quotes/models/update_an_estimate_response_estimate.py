# coding: utf-8

"""
    Quotes

    A quote is an approximation, of the prices, which a seller projects to a buyer. There can be different quotes to different buyers.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1001</span></td><td>Quote Number already exist</td></tr><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Quote does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2007</span></td><td>Quote cannot be raised for items that have been deleted or marked as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 4041</span></td><td>Quote status cannot be changed to Draft</td></tr><tr><td><span style=\"color:#FF0000;\"> 9526</span></td><td>Please enter a valid retainer percentage. It should be greater than 0 and less than or equal to 100</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_quotes.models.billing_address import BillingAddress
from ls_zoho_billing_quotes.models.custom_fields_inner import CustomFieldsInner
from ls_zoho_billing_quotes.models.line_items_inner import LineItemsInner
from ls_zoho_billing_quotes.models.project import Project
from ls_zoho_billing_quotes.models.shipping_address import ShippingAddress
from ls_zoho_billing_quotes.models.taxes_inner import TaxesInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateAnEstimateResponseEstimate(BaseModel):
    """
    Quote to be created
    """ # noqa: E501
    estimate_id: Optional[StrictStr] = Field(default=None, description="The  unique id of a particular quote")
    estimate_number: Optional[StrictStr] = Field(default=None, description="quote Serial number.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on the quote.", alias="date")
    reference_number: Optional[StrictStr] = Field(default=None, description="Transaction reference number.")
    is_pre_gst: Optional[StrictBool] = Field(default=None, description="Applicable for transactions that fall before july 1, 2017")
    place_of_supply: Optional[StrictStr] = Field(default=None, description="Place where the goods/services are supplied to. (If not given, <code>place of contact</code> given for the contact will be taken)")
    gst_no: Optional[StrictStr] = Field(default=None, description="15 digit GST identification number of the customer.")
    gst_treatment: Optional[StrictStr] = Field(default=None, description="Choose whether the contact is GST registered/unregistered/consumer/overseas. Allowed values are <code> business_gst </code> , <code> business_none </code> , <code> overseas </code> , <code> consumer </code>.")
    tax_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment for the quote.Allowed Values:</br><code>home_country_mexico</code>,<code>border_region_mexico</code>,<code>non_mexico</code> supported only for <b>MX</b>.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the quote. Allowed Values<code>draft</code>, <code>sent</code>,<code> invoiced </code>, <code>accepted</code>, <code>declined</code> and <code>expired</code>")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID on the quote.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the Customer to whom the quote is sent.")
    contact_persons: Optional[List[StrictStr]] = Field(default=None, description="Array of contact person(s) for whom quote has to be sent.")
    currency_id: Optional[StrictStr] = Field(default=None, description="The Unique ID of the customer")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code of the currency in which the customer wants to pay. If currency_code is not specified here, the currency chosen in your Zoho Billing organization will be used for billing. currency_id and currency_symbol are set automatically in accordance to the currency_code.")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Foreign Exchange rate of the currency.")
    expiry_date: Optional[StrictStr] = Field(default=None, description="The date of expiration of the quotes")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discount applied to the invoice. It can be either in % or in amount. e.g. 12.5% or 190.")
    is_discount_before_tax: Optional[StrictBool] = Field(default=None, description="Used to specify how the discount has to applied. Either before or after the calculation of tax.")
    discount_type: Optional[StrictStr] = Field(default=None, description="How the discount is specified. Allowed values are entity_level or item_level.Allowed Values: <code>entity_level</code> and <code>item_level</code>")
    is_inclusive_tax: Optional[StrictBool] = Field(default=None, description="Used to specify whether the line item rates are inclusive or exclusive of tax.")
    line_items: Optional[List[LineItemsInner]] = Field(default=None, description="Line items of an quote.")
    shipping_charge: Optional[StrictStr] = Field(default=None, description="Shipping charges applied to the invoice.")
    adjustment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Adjustments made to the invoice.")
    adjustment_description: Optional[StrictStr] = Field(default=None, description="Customize the adjustment description. E.g. Rounding off value.")
    sub_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The sub total of the all items")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="quote total value.")
    tax_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of the tax levied")
    price_precision: Optional[StrictInt] = Field(default=None, description="The precision value on the price")
    taxes: Optional[List[TaxesInner]] = Field(default=None, description="List of the taxes levied")
    billing_address: Optional[BillingAddress] = None
    shipping_address: Optional[ShippingAddress] = None
    notes: Optional[StrictStr] = Field(default=None, description="The notes added below expressing gratitude or for conveying some information.")
    terms: Optional[StrictStr] = Field(default=None, description="Enlist the terms & conditions for quote")
    custom_fields: Optional[List[CustomFieldsInner]] = Field(default=None, description="Custom fields for a quote.")
    template_id: Optional[StrictStr] = Field(default=None, description="ID of the template used for the quote")
    template_name: Optional[StrictStr] = Field(default=None, description="Name of the template used")
    created_time: Optional[StrictStr] = Field(default=None, description="The time of creation of the quote")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Last date of modification in quote")
    salesperson_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the sales person")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of the sales person.")
    project: Optional[Project] = None
    __properties: ClassVar[List[str]] = ["estimate_id", "estimate_number", "date", "reference_number", "is_pre_gst", "place_of_supply", "gst_no", "gst_treatment", "tax_treatment", "status", "customer_id", "customer_name", "contact_persons", "currency_id", "currency_code", "exchange_rate", "expiry_date", "discount", "is_discount_before_tax", "discount_type", "is_inclusive_tax", "line_items", "shipping_charge", "adjustment", "adjustment_description", "sub_total", "total", "tax_total", "price_precision", "taxes", "billing_address", "shipping_address", "notes", "terms", "custom_fields", "template_id", "template_name", "created_time", "last_modified_time", "salesperson_id", "salesperson_name", "project"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAnEstimateResponseEstimate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taxes (list)
        _items = []
        if self.taxes:
            for _item_taxes in self.taxes:
                if _item_taxes:
                    _items.append(_item_taxes.to_dict())
            _dict['taxes'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAnEstimateResponseEstimate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "estimate_id": obj.get("estimate_id"),
            "estimate_number": obj.get("estimate_number"),
            "date": obj.get("date"),
            "reference_number": obj.get("reference_number"),
            "is_pre_gst": obj.get("is_pre_gst"),
            "place_of_supply": obj.get("place_of_supply"),
            "gst_no": obj.get("gst_no"),
            "gst_treatment": obj.get("gst_treatment"),
            "tax_treatment": obj.get("tax_treatment"),
            "status": obj.get("status"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "contact_persons": obj.get("contact_persons"),
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "exchange_rate": obj.get("exchange_rate"),
            "expiry_date": obj.get("expiry_date"),
            "discount": obj.get("discount"),
            "is_discount_before_tax": obj.get("is_discount_before_tax"),
            "discount_type": obj.get("discount_type"),
            "is_inclusive_tax": obj.get("is_inclusive_tax"),
            "line_items": [LineItemsInner.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "shipping_charge": obj.get("shipping_charge"),
            "adjustment": obj.get("adjustment"),
            "adjustment_description": obj.get("adjustment_description"),
            "sub_total": obj.get("sub_total"),
            "total": obj.get("total"),
            "tax_total": obj.get("tax_total"),
            "price_precision": obj.get("price_precision"),
            "taxes": [TaxesInner.from_dict(_item) for _item in obj["taxes"]] if obj.get("taxes") is not None else None,
            "billing_address": BillingAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "notes": obj.get("notes"),
            "terms": obj.get("terms"),
            "custom_fields": [CustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "template_id": obj.get("template_id"),
            "template_name": obj.get("template_name"),
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "salesperson_id": obj.get("salesperson_id"),
            "salesperson_name": obj.get("salesperson_name"),
            "project": Project.from_dict(obj["project"]) if obj.get("project") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Quotes

    A quote is an approximation, of the prices, which a seller projects to a buyer. There can be different quotes to different buyers.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1001</span></td><td>Quote Number already exist</td></tr><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Quote does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2007</span></td><td>Quote cannot be raised for items that have been deleted or marked as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 4041</span></td><td>Quote status cannot be changed to Draft</td></tr><tr><td><span style=\"color:#FF0000;\"> 9526</span></td><td>Please enter a valid retainer percentage. It should be greater than 0 and less than or equal to 100</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ls_zoho_billing_quotes.models.get_estimate_email_content_response_emailtemplates_inner import GetEstimateEmailContentResponseEmailtemplatesInner
from ls_zoho_billing_quotes.models.get_estimate_email_content_response_from_emails_inner import GetEstimateEmailContentResponseFromEmailsInner
from ls_zoho_billing_quotes.models.to_contacts_inner import ToContactsInner
from typing import Optional, Set
from typing_extensions import Self

class GetEstimateEmailContentResponse(BaseModel):
    """
    GetEstimateEmailContentResponse
    """ # noqa: E501
    code: Optional[StrictInt] = None
    message: Optional[StrictStr] = None
    body: Optional[StrictStr] = Field(default=None, description="Body/content of an email has to be sent.")
    error_list: Optional[List[StrictStr]] = Field(default=None, description="Error list")
    subject: Optional[StrictStr] = Field(default=None, description="Subject of an email has to be sent.")
    emailtemplates: Optional[List[GetEstimateEmailContentResponseEmailtemplatesInner]] = Field(default=None, description="Email template used in the quote")
    to_contacts: Optional[List[ToContactsInner]] = Field(default=None, description="Email recepients")
    file_name: Optional[StrictStr] = Field(default=None, description="The name of the file to be attached")
    from_emails: Optional[List[GetEstimateEmailContentResponseFromEmailsInner]] = Field(default=None, description="Emails received")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID on the quote.")
    __properties: ClassVar[List[str]] = ["code", "message", "body", "error_list", "subject", "emailtemplates", "to_contacts", "file_name", "from_emails", "customer_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEstimateEmailContentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "code",
            "message",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in emailtemplates (list)
        _items = []
        if self.emailtemplates:
            for _item_emailtemplates in self.emailtemplates:
                if _item_emailtemplates:
                    _items.append(_item_emailtemplates.to_dict())
            _dict['emailtemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in to_contacts (list)
        _items = []
        if self.to_contacts:
            for _item_to_contacts in self.to_contacts:
                if _item_to_contacts:
                    _items.append(_item_to_contacts.to_dict())
            _dict['to_contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in from_emails (list)
        _items = []
        if self.from_emails:
            for _item_from_emails in self.from_emails:
                if _item_from_emails:
                    _items.append(_item_from_emails.to_dict())
            _dict['from_emails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEstimateEmailContentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "message": obj.get("message"),
            "body": obj.get("body"),
            "error_list": obj.get("error_list"),
            "subject": obj.get("subject"),
            "emailtemplates": [GetEstimateEmailContentResponseEmailtemplatesInner.from_dict(_item) for _item in obj["emailtemplates"]] if obj.get("emailtemplates") is not None else None,
            "to_contacts": [ToContactsInner.from_dict(_item) for _item in obj["to_contacts"]] if obj.get("to_contacts") is not None else None,
            "file_name": obj.get("file_name"),
            "from_emails": [GetEstimateEmailContentResponseFromEmailsInner.from_dict(_item) for _item in obj["from_emails"]] if obj.get("from_emails") is not None else None,
            "customer_id": obj.get("customer_id")
        })
        return _obj



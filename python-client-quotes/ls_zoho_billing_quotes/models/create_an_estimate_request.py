# coding: utf-8

"""
    Quotes

    A quote is an approximation, of the prices, which a seller projects to a buyer. There can be different quotes to different buyers.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 1001</span></td><td>Quote Number already exist</td></tr><tr><td><span style=\"color:#FF0000;\"> 1002</span></td><td>Quote does not exist</td></tr><td><span style=\"color:#FF0000;\"> 2007</span></td><td>Quote cannot be raised for items that have been deleted or marked as inactive</td></tr><tr><td><span style=\"color:#FF0000;\"> 4041</span></td><td>Quote status cannot be changed to Draft</td></tr><tr><td><span style=\"color:#FF0000;\"> 9526</span></td><td>Please enter a valid retainer percentage. It should be greater than 0 and less than or equal to 100</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_quotes.models.create_an_estimate_request_custom_fields_inner import CreateAnEstimateRequestCustomFieldsInner
from ls_zoho_billing_quotes.models.create_an_estimate_request_line_items_inner import CreateAnEstimateRequestLineItemsInner
from typing import Optional, Set
from typing_extensions import Self

class CreateAnEstimateRequest(BaseModel):
    """
    CreateAnEstimateRequest
    """ # noqa: E501
    customer_id: StrictStr = Field(description="Customer ID on the quote.")
    contact_persons: Optional[List[StrictStr]] = Field(default=None, description="Array of contact person(s) for whom quote has to be sent.")
    template_id: Optional[StrictStr] = Field(default=None, description="ID of the template used for the quote")
    place_of_supply: Optional[StrictStr] = Field(default=None, description="Place where the goods/services are supplied to. (If not given, <code>place of contact</code> given for the contact will be taken)")
    gst_treatment: Optional[StrictStr] = Field(default=None, description="Choose whether the contact is GST registered/unregistered/consumer/overseas. Allowed values are <code> business_gst </code> , <code> business_none </code> , <code> overseas </code> , <code> consumer </code>.")
    tax_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment for the quote.Allowed Values:</br><code>home_country_mexico</code>,<code>border_region_mexico</code>,<code>non_mexico</code> supported only for <b>MX</b>.")
    gst_no: Optional[StrictStr] = Field(default=None, description="15 digit GST identification number of the customer.")
    estimate_number: Optional[StrictStr] = Field(default=None, description="quote Serial number.")
    reference_number: Optional[StrictStr] = Field(default=None, description="Transaction reference number.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date on the quote.", alias="date")
    expiry_date: Optional[StrictStr] = Field(default=None, description="The date of expiration of the quotes")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Foreign Exchange rate of the currency.")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discount applied to the invoice. It can be either in % or in amount. e.g. 12.5% or 190.")
    is_discount_before_tax: Optional[StrictBool] = Field(default=None, description="Used to specify how the discount has to applied. Either before or after the calculation of tax.")
    discount_type: Optional[StrictStr] = Field(default=None, description="How the discount is specified. Allowed values are entity_level or item_level.Allowed Values: <code>entity_level</code> and <code>item_level</code>")
    is_inclusive_tax: Optional[StrictBool] = Field(default=None, description="Used to specify whether the line item rates are inclusive or exclusive of tax.")
    custom_body: Optional[StrictStr] = Field(default=None, description="Custom content of the email")
    custom_subject: Optional[StrictStr] = Field(default=None, description="Subjet for the email to be sent")
    salesperson_name: Optional[StrictStr] = Field(default=None, description="Name of the sales person.")
    custom_fields: Optional[List[CreateAnEstimateRequestCustomFieldsInner]] = Field(default=None, description="Custom fields for an quote.")
    line_items: List[CreateAnEstimateRequestLineItemsInner] = Field(description="Line items of an quote.")
    notes: Optional[StrictStr] = Field(default=None, description="The notes added below expressing gratitude or for conveying some information.")
    terms: Optional[StrictStr] = Field(default=None, description="Enlist the terms & conditions for quote")
    shipping_charge: Optional[StrictStr] = Field(default=None, description="Shipping charges applied to the invoice.")
    adjustment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Adjustments made to the invoice.")
    adjustment_description: Optional[StrictStr] = Field(default=None, description="Customize the adjustment description. E.g. Rounding off value.")
    tax_id: Optional[StrictStr] = Field(default=None, description="ID of the tax or tax group applied to the quote")
    tax_exemption_id: Optional[StrictStr] = Field(default=None, description="ID of the tax exemption.")
    tax_authority_id: Optional[StrictStr] = Field(default=None, description="ID of the tax authority. Tax authority depends on the location of the customer. For example, if the customer is located in NY, then the tax authority is NY tax authority.")
    avatax_use_code: Optional[StrictStr] = Field(default=None, description="Used to group like customers for exemption purposes. It is a custom value that links customers to a tax rule. Select from Avalara [standard codes][1] or enter a custom code.")
    avatax_tax_code: Optional[StrictStr] = Field(default=None, description="A tax code is a unique label used to group Items (products, services, or charges) together. <code>Maximum length [25]</code>")
    avatax_exempt_no: Optional[StrictStr] = Field(default=None, description="Exemption certificate number of the customer.")
    vat_treatment: Optional[StrictStr] = Field(default=None, description="(Optional) VAT treatment for the quotes. VAT treatment denotes the location of the customer, if the customer resides in UK then the VAT treatment is <code>uk</code>. If the customer is in an EU country & VAT registered, you are resides in Northen Ireland and selling Goods then his VAT treatment is <code>eu_vat_registered</code>, if he resides outside of the UK then his VAT treatment is <code>overseas</code> (For Pre Brexit, this can be split as <code>eu_vat_registered</code>, <code>eu_vat_not_registered</code> and <code>non_eu</code>).")
    project_id: Optional[StrictStr] = Field(default=None, description="ID of the project")
    __properties: ClassVar[List[str]] = ["customer_id", "contact_persons", "template_id", "place_of_supply", "gst_treatment", "tax_treatment", "gst_no", "estimate_number", "reference_number", "date", "expiry_date", "exchange_rate", "discount", "is_discount_before_tax", "discount_type", "is_inclusive_tax", "custom_body", "custom_subject", "salesperson_name", "custom_fields", "line_items", "notes", "terms", "shipping_charge", "adjustment", "adjustment_description", "tax_id", "tax_exemption_id", "tax_authority_id", "avatax_use_code", "avatax_tax_code", "avatax_exempt_no", "vat_treatment", "project_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAnEstimateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAnEstimateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_id": obj.get("customer_id"),
            "contact_persons": obj.get("contact_persons"),
            "template_id": obj.get("template_id"),
            "place_of_supply": obj.get("place_of_supply"),
            "gst_treatment": obj.get("gst_treatment"),
            "tax_treatment": obj.get("tax_treatment"),
            "gst_no": obj.get("gst_no"),
            "estimate_number": obj.get("estimate_number"),
            "reference_number": obj.get("reference_number"),
            "date": obj.get("date"),
            "expiry_date": obj.get("expiry_date"),
            "exchange_rate": obj.get("exchange_rate"),
            "discount": obj.get("discount"),
            "is_discount_before_tax": obj.get("is_discount_before_tax"),
            "discount_type": obj.get("discount_type"),
            "is_inclusive_tax": obj.get("is_inclusive_tax"),
            "custom_body": obj.get("custom_body"),
            "custom_subject": obj.get("custom_subject"),
            "salesperson_name": obj.get("salesperson_name"),
            "custom_fields": [CreateAnEstimateRequestCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "line_items": [CreateAnEstimateRequestLineItemsInner.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "notes": obj.get("notes"),
            "terms": obj.get("terms"),
            "shipping_charge": obj.get("shipping_charge"),
            "adjustment": obj.get("adjustment"),
            "adjustment_description": obj.get("adjustment_description"),
            "tax_id": obj.get("tax_id"),
            "tax_exemption_id": obj.get("tax_exemption_id"),
            "tax_authority_id": obj.get("tax_authority_id"),
            "avatax_use_code": obj.get("avatax_use_code"),
            "avatax_tax_code": obj.get("avatax_tax_code"),
            "avatax_exempt_no": obj.get("avatax_exempt_no"),
            "vat_treatment": obj.get("vat_treatment"),
            "project_id": obj.get("project_id")
        })
        return _obj



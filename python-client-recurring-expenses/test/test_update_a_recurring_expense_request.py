# coding: utf-8

"""
    Recurring Expenses

    Recurring expenses are those expenses that repeat itself after a fixed interval of time.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 4027</span></td><td>Please select a valid date range</td></tr><tr><td><span style=\"color:#FF0000;\"> 5012</span></td><td>Recurrence Name already exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_recurring_expenses.models.update_a_recurring_expense_request import UpdateARecurringExpenseRequest

class TestUpdateARecurringExpenseRequest(unittest.TestCase):
    """UpdateARecurringExpenseRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateARecurringExpenseRequest:
        """Test UpdateARecurringExpenseRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateARecurringExpenseRequest`
        """
        model = UpdateARecurringExpenseRequest()
        if include_optional:
            return UpdateARecurringExpenseRequest(
                account_id = '982000000561057',
                recurrence_name = 'Monthly Rental',
                start_date = '2016-11-19T00:00:00.000Z',
                gst_no = '22AAAAA0000A1Z5',
                source_of_supply = 'AP',
                destination_of_supply = 'TN',
                reverse_charge_tax_id = '982000000567254',
                custom_fields = [
                    ls_zoho_billing_recurring_expenses.models.custom_fields_inner.custom_fields_inner(
                        customfield_id = 46000000012845, 
                        value = 'Normal', )
                    ],
                line_items = [
                    ls_zoho_billing_recurring_expenses.models.line_items_inner.line_items_inner(
                        line_item_id = '10763000000140068', 
                        account_id = '982000000561057', 
                        description = ' ', 
                        amount = 112.5, 
                        tax_id = '982000000566007', 
                        item_order = '1', 
                        product_type = 'goods', 
                        acquisition_vat_id = ' ', 
                        reverse_charge_vat_id = ' ', 
                        reverse_charge_tax_id = '982000000567254', 
                        tax_exemption_code = '', 
                        tax_exemption_id = '982000000567267', )
                    ],
                end_date = ' ',
                recurrence_frequency = 'months',
                repeat_every = '1',
                amount = 112.5,
                vat_treatment = 'eu_vat_not_registered',
                product_type = 'goods',
                acquisition_vat_id = ' ',
                reverse_charge_vat_id = ' ',
                tax_id = '982000000566007',
                is_inclusive_tax = False,
                is_billable = True,
                customer_id = '982000000567001',
                project_id = ' ',
                currency_id = '982000000567001',
                exchange_rate = 1
            )
        else:
            return UpdateARecurringExpenseRequest(
                account_id = '982000000561057',
                recurrence_name = 'Monthly Rental',
                start_date = '2016-11-19T00:00:00.000Z',
                recurrence_frequency = 'months',
                repeat_every = '1',
                amount = 112.5,
        )
        """

    def testUpdateARecurringExpenseRequest(self):
        """Test UpdateARecurringExpenseRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

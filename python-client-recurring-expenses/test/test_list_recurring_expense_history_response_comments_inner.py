# coding: utf-8

"""
    Recurring Expenses

    Recurring expenses are those expenses that repeat itself after a fixed interval of time.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 4027</span></td><td>Please select a valid date range</td></tr><tr><td><span style=\"color:#FF0000;\"> 5012</span></td><td>Recurrence Name already exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_recurring_expenses.models.list_recurring_expense_history_response_comments_inner import ListRecurringExpenseHistoryResponseCommentsInner

class TestListRecurringExpenseHistoryResponseCommentsInner(unittest.TestCase):
    """ListRecurringExpenseHistoryResponseCommentsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListRecurringExpenseHistoryResponseCommentsInner:
        """Test ListRecurringExpenseHistoryResponseCommentsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListRecurringExpenseHistoryResponseCommentsInner`
        """
        model = ListRecurringExpenseHistoryResponseCommentsInner()
        if include_optional:
            return ListRecurringExpenseHistoryResponseCommentsInner(
                comment_id = '982000000567272',
                recurring_expense_id = '982000000567240',
                description = ' ',
                commented_by_id = '982000000554041',
                commented_by = 'John David',
                var_date = '2013-11-18',
                time = '2.41 AM',
                operation_type = 'Added',
                transaction_id = ' ',
                transaction_type = 'expense'
            )
        else:
            return ListRecurringExpenseHistoryResponseCommentsInner(
        )
        """

    def testListRecurringExpenseHistoryResponseCommentsInner(self):
        """Test ListRecurringExpenseHistoryResponseCommentsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

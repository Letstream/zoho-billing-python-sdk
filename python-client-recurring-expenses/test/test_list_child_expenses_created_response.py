# coding: utf-8

"""
    Recurring Expenses

    Recurring expenses are those expenses that repeat itself after a fixed interval of time.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 4027</span></td><td>Please select a valid date range</td></tr><tr><td><span style=\"color:#FF0000;\"> 5012</span></td><td>Recurrence Name already exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ls_zoho_billing_recurring_expenses.models.list_child_expenses_created_response import ListChildExpensesCreatedResponse

class TestListChildExpensesCreatedResponse(unittest.TestCase):
    """ListChildExpensesCreatedResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListChildExpensesCreatedResponse:
        """Test ListChildExpensesCreatedResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListChildExpensesCreatedResponse`
        """
        model = ListChildExpensesCreatedResponse()
        if include_optional:
            return ListChildExpensesCreatedResponse(
                code = 0,
                message = 'success',
                expensehistory = [
                    ls_zoho_billing_recurring_expenses.models.list_child_expenses_created_response_expensehistory_inner.list_child_expenses_created_response_expensehistory_inner(
                        expense_id = '982000000567250', 
                        date = '2013-11-18', 
                        account_name = 'Rent', 
                        customer_name = 'Bowman & Co', 
                        total = 128.25, 
                        status = 'active', 
                        vendor_name = ' ', 
                        paid_through_account_name = 'Undeposited Funds', )
                    ]
            )
        else:
            return ListChildExpensesCreatedResponse(
        )
        """

    def testListChildExpensesCreatedResponse(self):
        """Test ListChildExpensesCreatedResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

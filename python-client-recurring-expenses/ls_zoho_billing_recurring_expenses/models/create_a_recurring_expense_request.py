# coding: utf-8

"""
    Recurring Expenses

    Recurring expenses are those expenses that repeat itself after a fixed interval of time.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 4027</span></td><td>Please select a valid date range</td></tr><tr><td><span style=\"color:#FF0000;\"> 5012</span></td><td>Recurrence Name already exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_recurring_expenses.models.custom_fields_inner import CustomFieldsInner
from ls_zoho_billing_recurring_expenses.models.line_items_inner import LineItemsInner
from typing import Optional, Set
from typing_extensions import Self

class CreateARecurringExpenseRequest(BaseModel):
    """
    CreateARecurringExpenseRequest
    """ # noqa: E501
    account_id: StrictStr = Field(description="Unique ID of an account")
    recurrence_name: StrictStr = Field(description="Name of the Recurring Expense. <code>Maximum length [100]</code>")
    start_date: StrictStr = Field(description="Start date of the recurring expense. Expenses will not be generated for dates prior to the current date. <code>Format [yyyy-mm-dd]</code>.")
    gst_no: Optional[StrictStr] = Field(default=None, description="15 digit GST identification number of the vendor.")
    source_of_supply: Optional[StrictStr] = Field(default=None, description="Place from where the goods/services are supplied. (If not given, <code>place of contact</code> given for the contact will be taken)")
    destination_of_supply: Optional[StrictStr] = Field(default=None, description="Place where the goods/services are supplied to. (If not given, organisation's home state will be taken)")
    reverse_charge_tax_id: Optional[StrictStr] = Field(default=None, description="Enter reverse charge tax ID")
    custom_fields: Optional[List[CustomFieldsInner]] = Field(default=None, description="Custom fields for a recurring-expense.")
    line_items: Optional[List[LineItemsInner]] = None
    end_date: Optional[StrictStr] = Field(default=None, description="Date on which recurring expense has to expire. Can be left as empty to run forever. <code>Format [yyyy-mm-dd]</code>.")
    recurrence_frequency: StrictStr = Field(description="Frequency of the recurrance")
    repeat_every: StrictStr = Field(description="The cycle of recurrance")
    amount: Union[StrictFloat, StrictInt] = Field(description="Recurring Expense amount.")
    vat_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment for the expense. VAT treatment denotes the location of the vendor, if the vendor resides in UK then the VAT treatment is <code>uk</code>.If the vendor is in an EU country & VAT registered, you are resides in Northen Ireland and purchasing Goods then his VAT treatment is <code>eu_vat_registered</code> and if he resides outside the EU then his VAT treatment is <code>overseas</code>(For Pre Brexit, this can be split as <code>eu_vat_registered</code>, <code>eu_vat_not_registered</code> and <code>non_eu</code>).")
    product_type: Optional[StrictStr] = Field(default=None, description="Type of the expense. This denotes whether the expense is to be treated as a goods or service purchase. Allowed Values: <code>goods</code> and <code>service</code>.")
    acquisition_vat_id: Optional[StrictStr] = Field(default=None, description="This is the ID of the tax applied in case this is an EU - goods expense and acquisition VAT needs to be reported.")
    reverse_charge_vat_id: Optional[StrictStr] = Field(default=None, description="This is the ID of the tax applied in case this is a non UK - service expense and reverse charge VAT needs to be reported.")
    tax_id: Optional[StrictStr] = Field(default=None, description="Unique ID for the tax")
    is_inclusive_tax: Optional[StrictBool] = Field(default=None, description="To check if the total is inclusive of tax")
    is_billable: Optional[StrictBool] = Field(default=None, description="To check if the expense is billable")
    customer_id: Optional[StrictStr] = Field(default=None, description="Search expenses by customer id.")
    project_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax applied")
    currency_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the currency used")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Foreign exchange rate")
    __properties: ClassVar[List[str]] = ["account_id", "recurrence_name", "start_date", "gst_no", "source_of_supply", "destination_of_supply", "reverse_charge_tax_id", "custom_fields", "line_items", "end_date", "recurrence_frequency", "repeat_every", "amount", "vat_treatment", "product_type", "acquisition_vat_id", "reverse_charge_vat_id", "tax_id", "is_inclusive_tax", "is_billable", "customer_id", "project_id", "currency_id", "exchange_rate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateARecurringExpenseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateARecurringExpenseRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "recurrence_name": obj.get("recurrence_name"),
            "start_date": obj.get("start_date"),
            "gst_no": obj.get("gst_no"),
            "source_of_supply": obj.get("source_of_supply"),
            "destination_of_supply": obj.get("destination_of_supply"),
            "reverse_charge_tax_id": obj.get("reverse_charge_tax_id"),
            "custom_fields": [CustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "line_items": [LineItemsInner.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "end_date": obj.get("end_date"),
            "recurrence_frequency": obj.get("recurrence_frequency"),
            "repeat_every": obj.get("repeat_every"),
            "amount": obj.get("amount"),
            "vat_treatment": obj.get("vat_treatment"),
            "product_type": obj.get("product_type"),
            "acquisition_vat_id": obj.get("acquisition_vat_id"),
            "reverse_charge_vat_id": obj.get("reverse_charge_vat_id"),
            "tax_id": obj.get("tax_id"),
            "is_inclusive_tax": obj.get("is_inclusive_tax"),
            "is_billable": obj.get("is_billable"),
            "customer_id": obj.get("customer_id"),
            "project_id": obj.get("project_id"),
            "currency_id": obj.get("currency_id"),
            "exchange_rate": obj.get("exchange_rate")
        })
        return _obj



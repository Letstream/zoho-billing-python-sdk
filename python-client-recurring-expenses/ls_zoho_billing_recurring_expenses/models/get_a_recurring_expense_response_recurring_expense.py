# coding: utf-8

"""
    Recurring Expenses

    Recurring expenses are those expenses that repeat itself after a fixed interval of time.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 4027</span></td><td>Please select a valid date range</td></tr><tr><td><span style=\"color:#FF0000;\"> 5012</span></td><td>Recurrence Name already exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_recurring_expenses.models.acquisition_vat_summary_inner import AcquisitionVatSummaryInner
from ls_zoho_billing_recurring_expenses.models.custom_fields_inner import CustomFieldsInner
from ls_zoho_billing_recurring_expenses.models.recurring_expense_response_line_item import RecurringExpenseResponseLineItem
from typing import Optional, Set
from typing_extensions import Self

class GetARecurringExpenseResponseRecurringExpense(BaseModel):
    """
    GetARecurringExpenseResponseRecurringExpense
    """ # noqa: E501
    recurring_expense_id: Optional[StrictStr] = Field(default=None, description="ID of the recurring expense")
    recurrence_name: Optional[StrictStr] = Field(default=None, description="Name of the Recurring Expense. <code>Maximum length [100]</code>")
    start_date: Optional[StrictStr] = Field(default=None, description="Start date of the recurring expense. Expenses will not be generated for dates prior to the current date. <code>Format [yyyy-mm-dd]</code>.")
    end_date: Optional[StrictStr] = Field(default=None, description="Date on which recurring expense has to expire. Can be left as empty to run forever. <code>Format [yyyy-mm-dd]</code>.")
    is_pre_gst: Optional[StrictBool] = Field(default=None, description="Applicable for transactions that fall before july 1, 2017")
    source_of_supply: Optional[StrictStr] = Field(default=None, description="Place from where the goods/services are supplied. (If not given, <code>place of contact</code> given for the contact will be taken)")
    destination_of_supply: Optional[StrictStr] = Field(default=None, description="Place where the goods/services are supplied to. (If not given, organisation's home state will be taken)")
    gst_no: Optional[StrictStr] = Field(default=None, description="15 digit GST identification number of the vendor.")
    gst_treatment: Optional[StrictStr] = Field(default=None, description="Choose whether the contact is GST registered/unregistered/consumer/overseas. Allowed values are <code> business_gst </code> , <code> business_none </code> , <code> overseas </code> , <code> consumer </code>.")
    destination_of_supply_state: Optional[StrictStr] = Field(default=None, description="Place to where the goods/services are supplied")
    hsn_or_sac: Optional[StrictStr] = Field(default=None, description="Add HSN/SAC code for your goods/services")
    vat_treatment: Optional[StrictStr] = Field(default=None, description="VAT treatment for the expense. VAT treatment denotes the location of the vendor, if the vendor resides in UK then the VAT treatment is <code>uk</code>.If the vendor is in an EU country & VAT registered, you are resides in Northen Ireland and purchasing Goods then his VAT treatment is <code>eu_vat_registered</code> and if he resides outside the EU then his VAT treatment is <code>overseas</code>(For Pre Brexit, this can be split as <code>eu_vat_registered</code>, <code>eu_vat_not_registered</code> and <code>non_eu</code>).")
    reverse_charge_tax_id: Optional[StrictStr] = Field(default=None, description="Enter reverse charge tax ID")
    reverse_charge_tax_name: Optional[StrictStr] = Field(default=None, description="Enter reverse charge tax name")
    reverse_charge_tax_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tax percentage of the reverse charge")
    reverse_charge_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tax amount of the reverse charge")
    is_reverse_charge_applied: Optional[StrictBool] = Field(default=None, description="Applicable for transactions where you pay reverse charge")
    acquisition_vat_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the total acquisition vat.")
    reverse_charge_vat_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the total of the reverse charge vat.")
    acquisition_vat_summary: Optional[List[AcquisitionVatSummaryInner]] = Field(default=None, description="Summary of the VAT Acquistion")
    reverse_charge_vat_summary: Optional[List[AcquisitionVatSummaryInner]] = Field(default=None, description="Summary of the Reverse Charge")
    recurrence_frequency: Optional[StrictStr] = Field(default=None, description="Frequency of the recurrance")
    repeat_every: Optional[StrictStr] = Field(default=None, description="The cycle of recurrance")
    last_created_date: Optional[StrictStr] = Field(default=None, description="Search recurring expenses by date on when last expense was generated. Variants: <code>last_created_date_start</code>, <code>last_created_date_end</code>, <code>last_created_date_before</code> and <code>last_created_date_after</code> . <code>Format [yyyy-mm-dd]</code>")
    next_expense_date: Optional[StrictStr] = Field(default=None, description="Search recurring expenses by date on which next expense will be generated. Variants: <code>next_expense_date_start</code>, <code>next_expense_date_end</code>, <code>next_expense_date_before</code> and <code>next_expense_date_after</code> . <code>Format [yyyy-mm-dd]</code>")
    account_id: Optional[StrictStr] = Field(default=None, description="Unique ID of an account")
    account_name: Optional[StrictStr] = Field(default=None, description="For which Account the Expense is raised. <code>Maximum length [100]</code>")
    currency_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the currency used")
    currency_code: Optional[StrictStr] = Field(default=None, description="Code to denote th ecurrency used")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Foreign exchange rate")
    tax_id: Optional[StrictStr] = Field(default=None, description="Unique ID for the tax")
    tax_name: Optional[StrictStr] = Field(default=None, description="Name of the tax")
    tax_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of tax levied")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total value of tax applied")
    sub_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sub total of the expenses")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total expense")
    bcy_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total in base currency")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Recurring Expense amount.")
    description: Optional[StrictStr] = Field(default=None, description="Search recurring expenses by description. <code>Maximum length [100]</code>")
    is_inclusive_tax: Optional[StrictBool] = Field(default=None, description="To check if the total is inclusive of tax")
    is_billable: Optional[StrictBool] = Field(default=None, description="To check if the expense is billable")
    customer_id: Optional[StrictStr] = Field(default=None, description="Search expenses by customer id.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the Custome for which expense is raised. <code>Maximum length [100]</code>")
    status: Optional[StrictStr] = Field(default=None, description="Status of the recurring expense")
    created_time: Optional[StrictStr] = Field(default=None, description="Time expense was created")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Time the expense was last modified")
    project_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax applied")
    project_name: Optional[StrictStr] = Field(default=None, description="Name of the project being billed")
    custom_fields: Optional[List[CustomFieldsInner]] = Field(default=None, description="Custom fields for a recurring-expense.")
    line_item: Optional[RecurringExpenseResponseLineItem] = None
    __properties: ClassVar[List[str]] = ["recurring_expense_id", "recurrence_name", "start_date", "end_date", "is_pre_gst", "source_of_supply", "destination_of_supply", "gst_no", "gst_treatment", "destination_of_supply_state", "hsn_or_sac", "vat_treatment", "reverse_charge_tax_id", "reverse_charge_tax_name", "reverse_charge_tax_percentage", "reverse_charge_tax_amount", "is_reverse_charge_applied", "acquisition_vat_total", "reverse_charge_vat_total", "acquisition_vat_summary", "reverse_charge_vat_summary", "recurrence_frequency", "repeat_every", "last_created_date", "next_expense_date", "account_id", "account_name", "currency_id", "currency_code", "exchange_rate", "tax_id", "tax_name", "tax_percentage", "tax_amount", "sub_total", "total", "bcy_total", "amount", "description", "is_inclusive_tax", "is_billable", "customer_id", "customer_name", "status", "created_time", "last_modified_time", "project_id", "project_name", "custom_fields", "line_item"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetARecurringExpenseResponseRecurringExpense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in acquisition_vat_summary (list)
        _items = []
        if self.acquisition_vat_summary:
            for _item_acquisition_vat_summary in self.acquisition_vat_summary:
                if _item_acquisition_vat_summary:
                    _items.append(_item_acquisition_vat_summary.to_dict())
            _dict['acquisition_vat_summary'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reverse_charge_vat_summary (list)
        _items = []
        if self.reverse_charge_vat_summary:
            for _item_reverse_charge_vat_summary in self.reverse_charge_vat_summary:
                if _item_reverse_charge_vat_summary:
                    _items.append(_item_reverse_charge_vat_summary.to_dict())
            _dict['reverse_charge_vat_summary'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of line_item
        if self.line_item:
            _dict['line_item'] = self.line_item.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetARecurringExpenseResponseRecurringExpense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recurring_expense_id": obj.get("recurring_expense_id"),
            "recurrence_name": obj.get("recurrence_name"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "is_pre_gst": obj.get("is_pre_gst"),
            "source_of_supply": obj.get("source_of_supply"),
            "destination_of_supply": obj.get("destination_of_supply"),
            "gst_no": obj.get("gst_no"),
            "gst_treatment": obj.get("gst_treatment"),
            "destination_of_supply_state": obj.get("destination_of_supply_state"),
            "hsn_or_sac": obj.get("hsn_or_sac"),
            "vat_treatment": obj.get("vat_treatment"),
            "reverse_charge_tax_id": obj.get("reverse_charge_tax_id"),
            "reverse_charge_tax_name": obj.get("reverse_charge_tax_name"),
            "reverse_charge_tax_percentage": obj.get("reverse_charge_tax_percentage"),
            "reverse_charge_tax_amount": obj.get("reverse_charge_tax_amount"),
            "is_reverse_charge_applied": obj.get("is_reverse_charge_applied"),
            "acquisition_vat_total": obj.get("acquisition_vat_total"),
            "reverse_charge_vat_total": obj.get("reverse_charge_vat_total"),
            "acquisition_vat_summary": [AcquisitionVatSummaryInner.from_dict(_item) for _item in obj["acquisition_vat_summary"]] if obj.get("acquisition_vat_summary") is not None else None,
            "reverse_charge_vat_summary": [AcquisitionVatSummaryInner.from_dict(_item) for _item in obj["reverse_charge_vat_summary"]] if obj.get("reverse_charge_vat_summary") is not None else None,
            "recurrence_frequency": obj.get("recurrence_frequency"),
            "repeat_every": obj.get("repeat_every"),
            "last_created_date": obj.get("last_created_date"),
            "next_expense_date": obj.get("next_expense_date"),
            "account_id": obj.get("account_id"),
            "account_name": obj.get("account_name"),
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "exchange_rate": obj.get("exchange_rate"),
            "tax_id": obj.get("tax_id"),
            "tax_name": obj.get("tax_name"),
            "tax_percentage": obj.get("tax_percentage"),
            "tax_amount": obj.get("tax_amount"),
            "sub_total": obj.get("sub_total"),
            "total": obj.get("total"),
            "bcy_total": obj.get("bcy_total"),
            "amount": obj.get("amount"),
            "description": obj.get("description"),
            "is_inclusive_tax": obj.get("is_inclusive_tax"),
            "is_billable": obj.get("is_billable"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "status": obj.get("status"),
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time"),
            "project_id": obj.get("project_id"),
            "project_name": obj.get("project_name"),
            "custom_fields": [CustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "line_item": RecurringExpenseResponseLineItem.from_dict(obj["line_item"]) if obj.get("line_item") is not None else None
        })
        return _obj



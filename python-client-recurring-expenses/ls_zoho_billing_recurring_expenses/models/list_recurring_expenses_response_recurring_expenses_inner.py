# coding: utf-8

"""
    Recurring Expenses

    Recurring expenses are those expenses that repeat itself after a fixed interval of time.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 4027</span></td><td>Please select a valid date range</td></tr><tr><td><span style=\"color:#FF0000;\"> 5012</span></td><td>Recurrence Name already exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_recurring_expenses.models.custom_fields_inner import CustomFieldsInner
from typing import Optional, Set
from typing_extensions import Self

class ListRecurringExpensesResponseRecurringExpensesInner(BaseModel):
    """
    ListRecurringExpensesResponseRecurringExpensesInner
    """ # noqa: E501
    recurring_expense_id: Optional[StrictStr] = Field(default=None, description="ID of the recurring expense")
    recurrence_name: Optional[StrictStr] = Field(default=None, description="Name of the Recurring Expense. <code>Maximum length [100]</code>")
    recurrence_frequency: Optional[StrictStr] = Field(default=None, description="Frequency of the recurrance")
    repeat_every: Optional[StrictStr] = Field(default=None, description="The cycle of recurrance")
    last_created_date: Optional[StrictStr] = Field(default=None, description="Search recurring expenses by date on when last expense was generated. Variants: <code>last_created_date_start</code>, <code>last_created_date_end</code>, <code>last_created_date_before</code> and <code>last_created_date_after</code> . <code>Format [yyyy-mm-dd]</code>")
    next_expense_date: Optional[StrictStr] = Field(default=None, description="Search recurring expenses by date on which next expense will be generated. Variants: <code>next_expense_date_start</code>, <code>next_expense_date_end</code>, <code>next_expense_date_before</code> and <code>next_expense_date_after</code> . <code>Format [yyyy-mm-dd]</code>")
    account_name: Optional[StrictStr] = Field(default=None, description="For which Account the Expense is raised. <code>Maximum length [100]</code>")
    description: Optional[StrictStr] = Field(default=None, description="Search recurring expenses by description. <code>Maximum length [100]</code>")
    currency_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the currency used")
    currency_code: Optional[StrictStr] = Field(default=None, description="Code to denote th ecurrency used")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total expense")
    is_billable: Optional[StrictBool] = Field(default=None, description="To check if the expense is billable")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the Custome for which expense is raised. <code>Maximum length [100]</code>")
    status: Optional[StrictStr] = Field(default=None, description="Status of the recurring expense")
    custom_fields: Optional[List[CustomFieldsInner]] = Field(default=None, description="Custom fields for a recurring-expense.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time expense was created")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Time the expense was last modified")
    __properties: ClassVar[List[str]] = ["recurring_expense_id", "recurrence_name", "recurrence_frequency", "repeat_every", "last_created_date", "next_expense_date", "account_name", "description", "currency_id", "currency_code", "total", "is_billable", "customer_name", "status", "custom_fields", "created_time", "last_modified_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListRecurringExpensesResponseRecurringExpensesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListRecurringExpensesResponseRecurringExpensesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recurring_expense_id": obj.get("recurring_expense_id"),
            "recurrence_name": obj.get("recurrence_name"),
            "recurrence_frequency": obj.get("recurrence_frequency"),
            "repeat_every": obj.get("repeat_every"),
            "last_created_date": obj.get("last_created_date"),
            "next_expense_date": obj.get("next_expense_date"),
            "account_name": obj.get("account_name"),
            "description": obj.get("description"),
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "total": obj.get("total"),
            "is_billable": obj.get("is_billable"),
            "customer_name": obj.get("customer_name"),
            "status": obj.get("status"),
            "custom_fields": [CustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "created_time": obj.get("created_time"),
            "last_modified_time": obj.get("last_modified_time")
        })
        return _obj



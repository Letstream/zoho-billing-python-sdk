# coding: utf-8

"""
    Recurring Expenses

    Recurring expenses are those expenses that repeat itself after a fixed interval of time.<br><br><b>Possible error codes: </b><br><table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td><span style=\"color:#FF0000;\"> 4027</span></td><td>Please select a valid date range</td></tr><tr><td><span style=\"color:#FF0000;\"> 5012</span></td><td>Recurrence Name already exists</td></tr><tr><td><span style=\"color:#FF0000;\"> 5015</span></td><td>Enter a valid expense amount</td></tr></tbody></table>

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from ls_zoho_billing_recurring_expenses.models.create_a_recurring_expense_request import CreateARecurringExpenseRequest
from ls_zoho_billing_recurring_expenses.models.create_a_recurring_expense_response import CreateARecurringExpenseResponse
from ls_zoho_billing_recurring_expenses.models.delete_a_recurring_expense_response import DeleteARecurringExpenseResponse
from ls_zoho_billing_recurring_expenses.models.get_a_recurring_expense_response import GetARecurringExpenseResponse
from ls_zoho_billing_recurring_expenses.models.list_child_expenses_created_response import ListChildExpensesCreatedResponse
from ls_zoho_billing_recurring_expenses.models.list_recurring_expense_history_response import ListRecurringExpenseHistoryResponse
from ls_zoho_billing_recurring_expenses.models.list_recurring_expenses_response import ListRecurringExpensesResponse
from ls_zoho_billing_recurring_expenses.models.resume_a_recurring_expense_response import ResumeARecurringExpenseResponse
from ls_zoho_billing_recurring_expenses.models.stop_a_recurring_expense_response import StopARecurringExpenseResponse
from ls_zoho_billing_recurring_expenses.models.update_a_recurring_expense_request import UpdateARecurringExpenseRequest
from ls_zoho_billing_recurring_expenses.models.update_a_recurring_expense_response import UpdateARecurringExpenseResponse

from ls_zoho_billing_recurring_expenses.api_client import ApiClient, RequestSerialized
from ls_zoho_billing_recurring_expenses.api_response import ApiResponse
from ls_zoho_billing_recurring_expenses.rest import RESTResponseType


class RecurringExpensesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def recurringexpenses_get(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        recurrence_name: Annotated[Optional[StrictStr], Field(description="Search recurring expenses by recurring expense name. Variants: <code>recurrence_name_startswith</code> and <code>recurrence_name_contains</code>. <code>Maximum length [100]</code>")] = None,
        last_created_date: Annotated[Optional[StrictStr], Field(description="Search recurring expenses by date on when last expense was generated. Variants: <code>last_created_date_start</code>, <code>last_created_date_end</code>, <code>last_created_date_before</code> and <code>last_created_date_after</code> . <code>Format [yyyy-mm-dd]</code>")] = None,
        next_expense_date: Annotated[Optional[StrictStr], Field(description="Search recurring expenses by date on which next expense will be generated. Variants: <code>next_expense_date_start</code>, <code>next_expense_date_end</code>, <code>next_expense_date_before</code> and <code>next_expense_date_after</code> . <code>Format [yyyy-mm-dd]</code>")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Search expenses by expense status. Allowed Values <code>active</code>, <code>stopped</code> and <code>expired</code>")] = None,
        account_id: Annotated[Optional[StrictStr], Field(description="Unique ID of an account")] = None,
        account_name: Annotated[Optional[StrictStr], Field(description="Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code> . <code>Maximum length [100]</code>")] = None,
        amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>")] = None,
        customer_name: Annotated[Optional[StrictStr], Field(description="Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code> . <code>Maximum length [100]</code>")] = None,
        customer_id: Annotated[Optional[StrictStr], Field(description="Search expenses by customer id.")] = None,
        paid_through_account_id: Annotated[Optional[StrictStr], Field(description="Search expenses by paid through account id.")] = None,
        filter_by: Annotated[Optional[StrictStr], Field(description="Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Active</code>, <code>Status.Expired</code> and <code>Status.Stopped</code>")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code> .")] = None,
        sort_column: Annotated[Optional[StrictStr], Field(description="Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListRecurringExpensesResponse:
        """List recurring expenses

        List all the Expenses with pagination.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param recurrence_name: Search recurring expenses by recurring expense name. Variants: <code>recurrence_name_startswith</code> and <code>recurrence_name_contains</code>. <code>Maximum length [100]</code>
        :type recurrence_name: str
        :param last_created_date: Search recurring expenses by date on when last expense was generated. Variants: <code>last_created_date_start</code>, <code>last_created_date_end</code>, <code>last_created_date_before</code> and <code>last_created_date_after</code> . <code>Format [yyyy-mm-dd]</code>
        :type last_created_date: str
        :param next_expense_date: Search recurring expenses by date on which next expense will be generated. Variants: <code>next_expense_date_start</code>, <code>next_expense_date_end</code>, <code>next_expense_date_before</code> and <code>next_expense_date_after</code> . <code>Format [yyyy-mm-dd]</code>
        :type next_expense_date: str
        :param status: Search expenses by expense status. Allowed Values <code>active</code>, <code>stopped</code> and <code>expired</code>
        :type status: str
        :param account_id: Unique ID of an account
        :type account_id: str
        :param account_name: Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code> . <code>Maximum length [100]</code>
        :type account_name: str
        :param amount: Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>
        :type amount: float
        :param customer_name: Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code> . <code>Maximum length [100]</code>
        :type customer_name: str
        :param customer_id: Search expenses by customer id.
        :type customer_id: str
        :param paid_through_account_id: Search expenses by paid through account id.
        :type paid_through_account_id: str
        :param filter_by: Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Active</code>, <code>Status.Expired</code> and <code>Status.Stopped</code>
        :type filter_by: str
        :param search_text: Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code> .
        :type search_text: str
        :param sort_column: Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>
        :type sort_column: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_get_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            recurrence_name=recurrence_name,
            last_created_date=last_created_date,
            next_expense_date=next_expense_date,
            status=status,
            account_id=account_id,
            account_name=account_name,
            amount=amount,
            customer_name=customer_name,
            customer_id=customer_id,
            paid_through_account_id=paid_through_account_id,
            filter_by=filter_by,
            search_text=search_text,
            sort_column=sort_column,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListRecurringExpensesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recurringexpenses_get_with_http_info(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        recurrence_name: Annotated[Optional[StrictStr], Field(description="Search recurring expenses by recurring expense name. Variants: <code>recurrence_name_startswith</code> and <code>recurrence_name_contains</code>. <code>Maximum length [100]</code>")] = None,
        last_created_date: Annotated[Optional[StrictStr], Field(description="Search recurring expenses by date on when last expense was generated. Variants: <code>last_created_date_start</code>, <code>last_created_date_end</code>, <code>last_created_date_before</code> and <code>last_created_date_after</code> . <code>Format [yyyy-mm-dd]</code>")] = None,
        next_expense_date: Annotated[Optional[StrictStr], Field(description="Search recurring expenses by date on which next expense will be generated. Variants: <code>next_expense_date_start</code>, <code>next_expense_date_end</code>, <code>next_expense_date_before</code> and <code>next_expense_date_after</code> . <code>Format [yyyy-mm-dd]</code>")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Search expenses by expense status. Allowed Values <code>active</code>, <code>stopped</code> and <code>expired</code>")] = None,
        account_id: Annotated[Optional[StrictStr], Field(description="Unique ID of an account")] = None,
        account_name: Annotated[Optional[StrictStr], Field(description="Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code> . <code>Maximum length [100]</code>")] = None,
        amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>")] = None,
        customer_name: Annotated[Optional[StrictStr], Field(description="Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code> . <code>Maximum length [100]</code>")] = None,
        customer_id: Annotated[Optional[StrictStr], Field(description="Search expenses by customer id.")] = None,
        paid_through_account_id: Annotated[Optional[StrictStr], Field(description="Search expenses by paid through account id.")] = None,
        filter_by: Annotated[Optional[StrictStr], Field(description="Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Active</code>, <code>Status.Expired</code> and <code>Status.Stopped</code>")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code> .")] = None,
        sort_column: Annotated[Optional[StrictStr], Field(description="Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListRecurringExpensesResponse]:
        """List recurring expenses

        List all the Expenses with pagination.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param recurrence_name: Search recurring expenses by recurring expense name. Variants: <code>recurrence_name_startswith</code> and <code>recurrence_name_contains</code>. <code>Maximum length [100]</code>
        :type recurrence_name: str
        :param last_created_date: Search recurring expenses by date on when last expense was generated. Variants: <code>last_created_date_start</code>, <code>last_created_date_end</code>, <code>last_created_date_before</code> and <code>last_created_date_after</code> . <code>Format [yyyy-mm-dd]</code>
        :type last_created_date: str
        :param next_expense_date: Search recurring expenses by date on which next expense will be generated. Variants: <code>next_expense_date_start</code>, <code>next_expense_date_end</code>, <code>next_expense_date_before</code> and <code>next_expense_date_after</code> . <code>Format [yyyy-mm-dd]</code>
        :type next_expense_date: str
        :param status: Search expenses by expense status. Allowed Values <code>active</code>, <code>stopped</code> and <code>expired</code>
        :type status: str
        :param account_id: Unique ID of an account
        :type account_id: str
        :param account_name: Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code> . <code>Maximum length [100]</code>
        :type account_name: str
        :param amount: Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>
        :type amount: float
        :param customer_name: Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code> . <code>Maximum length [100]</code>
        :type customer_name: str
        :param customer_id: Search expenses by customer id.
        :type customer_id: str
        :param paid_through_account_id: Search expenses by paid through account id.
        :type paid_through_account_id: str
        :param filter_by: Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Active</code>, <code>Status.Expired</code> and <code>Status.Stopped</code>
        :type filter_by: str
        :param search_text: Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code> .
        :type search_text: str
        :param sort_column: Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>
        :type sort_column: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_get_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            recurrence_name=recurrence_name,
            last_created_date=last_created_date,
            next_expense_date=next_expense_date,
            status=status,
            account_id=account_id,
            account_name=account_name,
            amount=amount,
            customer_name=customer_name,
            customer_id=customer_id,
            paid_through_account_id=paid_through_account_id,
            filter_by=filter_by,
            search_text=search_text,
            sort_column=sort_column,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListRecurringExpensesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recurringexpenses_get_without_preload_content(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        recurrence_name: Annotated[Optional[StrictStr], Field(description="Search recurring expenses by recurring expense name. Variants: <code>recurrence_name_startswith</code> and <code>recurrence_name_contains</code>. <code>Maximum length [100]</code>")] = None,
        last_created_date: Annotated[Optional[StrictStr], Field(description="Search recurring expenses by date on when last expense was generated. Variants: <code>last_created_date_start</code>, <code>last_created_date_end</code>, <code>last_created_date_before</code> and <code>last_created_date_after</code> . <code>Format [yyyy-mm-dd]</code>")] = None,
        next_expense_date: Annotated[Optional[StrictStr], Field(description="Search recurring expenses by date on which next expense will be generated. Variants: <code>next_expense_date_start</code>, <code>next_expense_date_end</code>, <code>next_expense_date_before</code> and <code>next_expense_date_after</code> . <code>Format [yyyy-mm-dd]</code>")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Search expenses by expense status. Allowed Values <code>active</code>, <code>stopped</code> and <code>expired</code>")] = None,
        account_id: Annotated[Optional[StrictStr], Field(description="Unique ID of an account")] = None,
        account_name: Annotated[Optional[StrictStr], Field(description="Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code> . <code>Maximum length [100]</code>")] = None,
        amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>")] = None,
        customer_name: Annotated[Optional[StrictStr], Field(description="Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code> . <code>Maximum length [100]</code>")] = None,
        customer_id: Annotated[Optional[StrictStr], Field(description="Search expenses by customer id.")] = None,
        paid_through_account_id: Annotated[Optional[StrictStr], Field(description="Search expenses by paid through account id.")] = None,
        filter_by: Annotated[Optional[StrictStr], Field(description="Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Active</code>, <code>Status.Expired</code> and <code>Status.Stopped</code>")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code> .")] = None,
        sort_column: Annotated[Optional[StrictStr], Field(description="Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List recurring expenses

        List all the Expenses with pagination.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param recurrence_name: Search recurring expenses by recurring expense name. Variants: <code>recurrence_name_startswith</code> and <code>recurrence_name_contains</code>. <code>Maximum length [100]</code>
        :type recurrence_name: str
        :param last_created_date: Search recurring expenses by date on when last expense was generated. Variants: <code>last_created_date_start</code>, <code>last_created_date_end</code>, <code>last_created_date_before</code> and <code>last_created_date_after</code> . <code>Format [yyyy-mm-dd]</code>
        :type last_created_date: str
        :param next_expense_date: Search recurring expenses by date on which next expense will be generated. Variants: <code>next_expense_date_start</code>, <code>next_expense_date_end</code>, <code>next_expense_date_before</code> and <code>next_expense_date_after</code> . <code>Format [yyyy-mm-dd]</code>
        :type next_expense_date: str
        :param status: Search expenses by expense status. Allowed Values <code>active</code>, <code>stopped</code> and <code>expired</code>
        :type status: str
        :param account_id: Unique ID of an account
        :type account_id: str
        :param account_name: Search expenses by expense account name. Variants <code>account_name_startswith</code> and <code>account_name_contains</code> . <code>Maximum length [100]</code>
        :type account_name: str
        :param amount: Search expenses by amount. Variants: <code>amount_less_than</code>, <code>amount_less_equals</code>, <code>amount_greater_than</code> and <code>amount_greater_than</code>
        :type amount: float
        :param customer_name: Search expenses by customer name. Variants: <code>customer_name_startswith</code> and <code>customer_name_contains</code> . <code>Maximum length [100]</code>
        :type customer_name: str
        :param customer_id: Search expenses by customer id.
        :type customer_id: str
        :param paid_through_account_id: Search expenses by paid through account id.
        :type paid_through_account_id: str
        :param filter_by: Filter expenses by expense status. Allowed Values <code>Status.All</code>, <code>Status.Active</code>, <code>Status.Expired</code> and <code>Status.Stopped</code>
        :type filter_by: str
        :param search_text: Search expenses by account name or description or <code>customer name</code>  or <code>vendor name</code>. <code>Maximum length [100]</code> .
        :type search_text: str
        :param sort_column: Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>
        :type sort_column: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_get_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            recurrence_name=recurrence_name,
            last_created_date=last_created_date,
            next_expense_date=next_expense_date,
            status=status,
            account_id=account_id,
            account_name=account_name,
            amount=amount,
            customer_name=customer_name,
            customer_id=customer_id,
            paid_through_account_id=paid_through_account_id,
            filter_by=filter_by,
            search_text=search_text,
            sort_column=sort_column,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListRecurringExpensesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recurringexpenses_get_serialize(
        self,
        x_com_zoho_subscriptions_organizationid,
        recurrence_name,
        last_created_date,
        next_expense_date,
        status,
        account_id,
        account_name,
        amount,
        customer_name,
        customer_id,
        paid_through_account_id,
        filter_by,
        search_text,
        sort_column,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if recurrence_name is not None:
            
            _query_params.append(('recurrence_name', recurrence_name))
            
        if last_created_date is not None:
            
            _query_params.append(('last_created_date', last_created_date))
            
        if next_expense_date is not None:
            
            _query_params.append(('next_expense_date', next_expense_date))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if account_id is not None:
            
            _query_params.append(('account_id', account_id))
            
        if account_name is not None:
            
            _query_params.append(('account_name', account_name))
            
        if amount is not None:
            
            _query_params.append(('amount', amount))
            
        if customer_name is not None:
            
            _query_params.append(('customer_name', customer_name))
            
        if customer_id is not None:
            
            _query_params.append(('customer_id', customer_id))
            
        if paid_through_account_id is not None:
            
            _query_params.append(('paid_through_account_id', paid_through_account_id))
            
        if filter_by is not None:
            
            _query_params.append(('filter_by', filter_by))
            
        if search_text is not None:
            
            _query_params.append(('search_text', search_text))
            
        if sort_column is not None:
            
            _query_params.append(('sort_column', sort_column))
            
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recurringexpenses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recurringexpenses_post(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        create_a_recurring_expense_request: Optional[CreateARecurringExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateARecurringExpenseResponse:
        """Create a recurring expense

        Create a new recurring expense.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param create_a_recurring_expense_request:
        :type create_a_recurring_expense_request: CreateARecurringExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_post_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            create_a_recurring_expense_request=create_a_recurring_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recurringexpenses_post_with_http_info(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        create_a_recurring_expense_request: Optional[CreateARecurringExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateARecurringExpenseResponse]:
        """Create a recurring expense

        Create a new recurring expense.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param create_a_recurring_expense_request:
        :type create_a_recurring_expense_request: CreateARecurringExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_post_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            create_a_recurring_expense_request=create_a_recurring_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recurringexpenses_post_without_preload_content(
        self,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        create_a_recurring_expense_request: Optional[CreateARecurringExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a recurring expense

        Create a new recurring expense.

        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param create_a_recurring_expense_request:
        :type create_a_recurring_expense_request: CreateARecurringExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_post_serialize(
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            create_a_recurring_expense_request=create_a_recurring_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recurringexpenses_post_serialize(
        self,
        x_com_zoho_subscriptions_organizationid,
        create_a_recurring_expense_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter
        if create_a_recurring_expense_request is not None:
            _body_params = create_a_recurring_expense_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recurringexpenses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recurringexpenses_recurring_expense_id_comments_get(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListRecurringExpenseHistoryResponse:
        """List recurring expense history

        Get history and comments of a recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_comments_get_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListRecurringExpenseHistoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recurringexpenses_recurring_expense_id_comments_get_with_http_info(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListRecurringExpenseHistoryResponse]:
        """List recurring expense history

        Get history and comments of a recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_comments_get_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListRecurringExpenseHistoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recurringexpenses_recurring_expense_id_comments_get_without_preload_content(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List recurring expense history

        Get history and comments of a recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_comments_get_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListRecurringExpenseHistoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recurringexpenses_recurring_expense_id_comments_get_serialize(
        self,
        recurring_expense_id,
        x_com_zoho_subscriptions_organizationid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recurring_expense_id is not None:
            _path_params['recurring_expense_id'] = recurring_expense_id
        # process the query parameters
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recurringexpenses/{recurring_expense_id}/comments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recurringexpenses_recurring_expense_id_delete(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteARecurringExpenseResponse:
        """Delete a recurring expense

        Deleting an existing recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_delete_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recurringexpenses_recurring_expense_id_delete_with_http_info(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteARecurringExpenseResponse]:
        """Delete a recurring expense

        Deleting an existing recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_delete_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recurringexpenses_recurring_expense_id_delete_without_preload_content(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a recurring expense

        Deleting an existing recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_delete_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recurringexpenses_recurring_expense_id_delete_serialize(
        self,
        recurring_expense_id,
        x_com_zoho_subscriptions_organizationid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recurring_expense_id is not None:
            _path_params['recurring_expense_id'] = recurring_expense_id
        # process the query parameters
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/recurringexpenses/{recurring_expense_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recurringexpenses_recurring_expense_id_expenses_get(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        sort_column: Annotated[Optional[StrictStr], Field(description="Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListChildExpensesCreatedResponse:
        """List child expenses created

        List child expenses created from recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param sort_column: Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>
        :type sort_column: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_expenses_get_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            sort_column=sort_column,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListChildExpensesCreatedResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recurringexpenses_recurring_expense_id_expenses_get_with_http_info(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        sort_column: Annotated[Optional[StrictStr], Field(description="Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListChildExpensesCreatedResponse]:
        """List child expenses created

        List child expenses created from recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param sort_column: Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>
        :type sort_column: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_expenses_get_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            sort_column=sort_column,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListChildExpensesCreatedResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recurringexpenses_recurring_expense_id_expenses_get_without_preload_content(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        sort_column: Annotated[Optional[StrictStr], Field(description="Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List child expenses created

        List child expenses created from recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param sort_column: Sort expenses.Allowed Values <code>next_expense_date</code>, <code>account_name</code>, <code>total</code>, <code>last_created_date</code>, <code>recurrence_name</code>, <code>customer_name</code> and <code>created_time</code>
        :type sort_column: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_expenses_get_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            sort_column=sort_column,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListChildExpensesCreatedResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recurringexpenses_recurring_expense_id_expenses_get_serialize(
        self,
        recurring_expense_id,
        x_com_zoho_subscriptions_organizationid,
        sort_column,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recurring_expense_id is not None:
            _path_params['recurring_expense_id'] = recurring_expense_id
        # process the query parameters
        if sort_column is not None:
            
            _query_params.append(('sort_column', sort_column))
            
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recurringexpenses/{recurring_expense_id}/expenses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recurringexpenses_recurring_expense_id_get(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetARecurringExpenseResponse:
        """Retrieve a recurring expense

        Fetch the details of the recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_get_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recurringexpenses_recurring_expense_id_get_with_http_info(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetARecurringExpenseResponse]:
        """Retrieve a recurring expense

        Fetch the details of the recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_get_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recurringexpenses_recurring_expense_id_get_without_preload_content(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a recurring expense

        Fetch the details of the recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_get_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recurringexpenses_recurring_expense_id_get_serialize(
        self,
        recurring_expense_id,
        x_com_zoho_subscriptions_organizationid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recurring_expense_id is not None:
            _path_params['recurring_expense_id'] = recurring_expense_id
        # process the query parameters
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/recurringexpenses/{recurring_expense_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recurringexpenses_recurring_expense_id_post(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        update_a_recurring_expense_request: Optional[UpdateARecurringExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateARecurringExpenseResponse:
        """Update a recurring expense

        Update an existing recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param update_a_recurring_expense_request:
        :type update_a_recurring_expense_request: UpdateARecurringExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_post_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            update_a_recurring_expense_request=update_a_recurring_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recurringexpenses_recurring_expense_id_post_with_http_info(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        update_a_recurring_expense_request: Optional[UpdateARecurringExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateARecurringExpenseResponse]:
        """Update a recurring expense

        Update an existing recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param update_a_recurring_expense_request:
        :type update_a_recurring_expense_request: UpdateARecurringExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_post_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            update_a_recurring_expense_request=update_a_recurring_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recurringexpenses_recurring_expense_id_post_without_preload_content(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        update_a_recurring_expense_request: Optional[UpdateARecurringExpenseRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a recurring expense

        Update an existing recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param update_a_recurring_expense_request:
        :type update_a_recurring_expense_request: UpdateARecurringExpenseRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_post_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            update_a_recurring_expense_request=update_a_recurring_expense_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recurringexpenses_recurring_expense_id_post_serialize(
        self,
        recurring_expense_id,
        x_com_zoho_subscriptions_organizationid,
        update_a_recurring_expense_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recurring_expense_id is not None:
            _path_params['recurring_expense_id'] = recurring_expense_id
        # process the query parameters
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter
        if update_a_recurring_expense_request is not None:
            _body_params = update_a_recurring_expense_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recurringexpenses/{recurring_expense_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recurringexpenses_recurring_expense_id_status_resume_post(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResumeARecurringExpenseResponse:
        """Resume a recurring Expense

        Resume a stopped recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_status_resume_post_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResumeARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recurringexpenses_recurring_expense_id_status_resume_post_with_http_info(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResumeARecurringExpenseResponse]:
        """Resume a recurring Expense

        Resume a stopped recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_status_resume_post_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResumeARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recurringexpenses_recurring_expense_id_status_resume_post_without_preload_content(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Resume a recurring Expense

        Resume a stopped recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_status_resume_post_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResumeARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recurringexpenses_recurring_expense_id_status_resume_post_serialize(
        self,
        recurring_expense_id,
        x_com_zoho_subscriptions_organizationid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recurring_expense_id is not None:
            _path_params['recurring_expense_id'] = recurring_expense_id
        # process the query parameters
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recurringexpenses/{recurring_expense_id}/status/resume',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recurringexpenses_recurring_expense_id_status_stop_post(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StopARecurringExpenseResponse:
        """Stop a recurring expense

        Stop an active recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_status_stop_post_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StopARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recurringexpenses_recurring_expense_id_status_stop_post_with_http_info(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StopARecurringExpenseResponse]:
        """Stop a recurring expense

        Stop an active recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_status_stop_post_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StopARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recurringexpenses_recurring_expense_id_status_stop_post_without_preload_content(
        self,
        recurring_expense_id: StrictStr,
        x_com_zoho_subscriptions_organizationid: Annotated[StrictStr, Field(description="ID of the organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Stop a recurring expense

        Stop an active recurring expense.

        :param recurring_expense_id: (required)
        :type recurring_expense_id: str
        :param x_com_zoho_subscriptions_organizationid: ID of the organization (required)
        :type x_com_zoho_subscriptions_organizationid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recurringexpenses_recurring_expense_id_status_stop_post_serialize(
            recurring_expense_id=recurring_expense_id,
            x_com_zoho_subscriptions_organizationid=x_com_zoho_subscriptions_organizationid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StopARecurringExpenseResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recurringexpenses_recurring_expense_id_status_stop_post_serialize(
        self,
        recurring_expense_id,
        x_com_zoho_subscriptions_organizationid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recurring_expense_id is not None:
            _path_params['recurring_expense_id'] = recurring_expense_id
        # process the query parameters
        # process the header parameters
        if x_com_zoho_subscriptions_organizationid is not None:
            _header_params['X-com-zoho-subscriptions-organizationid'] = x_com_zoho_subscriptions_organizationid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Zoho_Auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recurringexpenses/{recurring_expense_id}/status/stop',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Plans

    A plan object contains the billing and pricing information of a plan. Your organization may consist of plans that differ either by features or by the planâ€™s billing frequency. You can have a $10 basic plan, $20 professional plan, $24 monthly or a $240 yearly plan.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ls_zoho_billing_plans.models.plan_response_addons_inner_price_brackets_inner import PlanResponseAddonsInnerPriceBracketsInner
from typing import Optional, Set
from typing_extensions import Self

class PlanResponseAddonsInner(BaseModel):
    """
    PlanResponseAddonsInner
    """ # noqa: E501
    addon_code: Optional[StrictStr] = Field(default=None, description="The addon code of the addon which is associated with the plan .")
    name: Optional[Any] = Field(default=None, description="The name of the addon.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the plan. It can be either <code> active </code>  or <code> inactive </code>.")
    pricing_scheme: Optional[StrictStr] = Field(default=None, description="Pricing type of the addon")
    unit_name: Optional[StrictStr] = Field(default=None, description="A name of your choice to refer to one unit of the addon.")
    price_brackets: Optional[List[PlanResponseAddonsInnerPriceBracketsInner]] = None
    __properties: ClassVar[List[str]] = ["addon_code", "name", "status", "pricing_scheme", "unit_name", "price_brackets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanResponseAddonsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in price_brackets (list)
        _items = []
        if self.price_brackets:
            for _item_price_brackets in self.price_brackets:
                if _item_price_brackets:
                    _items.append(_item_price_brackets.to_dict())
            _dict['price_brackets'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanResponseAddonsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addon_code": obj.get("addon_code"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "pricing_scheme": obj.get("pricing_scheme"),
            "unit_name": obj.get("unit_name"),
            "price_brackets": [PlanResponseAddonsInnerPriceBracketsInner.from_dict(_item) for _item in obj["price_brackets"]] if obj.get("price_brackets") is not None else None
        })
        return _obj



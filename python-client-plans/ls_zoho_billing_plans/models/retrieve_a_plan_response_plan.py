# coding: utf-8

"""
    Plans

    A plan object contains the billing and pricing information of a plan. Your organization may consist of plans that differ either by features or by the planâ€™s billing frequency. You can have a $10 basic plan, $20 professional plan, $24 monthly or a $240 yearly plan.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_plans.models.item_tax_preferences_inner import ItemTaxPreferencesInner
from ls_zoho_billing_plans.models.plan_response_custom_fields_inner import PlanResponseCustomFieldsInner
from ls_zoho_billing_plans.models.plan_response_tags_inner import PlanResponseTagsInner
from typing import Optional, Set
from typing_extensions import Self

class RetrieveAPlanResponsePlan(BaseModel):
    """
    RetrieveAPlanResponsePlan
    """ # noqa: E501
    plan_code: Optional[StrictStr] = Field(default=None, description="Unique string of your choice which lets you identify this plan.")
    name: Optional[StrictStr] = Field(default=None, description="Name of your choice to be displayed in the interface and invoices.")
    description: Optional[StrictStr] = Field(default=None, description="Short description regarding the plan.")
    store_markup_description: Optional[StrictStr] = Field(default=None, description="Long Description regarding the plan.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the plan. It can be either <code> active </code>  or <code> inactive </code>.")
    product_id: Optional[StrictStr] = Field(default=None, description="Product ID to which you want to associate this plan with.")
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID which the plan is associated.")
    account_name: Optional[StrictStr] = Field(default=None, description="Account name which the plan is associated.")
    trial_period: Optional[StrictInt] = Field(default=0, description="Number of free trial days that can be granted when a customer is subscribed to this plan.")
    setup_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="This indicates a one-time fee charged upfront while creating a subscription for this plan.")
    setup_fee_account_id: Optional[StrictStr] = Field(default=None, description="Setup Fee Account ID which the setup fee of the plan is associated.")
    setup_fee_account_name: Optional[StrictStr] = Field(default=None, description="Setup Fee Account Name which the setup fee of the plan is associated.")
    tags: Optional[List[PlanResponseTagsInner]] = None
    custom_fields: Optional[List[PlanResponseCustomFieldsInner]] = Field(default=None, description="Custom fields for a Plan.")
    recurring_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The customer is charged an amount over an interval for the subscription.")
    unit: Optional[StrictStr] = Field(default=None, description="A name of your choice to refer to one unit of the plan.")
    interval: Optional[StrictInt] = Field(default=None, description="Indicates the number of intervals between each billing. If interval=2, the customer would be billed every two months or years depending on the value for interval_unit.")
    interval_unit: Optional[StrictStr] = Field(default='months', description="The values can be either <code>months</code> or <code>years</code>. For interval=2 and interval_unit=months, the customer is billed every two months.")
    billing_cycles: Optional[StrictInt] = Field(default=-1, description="Number of cycles this plan's subscription should run for. If billing_cycles=12, the subscription would expire after 12 cycles. If billing_cycles=-1, the subscription would run until it is cancelled. If interval=2, interval_unit=months and billing_cycles=12, the customer would be billed every 2 months and this would go on for 12 times.")
    url: Optional[StrictStr] = Field(default=None, description="Unique url of the plan.")
    tax_id: Optional[StrictStr] = Field(default='no tax will be associated', description="Tax ID to which you would like to associate with this plan.")
    product_type: Optional[StrictStr] = Field(default=None, description="Product type for India/UK Edition.")
    hsn_or_sac: Optional[StrictStr] = Field(default=None, description="HSN or SAC code for Goods/Services plan")
    sat_item_key_code: Optional[StrictStr] = Field(default=None, description="Add SAT Item Key Code for your goods/services. Download the <a href= http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/catCFDI_V_4_07122022.xls  >CFDI Catalogs.</a>")
    unitkey_code: Optional[StrictStr] = Field(default=None, description="Add SAT Unit Key Code for your goods/services. Download the <a href= http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/catCFDI_V_4_07122022.xls  >CFDI Catalogs.</a>")
    item_tax_preferences: Optional[List[ItemTaxPreferencesInner]] = Field(default=None, description="Tax preferenece for plan")
    created_time: Optional[StrictStr] = Field(default=None, description="The time at which the plan was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="The time at which the plan details were last updated.")
    __properties: ClassVar[List[str]] = ["plan_code", "name", "description", "store_markup_description", "status", "product_id", "account_id", "account_name", "trial_period", "setup_fee", "setup_fee_account_id", "setup_fee_account_name", "tags", "custom_fields", "recurring_price", "unit", "interval", "interval_unit", "billing_cycles", "url", "tax_id", "product_type", "hsn_or_sac", "sat_item_key_code", "unitkey_code", "item_tax_preferences", "created_time", "updated_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveAPlanResponsePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_tax_preferences (list)
        _items = []
        if self.item_tax_preferences:
            for _item_item_tax_preferences in self.item_tax_preferences:
                if _item_item_tax_preferences:
                    _items.append(_item_item_tax_preferences.to_dict())
            _dict['item_tax_preferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveAPlanResponsePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plan_code": obj.get("plan_code"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "store_markup_description": obj.get("store_markup_description"),
            "status": obj.get("status"),
            "product_id": obj.get("product_id"),
            "account_id": obj.get("account_id"),
            "account_name": obj.get("account_name"),
            "trial_period": obj.get("trial_period") if obj.get("trial_period") is not None else 0,
            "setup_fee": obj.get("setup_fee") if obj.get("setup_fee") is not None else 0,
            "setup_fee_account_id": obj.get("setup_fee_account_id"),
            "setup_fee_account_name": obj.get("setup_fee_account_name"),
            "tags": [PlanResponseTagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "custom_fields": [PlanResponseCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "recurring_price": obj.get("recurring_price"),
            "unit": obj.get("unit"),
            "interval": obj.get("interval"),
            "interval_unit": obj.get("interval_unit") if obj.get("interval_unit") is not None else 'months',
            "billing_cycles": obj.get("billing_cycles") if obj.get("billing_cycles") is not None else -1,
            "url": obj.get("url"),
            "tax_id": obj.get("tax_id") if obj.get("tax_id") is not None else 'no tax will be associated',
            "product_type": obj.get("product_type"),
            "hsn_or_sac": obj.get("hsn_or_sac"),
            "sat_item_key_code": obj.get("sat_item_key_code"),
            "unitkey_code": obj.get("unitkey_code"),
            "item_tax_preferences": [ItemTaxPreferencesInner.from_dict(_item) for _item in obj["item_tax_preferences"]] if obj.get("item_tax_preferences") is not None else None,
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time")
        })
        return _obj



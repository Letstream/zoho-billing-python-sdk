# coding: utf-8

"""
    Credit-Notes

    Credit notes are created when a refund is to be made to a customer. A credit note object allows you to keep track of all credit note related information.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_credit_notes.models.credit_note_response_creditnote_items_inner import CreditNoteResponseCreditnoteItemsInner
from ls_zoho_billing_credit_notes.models.credit_note_response_custom_fields_inner import CreditNoteResponseCustomFieldsInner
from ls_zoho_billing_credit_notes.models.credit_note_response_invoices_inner import CreditNoteResponseInvoicesInner
from ls_zoho_billing_credit_notes.models.credit_note_response_taxes_inner import CreditNoteResponseTaxesInner
from typing import Optional, Set
from typing_extensions import Self

class RetreiveACreditNoteResponseCreditNote(BaseModel):
    """
    RetreiveACreditNoteResponseCreditNote
    """ # noqa: E501
    creditnote_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the credit note generated by the server.")
    creditnote_number: Optional[StrictStr] = Field(default=None, description="Unique number generated (starts with CN) which will be displayed in the interface and credit notes.")
    var_date: Optional[StrictStr] = Field(default=None, description="The date on which credit note is raised.", alias="date")
    status: Optional[StrictStr] = Field(default=None, description="Status of the credit note. This can be <code>open</code>, <code>closed</code> or <code>void</code>.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of the customer for whom the credit note is raised.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Name of the customer to whom the credit note is raised.")
    custom_fields: Optional[List[CreditNoteResponseCustomFieldsInner]] = Field(default=None, description="Additional fields for the Credit-Notes.")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference number generated for the payment. A string of your choice can also be used as the reference number.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the customer.")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total credits raised in this credit note.")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unapplied credits.")
    creditnote_items: Optional[List[CreditNoteResponseCreditnoteItemsInner]] = Field(default=None, description="List of items involved in the credit note. This contains <code>item_id</code>, <code>description</code>, <code>quantity</code>, <code>price</code> and <code>item_total</code>.")
    invoices: Optional[List[CreditNoteResponseInvoicesInner]] = Field(default=None, description="List of invoices for which the credit note has been raised. This contains <code>invoice_id</code> and <code>amount</code>.")
    taxes: Optional[List[CreditNoteResponseTaxesInner]] = Field(default=None, description="Taxes associated wit the subscription.")
    currency_code: Optional[StrictStr] = Field(default=None, description="Customer's currency code. This currency code is used in credit notes.")
    currency_symbol: Optional[StrictStr] = Field(default=None, description="Customer's currency symbol.")
    created_time: Optional[StrictStr] = Field(default=None, description="Time at which the credit note was created.")
    updated_time: Optional[StrictStr] = Field(default=None, description="Time at which the credit note details were last updated.")
    template_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the creditnote template")
    template_name: Optional[StrictStr] = Field(default=None, description="Name of the default template of the creditnote.")
    notes: Optional[StrictStr] = Field(default=None, description="A short note for the credit note.")
    terms: Optional[StrictStr] = Field(default=None, description="Terms & condition to be displayed in the credit note.")
    __properties: ClassVar[List[str]] = ["creditnote_id", "creditnote_number", "date", "status", "customer_id", "customer_name", "custom_fields", "reference_number", "email", "total", "balance", "creditnote_items", "invoices", "taxes", "currency_code", "currency_symbol", "created_time", "updated_time", "template_id", "template_name", "notes", "terms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetreiveACreditNoteResponseCreditNote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in creditnote_items (list)
        _items = []
        if self.creditnote_items:
            for _item_creditnote_items in self.creditnote_items:
                if _item_creditnote_items:
                    _items.append(_item_creditnote_items.to_dict())
            _dict['creditnote_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item_invoices in self.invoices:
                if _item_invoices:
                    _items.append(_item_invoices.to_dict())
            _dict['invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taxes (list)
        _items = []
        if self.taxes:
            for _item_taxes in self.taxes:
                if _item_taxes:
                    _items.append(_item_taxes.to_dict())
            _dict['taxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetreiveACreditNoteResponseCreditNote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creditnote_id": obj.get("creditnote_id"),
            "creditnote_number": obj.get("creditnote_number"),
            "date": obj.get("date"),
            "status": obj.get("status"),
            "customer_id": obj.get("customer_id"),
            "customer_name": obj.get("customer_name"),
            "custom_fields": [CreditNoteResponseCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "reference_number": obj.get("reference_number"),
            "email": obj.get("email"),
            "total": obj.get("total"),
            "balance": obj.get("balance"),
            "creditnote_items": [CreditNoteResponseCreditnoteItemsInner.from_dict(_item) for _item in obj["creditnote_items"]] if obj.get("creditnote_items") is not None else None,
            "invoices": [CreditNoteResponseInvoicesInner.from_dict(_item) for _item in obj["invoices"]] if obj.get("invoices") is not None else None,
            "taxes": [CreditNoteResponseTaxesInner.from_dict(_item) for _item in obj["taxes"]] if obj.get("taxes") is not None else None,
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol"),
            "created_time": obj.get("created_time"),
            "updated_time": obj.get("updated_time"),
            "template_id": obj.get("template_id"),
            "template_name": obj.get("template_name"),
            "notes": obj.get("notes"),
            "terms": obj.get("terms")
        })
        return _obj



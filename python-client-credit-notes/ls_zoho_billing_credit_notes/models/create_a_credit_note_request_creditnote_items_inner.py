# coding: utf-8

"""
    Credit-Notes

    Credit notes are created when a refund is to be made to a customer. A credit note object allows you to keep track of all credit note related information.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ls_zoho_billing_credit_notes.models.item_custom_fields_inner import ItemCustomFieldsInner
from ls_zoho_billing_credit_notes.models.tags_inner import TagsInner
from typing import Optional, Set
from typing_extensions import Self

class CreateACreditNoteRequestCreditnoteItemsInner(BaseModel):
    """
    CreateACreditNoteRequestCreditnoteItemsInner
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="A small description about the item.")
    code: StrictStr = Field(description="Unique code for the creditnote line item.")
    account_id: Optional[StrictStr] = Field(default=None, description="Unique ID to denote the account.")
    quantity: StrictInt = Field(description="Quantity of the item included.")
    tags: Optional[List[TagsInner]] = None
    item_custom_fields: Optional[List[ItemCustomFieldsInner]] = Field(default=None, description="Custom fields for a item.")
    tax_id: Optional[StrictStr] = Field(default=None, description="Unique to denote the tax associate dto the creditnote")
    tds_tax_id: Optional[StrictStr] = Field(default=None, description="ID of the TDS tax.")
    tax_exemption_id: Optional[StrictStr] = Field(default=None, description="Unique ID of the tax exemption.")
    tax_exemption_code: Optional[StrictStr] = Field(default=None, description="Unique code of the tax exemption.")
    price: Union[StrictFloat, StrictInt] = Field(description="The price of the item included.")
    sat_item_key_code: Optional[StrictStr] = Field(default=None, description="Add SAT Item Key Code for your goods/services. Download the <a href= http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/catCFDI_V_4_07122022.xls  >CFDI Catalogs.</a>")
    unitkey_code: Optional[StrictStr] = Field(default=None, description="Add SAT Unit Key Code for your goods/services. Download the <a href= http://omawww.sat.gob.mx/tramitesyservicios/Paginas/documentos/catCFDI_V_4_07122022.xls  >CFDI Catalogs.</a>")
    __properties: ClassVar[List[str]] = ["description", "code", "account_id", "quantity", "tags", "item_custom_fields", "tax_id", "tds_tax_id", "tax_exemption_id", "tax_exemption_code", "price", "sat_item_key_code", "unitkey_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateACreditNoteRequestCreditnoteItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_custom_fields (list)
        _items = []
        if self.item_custom_fields:
            for _item_item_custom_fields in self.item_custom_fields:
                if _item_item_custom_fields:
                    _items.append(_item_item_custom_fields.to_dict())
            _dict['item_custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateACreditNoteRequestCreditnoteItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "code": obj.get("code"),
            "account_id": obj.get("account_id"),
            "quantity": obj.get("quantity"),
            "tags": [TagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "item_custom_fields": [ItemCustomFieldsInner.from_dict(_item) for _item in obj["item_custom_fields"]] if obj.get("item_custom_fields") is not None else None,
            "tax_id": obj.get("tax_id"),
            "tds_tax_id": obj.get("tds_tax_id"),
            "tax_exemption_id": obj.get("tax_exemption_id"),
            "tax_exemption_code": obj.get("tax_exemption_code"),
            "price": obj.get("price"),
            "sat_item_key_code": obj.get("sat_item_key_code"),
            "unitkey_code": obj.get("unitkey_code")
        })
        return _obj


